{"ast":null,"code":"/* \nThis file handles the surprisingly complicated PAWN movement. This includes \nthe PAWN's special starting move, special diagonal taking move, ability to take \nen passant, ability to be taken en passant, and promoting upon reaching the \nother side of the board. Also contains the ever useful function isFriendlyPiece().\nThis Section of code could be cleaned up a little bit but right now everything is \nworking perfectly so if it ain't broke don't fix it.\n*/\nimport { TeamType } from '../constants';\nimport { IMAGE, PROMOTED_PIECE } from '../components/Promotion/promotion'; // Checks to see if a piece is in the way, this is different from other pieces\n// since normally if an enemy piece is on the square you are moving to \n// the piece is captured, a pawn however, is blockaded.\n\nfunction pawnIsBlockaded(x, y, boardState) {\n  const piece = boardState.find(p => p.x === x && p.y === y);\n  const occupied = piece ? true : false;\n  return occupied;\n} // Checks to see if a piece on a given square can be captured en passant\n\n\nfunction checkEnPassant(x, y, boardState) {\n  const piece = boardState.find(p => p.x === x && p.y === y);\n\n  if (piece && piece.enPassantable) {\n    return piece.enPassantable;\n  }\n\n  return false;\n} // Sets the enPassantable flag to true for a pawn on a given square while unsetting that\n// flag for every other piece\n\n\nexport function setEnPassant(x, y, boardState) {\n  boardState.forEach(p => {\n    if (p.x === x && p.y === y) {\n      p.enPassantable = true;\n    } else {\n      p.enPassantable = false;\n    }\n  });\n}\nexport function unsetEnPassant(boardState) {\n  boardState.forEach(p => {\n    p.enPassantable = false;\n  });\n}\nexport function isFriendlyPiece(x, y, team, boardState) {\n  const piece = boardState.find(p => p.x === x && p.y === y);\n  const occupied = piece && piece.team === team ? true : false;\n  return occupied;\n}\nexport function isPawnStartingMove(px, py, x, y, team, boardState) {\n  const startingRow = team === TeamType.WHITE ? 1 : 6;\n  const increment = team === TeamType.WHITE ? 1 : -1;\n\n  if (py === startingRow && px === x && py === y - 2 * increment) {\n    if (!pawnIsBlockaded(x, y, boardState) && !pawnIsBlockaded(x, y - increment, boardState)) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function isPawnNormalMove(px, py, x, y, team, boardState) {\n  const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n  const increment = team === TeamType.WHITE ? 1 : -1;\n\n  if (py === y - increment && px === x) {\n    if (!pawnIsBlockaded(x, y, boardState)) {\n      return true;\n    }\n  }\n\n  if ((x === px + 1 || x === px - 1) && py === y - increment && isFriendlyPiece(x, y, enemyTeam, boardState)) {\n    return true;\n  }\n\n  return false;\n}\nexport function isEnPassant(px, py, x, y, team, boardState) {\n  const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n  const increment = team === TeamType.WHITE ? 1 : -1;\n\n  if ((x === px + 1 || x === px - 1) && py === y - increment && isFriendlyPiece(x, py, enemyTeam, boardState)) {\n    if (checkEnPassant(x, py, boardState)) {\n      return true;\n    }\n  }\n\n  return false;\n} // Promotes a pawn to a QUEEN, ROOK, BISHOP, or NIGHT\n\nexport function promotePieces(boardState) {\n  const promotedPiece = boardState.find(p => p.promoted === true);\n\n  if (promotedPiece) {\n    const id = boardState.indexOf(promotedPiece);\n    boardState[id] = {\n      image: IMAGE,\n      x: promotedPiece.x,\n      y: promotedPiece.y,\n      taken: false,\n      team: promotedPiece.team,\n      type: PROMOTED_PIECE,\n      enPassantable: false,\n      promoted: false\n    };\n  }\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/Referee/pawnLogic.ts"],"names":["TeamType","IMAGE","PROMOTED_PIECE","pawnIsBlockaded","x","y","boardState","piece","find","p","occupied","checkEnPassant","enPassantable","setEnPassant","forEach","unsetEnPassant","isFriendlyPiece","team","isPawnStartingMove","px","py","startingRow","WHITE","increment","isPawnNormalMove","enemyTeam","BLACK","isEnPassant","promotePieces","promotedPiece","promoted","id","indexOf","image","taken","type"],"mappings":"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","sourcesContent":["/* \nThis file handles the surprisingly complicated PAWN movement. This includes \nthe PAWN's special starting move, special diagonal taking move, ability to take \nen passant, ability to be taken en passant, and promoting upon reaching the \nother side of the board. Also contains the ever useful function isFriendlyPiece().\nThis Section of code could be cleaned up a little bit but right now everything is \nworking perfectly so if it ain't broke don't fix it.\n*/\n\n\nimport { Piece, TeamType } from '../constants'\nimport {IMAGE, PROMOTED_PIECE} from '../components/Promotion/promotion'\n\n\n// Checks to see if a piece is in the way, this is different from other pieces\n// since normally if an enemy piece is on the square you are moving to \n// the piece is captured, a pawn however, is blockaded.\nfunction pawnIsBlockaded(x : number, y: number, boardState : Piece []): boolean {\n    const piece = boardState.find(p => p.x === x && p.y === y) \n    const occupied =  piece ? true : false\n    return occupied\n}\n\n// Checks to see if a piece on a given square can be captured en passant\nfunction checkEnPassant (x : number, y : number, boardState : Piece []) : boolean {\n    const piece = boardState.find(p => p.x === x && p.y === y)\n    if (piece && piece.enPassantable){\n        return piece.enPassantable  \n    } return false\n}\n\n// Sets the enPassantable flag to true for a pawn on a given square while unsetting that\n// flag for every other piece\nexport function setEnPassant(x : number, y : number, boardState : Piece []){\n        boardState.forEach(p => {\n            if (p.x === x && p.y === y){\n                p.enPassantable = true\n            } else{\n                p.enPassantable = false\n            }\n        })\n    }\n\nexport function unsetEnPassant( boardState : Piece []){\n    boardState.forEach(p => {\n            p.enPassantable = false\n    })\n}\n\nexport function isFriendlyPiece(x : number, y: number, team : TeamType, boardState : Piece []): boolean {\n    const piece = boardState.find(p => p.x === x && p.y === y)\n    const occupied =  piece && piece.team === team ? true : false\n    return occupied\n}\n\nexport function isPawnStartingMove(px : number, py : number, x : number, y : number, \n                                    team : TeamType, boardState : Piece []):boolean{\n    const startingRow = team === TeamType.WHITE ? 1 : 6\n    const increment = team === TeamType.WHITE ? 1 : - 1\n    if ((py === startingRow && px === x) && (py === y - 2 * increment)){\n        if (!pawnIsBlockaded(x, y, boardState) && !pawnIsBlockaded(x, y - increment, boardState)){\n            return true\n        }\n    } return false\n}\n\nexport function isPawnNormalMove(px : number, py : number, x : number, y : number, \n                                team : TeamType, boardState : Piece []): boolean{\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n    const increment = team === TeamType.WHITE ? 1 : - 1\n    if (py === y - increment && px === x){\n        if (!pawnIsBlockaded(x, y, boardState)){\n            return true;\n        } \n    }\n    if ((x === px + 1 || x === px -1) && (py === y - increment) && isFriendlyPiece(x, y, enemyTeam, boardState)) {\n        return true\n    } \n    return false \n} \n\n\nexport function isEnPassant(px : number, py : number, x : number, y : number,\n                                 team : TeamType, boardState : Piece []): boolean{\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n    const increment = team === TeamType.WHITE ? 1 : - 1\n    if ((x === px + 1 || x === px -1) && (py === y - increment) && isFriendlyPiece(x, py, enemyTeam, boardState)) {\n        if (checkEnPassant(x, py, boardState)){\n            return true\n        }\n    }\n    return false\n}\n\n    // Promotes a pawn to a QUEEN, ROOK, BISHOP, or NIGHT\nexport function promotePieces(boardState : Piece []){\n    const promotedPiece = boardState.find(p => p.promoted === true)\n    if (promotedPiece){\n        const id = boardState.indexOf(promotedPiece)\n        boardState[id] = {image : IMAGE, x : promotedPiece.x,  y: promotedPiece.y, taken : false,\n                    team : promotedPiece.team, type : PROMOTED_PIECE, enPassantable : false,\n                    promoted : false}\n    }\n}"]},"metadata":{},"sourceType":"module"}