{"ast":null,"code":"import { PieceType, TeamType } from \"../components/chessboard/chessboard\";\nexport default class Referee {\n  pawnIsBlockaded(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y);\n    const occupied = piece ? true : false;\n    return occupied;\n  }\n\n  isOpposingPiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y);\n    const occupied = piece && piece.team !== team ? true : false;\n    return occupied;\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState) {\n    console.log(\"Ref checking the move .... \");\n\n    if (type === PieceType.PAWN) {\n      const startingRow = team === TeamType.WHITE ? 1 : 6;\n      const increment = team === TeamType.WHITE ? 1 : -1; // Moving Logic\n\n      if (py === startingRow && px === x && py === y - 2 * increment) {\n        if (!this.pawnIsBlockaded(x, y, team, boardState) && !this.pawnIsBlockaded(x, y - increment, team, boardState)) {\n          return true;\n        }\n      }\n\n      if (py === y - increment && px === x) {\n        if (!this.pawnIsBlockaded(x, y, team, boardState)) {\n          return true;\n        }\n      } // ATTACK LOGIC\n\n\n      if ((x == px + 1 || x == px - 1) && py == y - increment) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","TeamType","Referee","pawnIsBlockaded","x","y","team","boardState","piece","find","p","occupied","isOpposingPiece","isValidMove","px","py","type","console","log","PAWN","startingRow","WHITE","increment"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAA2C,qCAA3C;AAEA,eAAe,MAAMC,OAAN,CAAa;AACxBC,EAAAA,eAAe,CAACC,CAAD,EAAaC,CAAb,EAAwBC,IAAxB,EAAyCC,UAAzC,EAAyE;AACpF,UAAMC,KAAK,GAAGD,UAAU,CAACE,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACN,CAAF,KAAQA,CAAR,IAAaM,CAAC,CAACL,CAAF,KAAQA,CAA1C,CAAd;AACA,UAAMM,QAAQ,GAAIH,KAAK,GAAG,IAAH,GAAU,KAAjC;AACA,WAAOG,QAAP;AACH;;AAEDC,EAAAA,eAAe,CAACR,CAAD,EAAaC,CAAb,EAAwBC,IAAxB,EAAyCC,UAAzC,EAAyE;AACpF,UAAMC,KAAK,GAAGD,UAAU,CAACE,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACN,CAAF,KAAQA,CAAR,IAAaM,CAAC,CAACL,CAAF,KAAQA,CAA1C,CAAd;AACA,UAAMM,QAAQ,GAAKH,KAAK,IAAIA,KAAK,CAACF,IAAN,KAAeA,IAAzB,GAAiC,IAAjC,GAAwC,KAA1D;AACA,WAAOK,QAAP;AACH;;AACDE,EAAAA,WAAW,CAACC,EAAD,EAAcC,EAAd,EAA2BX,CAA3B,EAAuCC,CAAvC,EAAmDW,IAAnD,EAAqEV,IAArE,EAAsFC,UAAtF,EAA4G;AACnHU,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;;AAEA,QAAIF,IAAI,KAAKhB,SAAS,CAACmB,IAAvB,EAA4B;AACxB,YAAMC,WAAW,GAAGd,IAAI,KAAKL,QAAQ,CAACoB,KAAlB,GAA0B,CAA1B,GAA8B,CAAlD;AACA,YAAMC,SAAS,GAAGhB,IAAI,KAAKL,QAAQ,CAACoB,KAAlB,GAA0B,CAA1B,GAA8B,CAAE,CAAlD,CAFwB,CAGxB;;AACA,UAAKN,EAAE,KAAKK,WAAP,IAAsBN,EAAE,KAAKV,CAA9B,IAAqCW,EAAE,KAAKV,CAAC,GAAG,IAAIiB,SAAxD,EAAmE;AAC/D,YAAI,CAAC,KAAKnB,eAAL,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2BC,IAA3B,EAAiCC,UAAjC,CAAD,IAAiD,CAAC,KAAKJ,eAAL,CAAqBC,CAArB,EAAwBC,CAAC,GAAGiB,SAA5B,EAAuChB,IAAvC,EAA6CC,UAA7C,CAAtD,EAA+G;AAC3G,iBAAO,IAAP;AACH;AACJ;;AACD,UAAIQ,EAAE,KAAKV,CAAC,GAAGiB,SAAX,IAAwBR,EAAE,KAAKV,CAAnC,EAAqC;AACjC,YAAI,CAAC,KAAKD,eAAL,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2BC,IAA3B,EAAiCC,UAAjC,CAAL,EAAkD;AAC9C,iBAAO,IAAP;AACH;AACJ,OAbuB,CAcxB;;;AACA,UAAI,CAACH,CAAC,IAAIU,EAAE,GAAG,CAAV,IAAeV,CAAC,IAAIU,EAAE,GAAE,CAAzB,KAAgCC,EAAE,IAAIV,CAAC,GAAGiB,SAA9C,EAA0D;AACtD,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH;;AAnCuB","sourcesContent":["import { PieceType, TeamType, Piece } from \"../components/chessboard/chessboard\"\n\nexport default class Referee{\n    pawnIsBlockaded(x : number, y: number, team : TeamType, boardState : Piece []): boolean {\n        const piece = boardState.find(p => p.x === x && p.y === y) \n        const occupied =  piece ? true : false\n        return occupied\n    }\n    \n    isOpposingPiece(x : number, y: number, team : TeamType, boardState : Piece []): boolean {\n        const piece = boardState.find(p => p.x === x && p.y === y) \n        const occupied =  (piece && piece.team !== team) ? true : false\n        return occupied\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, team : TeamType, boardState : Piece []){\n        console.log(\"Ref checking the move .... \")\n\n        if (type === PieceType.PAWN){\n            const startingRow = team === TeamType.WHITE ? 1 : 6\n            const increment = team === TeamType.WHITE ? 1 : - 1\n            // Moving Logic\n            if ((py === startingRow && px === x) && (py === y - 2 * increment)){\n                if (!this.pawnIsBlockaded(x, y, team, boardState) && !this.pawnIsBlockaded(x, y - increment, team, boardState)){\n                    return true\n                }\n            } \n            if (py === y - increment && px === x){\n                if (!this.pawnIsBlockaded(x, y, team, boardState)){\n                    return true;\n                }\n            } \n            // ATTACK LOGIC\n            if ((x == px + 1 || x == px -1) && (py == y - increment)) {\n                return true\n            }\n        }\n        return false\n    }\n}"]},"metadata":{},"sourceType":"module"}