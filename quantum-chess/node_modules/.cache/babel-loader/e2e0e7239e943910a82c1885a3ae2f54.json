{"ast":null,"code":"export function diagonalPathClear(px, py, dx, dy, boardState) {\n  const x_dir = Math.sign(dx);\n  const y_dir = Math.sign(dy);\n  console.log('we here');\n\n  for (let i = 1; i < Math.abs(dx); i++) {\n    console.log('px = ', px, 'py = ', py, 'i = ', i, 'xdir = ', x_dir, 'ydir = ', y_dir);\n    const obstructingPiece = boardState.find(p => p.x === px + i * x_dir && p.y === py + i * y_dir);\n\n    if (obstructingPiece) {\n      console.log('obstructing piece at ', px + i * x_dir, py + i * y_dir);\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/pathChecker.ts"],"names":["diagonalPathClear","px","py","dx","dy","boardState","x_dir","Math","sign","y_dir","console","log","i","abs","obstructingPiece","find","p","x","y"],"mappings":"AAEA,OAAO,SAASA,iBAAT,CAA2BC,EAA3B,EAAwCC,EAAxC,EAAqDC,EAArD,EAAkEC,EAAlE,EAA+EC,UAA/E,EAA+G;AAClH,QAAMC,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,EAAV,CAAd;AACA,QAAMM,KAAK,GAAGF,IAAI,CAACC,IAAL,CAAUJ,EAAV,CAAd;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACM,GAAL,CAASV,EAAT,CAApB,EAAkCS,CAAC,EAAnC,EAAuC;AACnCF,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBV,EAArB,EAAyB,OAAzB,EAAkCC,EAAlC,EAAsC,MAAtC,EAA8CU,CAA9C,EAAiD,SAAjD,EAA4DN,KAA5D,EAAmE,SAAnE,EAA8EG,KAA9E;AACA,UAAMK,gBAAgB,GAAGT,UAAU,CAACU,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,CAAF,KAAQhB,EAAE,GAAGW,CAAC,GAACN,KAAf,IAAwBU,CAAC,CAACE,CAAF,KAAQhB,EAAE,GAAGU,CAAC,GAACH,KAA5D,CAAzB;;AACA,QAAIK,gBAAJ,EAAqB;AACjBJ,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCV,EAAE,GAAGW,CAAC,GAACN,KAA5C,EAAmDJ,EAAE,GAAGU,CAAC,GAACH,KAA1D;AACA,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH","sourcesContent":["import { Piece } from '../constants'\n\nexport function diagonalPathClear(px : number, py : number, dx : number, dy : number, boardState : Piece[]) : boolean {\n    const x_dir = Math.sign(dx)\n    const y_dir = Math.sign(dy)\n    console.log('we here')\n    for (let i = 1; i < Math.abs(dx); i ++){\n        console.log('px = ', px, 'py = ', py, 'i = ', i, 'xdir = ', x_dir, 'ydir = ', y_dir)\n        const obstructingPiece = boardState.find(p => p.x === px + i*x_dir && p.y === py + i*y_dir) \n        if (obstructingPiece){\n            console.log('obstructing piece at ', px + i*x_dir, py + i*y_dir)\n            return false\n        }\n    }\n    return true\n}"]},"metadata":{},"sourceType":"module"}