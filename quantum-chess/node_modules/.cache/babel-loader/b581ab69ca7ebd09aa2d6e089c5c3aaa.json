{"ast":null,"code":"/*\nThis function updates the Piece [] so that the piece moves to its new location. It\nalso handles the case where a piece is taken and when a ROOK is teleported via \nthe castling move.\n*/\nimport SuperPiece from '../superPiece';\nexport let TAKEN_PIECE = null;\nexport function executeMove(px, py, x, y, possiblePieces, activePlayer, boardState) {\n  const takenPiece = boardState.find(p => p.x === x && p.y === y && p.SuperPiece.team !== activePlayer);\n\n  if (takenPiece) {\n    TAKEN_PIECE = takenPiece;\n    takePiece(takenPiece, boardState);\n  } else {\n    TAKEN_PIECE = null;\n  }\n\n  const currentPiece = boardState.find(p => p.x === px && p.y === py);\n\n  if (currentPiece) {\n    const id = boardState.indexOf(currentPiece);\n    boardState[id] = {\n      SuperPiece: new SuperPiece(possiblePieces, activePlayer),\n      x,\n      y\n    };\n  }\n}\nexport function fakeMove(px, py, x, y, possiblePieces, activePlayer, boardState) {\n  const takenPiece = boardState.find(p => p.x === x && p.y === y && p.SuperPiece.team !== activePlayer);\n\n  if (takenPiece) {\n    takePiece(takenPiece, boardState);\n  }\n\n  const currentPiece = boardState.find(p => p.x === px && p.y === py);\n\n  if (currentPiece) {\n    const id = boardState.indexOf(currentPiece);\n    boardState[id] = {\n      SuperPiece: new SuperPiece(possiblePieces, activePlayer),\n      x,\n      y\n    };\n  }\n}\n\nfunction takePiece(p, boardState) {\n  const id = boardState.indexOf(p);\n  boardState.splice(id, 1);\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/QuantumChess/quantum-chess/src/Referee/executeMove.ts"],"names":["SuperPiece","TAKEN_PIECE","executeMove","px","py","x","y","possiblePieces","activePlayer","boardState","takenPiece","find","p","team","takePiece","currentPiece","id","indexOf","fakeMove","splice"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAKA,OAAOA,UAAP,MAAuB,eAAvB;AAEA,OAAO,IAAIC,WAA0B,GAAG,IAAjC;AAEP,OAAO,SAASC,WAAT,CAAsBC,EAAtB,EAAmCC,EAAnC,EAAgDC,CAAhD,EAA4DC,CAA5D,EACqBC,cADrB,EACoDC,YADpD,EAC6EC,UAD7E,EACoG;AACvG,QAAMC,UAAU,GAAGD,UAAU,CAACE,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACP,CAAF,KAAQA,CAAR,IAAaO,CAAC,CAACN,CAAF,KAAQA,CAArB,IAA0BM,CAAC,CAACZ,UAAF,CAAaa,IAAb,KAAsBL,YAArE,CAAnB;;AACA,MAAIE,UAAJ,EAAe;AACXT,IAAAA,WAAW,GAAGS,UAAd;AACAI,IAAAA,SAAS,CAACJ,UAAD,EAAaD,UAAb,CAAT;AACH,GAHD,MAGO;AACHR,IAAAA,WAAW,GAAG,IAAd;AACH;;AACD,QAAMc,YAAY,GAAGN,UAAU,CAACE,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACP,CAAF,KAAQF,EAAR,IAAcS,CAAC,CAACN,CAAF,KAAQF,EAA3C,CAArB;;AACA,MAAIW,YAAJ,EAAiB;AACb,UAAMC,EAAE,GAAGP,UAAU,CAACQ,OAAX,CAAmBF,YAAnB,CAAX;AACAN,IAAAA,UAAU,CAACO,EAAD,CAAV,GAAiB;AAAChB,MAAAA,UAAU,EAAG,IAAIA,UAAJ,CAAeO,cAAf,EAA+BC,YAA/B,CAAd;AAA4DH,MAAAA,CAA5D;AAA+DC,MAAAA;AAA/D,KAAjB;AACH;AACJ;AAED,OAAO,SAASY,QAAT,CAAmBf,EAAnB,EAAgCC,EAAhC,EAA6CC,CAA7C,EAAyDC,CAAzD,EACHC,cADG,EAC4BC,YAD5B,EACqDC,UADrD,EAC4E;AAC/E,QAAMC,UAAU,GAAGD,UAAU,CAACE,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACP,CAAF,KAAQA,CAAR,IAAaO,CAAC,CAACN,CAAF,KAAQA,CAArB,IAA0BM,CAAC,CAACZ,UAAF,CAAaa,IAAb,KAAsBL,YAArE,CAAnB;;AACA,MAAIE,UAAJ,EAAe;AACfI,IAAAA,SAAS,CAACJ,UAAD,EAAaD,UAAb,CAAT;AACC;;AACD,QAAMM,YAAY,GAAGN,UAAU,CAACE,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACP,CAAF,KAAQF,EAAR,IAAcS,CAAC,CAACN,CAAF,KAAQF,EAA3C,CAArB;;AACA,MAAIW,YAAJ,EAAiB;AACb,UAAMC,EAAE,GAAGP,UAAU,CAACQ,OAAX,CAAmBF,YAAnB,CAAX;AACAN,IAAAA,UAAU,CAACO,EAAD,CAAV,GAAiB;AAAChB,MAAAA,UAAU,EAAG,IAAIA,UAAJ,CAAeO,cAAf,EAA+BC,YAA/B,CAAd;AAA4DH,MAAAA,CAA5D;AAA+DC,MAAAA;AAA/D,KAAjB;AACH;AACJ;;AAGD,SAASQ,SAAT,CAAmBF,CAAnB,EAA8BH,UAA9B,EAAoD;AAChD,QAAMO,EAAE,GAAGP,UAAU,CAACQ,OAAX,CAAmBL,CAAnB,CAAX;AACAH,EAAAA,UAAU,CAACU,MAAX,CAAkBH,EAAlB,EAAsB,CAAtB;AACH","sourcesContent":["/*\nThis function updates the Piece [] so that the piece moves to its new location. It\nalso handles the case where a piece is taken and when a ROOK is teleported via \nthe castling move.\n*/\n\n\n\nimport { Piece, PieceType, TeamType } from '../constants'\nimport SuperPiece from '../superPiece'\n\nexport let TAKEN_PIECE : Piece | null = null\n\nexport function executeMove (px : number, py : number, x : number, y: number,\n                            possiblePieces : PieceType [], activePlayer : TeamType, boardState : Piece []) {\n    const takenPiece = boardState.find(p => p.x === x && p.y === y && p.SuperPiece.team !== activePlayer)\n    if (takenPiece){\n        TAKEN_PIECE = takenPiece\n        takePiece(takenPiece, boardState)\n    } else {\n        TAKEN_PIECE = null\n    }\n    const currentPiece = boardState.find(p => p.x === px && p.y === py) \n    if (currentPiece){\n        const id = boardState.indexOf(currentPiece)\n        boardState[id] = {SuperPiece : new SuperPiece(possiblePieces, activePlayer), x, y}    \n    }\n}\n\nexport function fakeMove (px : number, py : number, x : number, y: number,\n    possiblePieces : PieceType [], activePlayer : TeamType, boardState : Piece []) {\n    const takenPiece = boardState.find(p => p.x === x && p.y === y && p.SuperPiece.team !== activePlayer)\n    if (takenPiece){\n    takePiece(takenPiece, boardState)\n    } \n    const currentPiece = boardState.find(p => p.x === px && p.y === py) \n    if (currentPiece){\n        const id = boardState.indexOf(currentPiece)\n        boardState[id] = {SuperPiece : new SuperPiece(possiblePieces, activePlayer), x, y}    \n    }\n}\n\n\nfunction takePiece(p : Piece, boardState : Piece []){\n    const id = boardState.indexOf(p)\n    boardState.splice(id, 1)\n}\n"]},"metadata":{},"sourceType":"module"}