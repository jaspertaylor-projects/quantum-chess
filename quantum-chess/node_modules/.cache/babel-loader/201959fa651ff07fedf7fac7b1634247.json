{"ast":null,"code":"import { TAKEN_PIECES_BLACK, TAKEN_PIECES_WHITE } from \"../components/TakePiece/TakePiece\";\nimport { index_converter, PieceType, TeamType } from \"../constants\";\nconst all_pieces = [PieceType.KING, PieceType.QUEEN, PieceType.ROOK, PieceType.BISHOP, PieceType.NIGHT, PieceType.PAWN];\nlet whiteNumPiece = [1, 1, 2, 2, 2, 8];\nlet blackNumPiece = [1, 1, 2, 2, 2, 8];\nlet count = 0;\nexport function change_piece_count(new_piece, team) {\n  const piece_index = index_converter(new_piece);\n\n  if (team === TeamType.WHITE) {\n    whiteNumPiece[piece_index]++;\n    whiteNumPiece[5]--;\n  } else {\n    blackNumPiece[piece_index]++;\n    blackNumPiece[5]--;\n  }\n}\n\nfunction uncollapsed(piece, boardState, team) {\n  let ids = [];\n\n  for (let i = 0; i < boardState.length; i++) {\n    if (boardState[i].SuperPiece.subPieces.length > 1 && boardState[i].SuperPiece.subPieces.includes(piece) && boardState[i].SuperPiece.team === team) {\n      ids.push(i);\n    }\n  }\n\n  return ids;\n}\n\nfunction collapsed(piece, boardState, team) {\n  let ids = [];\n\n  for (let i = 0; i < boardState.length; i++) {\n    if (boardState[i].SuperPiece.equals([...piece]) && boardState[i].SuperPiece.team === team) {\n      ids.push(i);\n    }\n  }\n\n  return ids;\n}\n\nfunction remove(piece, boardState, team, ids) {\n  for (let p = 0; p < piece.length; p++) for (let i = 0; i < boardState.length; i++) {\n    if (!ids.includes(i) && boardState[i].SuperPiece.subPieces.includes(piece[p]) && boardState[i].SuperPiece.team === team) {\n      const id = boardState[i].SuperPiece.subPieces.indexOf(piece[p]);\n      boardState[i].SuperPiece.subPieces.splice(id, 1);\n      count = count + 1;\n    }\n  }\n}\n\nfunction removeAll(piece, boardState, ids) {\n  for (let i = 0; i < ids.length; i++) {\n    boardState[ids[i]].SuperPiece.subPieces = [piece];\n    count = count + 1;\n  }\n}\n\nfunction inductiveCollapse(boardState, team) {\n  const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece;\n  const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK;\n\n  for (let i = 0; i < all_pieces.length; i++) {\n    const ids = uncollapsed(all_pieces[i], boardState, team);\n    const ids2 = collapsed([all_pieces[i]], boardState, team);\n\n    if (ids.length + arr2[i] === arr1[i]) {\n      removeAll(all_pieces[i], boardState, ids);\n    }\n  }\n}\n\nfunction first_level_collapse(boardState, team) {\n  const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece;\n  const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK;\n\n  for (let i = 0; i < all_pieces.length; i++) {\n    const ids = collapsed([all_pieces[i]], boardState, team);\n\n    if (ids.length + arr2[i] === arr1[i]) {\n      remove([all_pieces[i]], boardState, team, ids);\n    }\n  }\n}\n\nfunction second_level_collapse(boardState, team) {\n  const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece;\n  const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK;\n\n  for (let i = 0; i < all_pieces.length; i++) {\n    for (let j = i + 1; j < all_pieces.length; j++) {\n      const piece_combo = [all_pieces[i], all_pieces[j]];\n      const taken_sum = arr2[i] + arr2[j];\n      const ids = collapsed(piece_combo, boardState, team);\n\n      if (ids.length + taken_sum === arr1[i] + arr1[j]) {\n        remove(piece_combo, boardState, team, ids);\n      }\n    }\n  }\n}\n\nfunction third_level_collapse(boardState, team) {\n  const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece;\n  const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK;\n\n  for (let i = 0; i < all_pieces.length; i++) {\n    for (let j = i + 1; j < all_pieces.length; j++) {\n      for (let k = j + 1; k < all_pieces.length; k++) {\n        const piece_combo = [all_pieces[i], all_pieces[j], all_pieces[k]];\n        const taken_sum = arr2[i] + arr2[j] + arr2[k];\n        const ids = collapsed(piece_combo, boardState, team);\n\n        if (ids.length + taken_sum === arr1[i] + arr1[j] + arr1[k]) {\n          remove(piece_combo, boardState, team, ids);\n        }\n      }\n    }\n  }\n}\n\nfunction fourth_level_collapse(boardState, team) {\n  const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece;\n  const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK;\n\n  for (let i = 0; i < all_pieces.length; i++) {\n    for (let j = i + 1; j < all_pieces.length; j++) {\n      for (let k = j + 1; k < all_pieces.length; k++) {\n        for (let l = k + 1; l < all_pieces.length; l++) {\n          const piece_combo = [all_pieces[i], all_pieces[j], all_pieces[k], all_pieces[l]];\n          const taken_sum = arr2[i] + arr2[j] + arr2[k] + arr2[l];\n          const ids = collapsed(piece_combo, boardState, team);\n\n          if (ids.length + taken_sum === arr1[i] + arr1[j] + arr1[k] + arr1[l]) {\n            remove(piece_combo, boardState, team, ids);\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction fifth_level_collapse(boardState, team) {\n  const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece;\n  const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK;\n\n  for (let i = 0; i < all_pieces.length; i++) {\n    for (let j = i + 1; j < all_pieces.length; j++) {\n      for (let k = j + 1; k < all_pieces.length; k++) {\n        for (let l = k + 1; l < all_pieces.length; l++) {\n          for (let m = l + 1; l < all_pieces.length; l++) {\n            const piece_combo = [all_pieces[i], all_pieces[j], all_pieces[k], all_pieces[l], all_pieces[m]];\n            const taken_sum = arr2[i] + arr2[j] + arr2[k] + arr2[l] + arr2[m];\n            const ids = collapsed(piece_combo, boardState, team);\n\n            if (ids.length + taken_sum === arr1[i] + arr1[j] + arr1[k] + arr1[l] + arr1[m]) {\n              remove(piece_combo, boardState, team, ids);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function fullReduction(boardState) {\n  let somethingChanged = true;\n\n  while (somethingChanged === true) {\n    first_level_collapse(boardState, TeamType.WHITE);\n    first_level_collapse(boardState, TeamType.BLACK);\n    second_level_collapse(boardState, TeamType.WHITE);\n    second_level_collapse(boardState, TeamType.BLACK);\n    third_level_collapse(boardState, TeamType.WHITE);\n    third_level_collapse(boardState, TeamType.BLACK);\n    fourth_level_collapse(boardState, TeamType.WHITE);\n    fourth_level_collapse(boardState, TeamType.BLACK);\n    fifth_level_collapse(boardState, TeamType.WHITE);\n    fifth_level_collapse(boardState, TeamType.BLACK);\n    somethingChanged = count !== 0;\n    count = 0;\n  }\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/QuantumChessV2/quantum-chess/src/Referee/stateReducer.ts"],"names":["TAKEN_PIECES_BLACK","TAKEN_PIECES_WHITE","index_converter","PieceType","TeamType","all_pieces","KING","QUEEN","ROOK","BISHOP","NIGHT","PAWN","whiteNumPiece","blackNumPiece","count","change_piece_count","new_piece","team","piece_index","WHITE","uncollapsed","piece","boardState","ids","i","length","SuperPiece","subPieces","includes","push","collapsed","equals","remove","p","id","indexOf","splice","removeAll","inductiveCollapse","arr1","arr2","ids2","first_level_collapse","second_level_collapse","j","piece_combo","taken_sum","third_level_collapse","k","fourth_level_collapse","l","fifth_level_collapse","m","fullReduction","somethingChanged","BLACK"],"mappings":"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","sourcesContent":["\nimport { TAKEN_PIECES_BLACK, TAKEN_PIECES_WHITE } from \"../components/TakePiece/TakePiece\";\nimport { index_converter, Piece, PieceType, TeamType } from \"../constants\";\n\n\nconst all_pieces = [PieceType.KING, PieceType.QUEEN, PieceType.ROOK, PieceType.BISHOP, PieceType.NIGHT, PieceType.PAWN]\n\n\nlet whiteNumPiece : number [] = [1, 1, 2, 2, 2, 8]\nlet blackNumPiece : number [] = [1, 1, 2, 2, 2, 8]\nlet count : number = 0\n\n\nexport function change_piece_count(new_piece : PieceType, team : TeamType){\n    const piece_index = index_converter(new_piece)\n    if (team === TeamType.WHITE){\n        whiteNumPiece[piece_index] ++\n        whiteNumPiece[5] --\n    }\n    else{\n        blackNumPiece[piece_index] ++\n        blackNumPiece[5] --\n    }\n\n\n}\n\n\nfunction uncollapsed(piece : PieceType, boardState : Piece [], team : TeamType) : number [] {\n    let ids : number [] = []\n    for(let i = 0; i < boardState.length; i ++){\n        if (boardState[i].SuperPiece.subPieces.length > 1 &&\n            boardState[i].SuperPiece.subPieces.includes(piece) &&\n            boardState[i].SuperPiece.team === team){\n            ids.push(i)\n        }\n    }\n    return ids\n}\n\nfunction collapsed(piece : PieceType [], boardState : Piece [], team : TeamType) : number [] {\n    let ids : number [] = []\n    for(let i = 0; i < boardState.length; i ++){\n        if ( boardState[i].SuperPiece.equals([...piece]) &&\n            boardState[i].SuperPiece.team === team){\n            ids.push(i)\n        }\n    }\n    return ids\n}\n\nfunction remove(piece : PieceType [], boardState : Piece [], team : TeamType, ids : number []){\n    for (let p = 0; p < piece.length; p++)\n        for(let i = 0; i < boardState.length; i ++){\n            if (!ids.includes(i) && \n                boardState[i].SuperPiece.subPieces.includes(piece[p]) && \n                boardState[i].SuperPiece.team === team){\n                const id = boardState[i].SuperPiece.subPieces.indexOf(piece[p])\n                boardState[i].SuperPiece.subPieces.splice(id, 1)\n                count = count + 1\n            }\n        }\n    }\n\nfunction removeAll(piece : PieceType, boardState : Piece [], ids : number []){\n    for (let i = 0; i < ids.length; i++){\n        boardState[ids[i]].SuperPiece.subPieces = [piece]\n        count = count + 1\n    }\n}\n\n\n\n\nfunction inductiveCollapse(boardState : Piece [], team : TeamType){\n        const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece\n        const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK\n        for (let i =  0; i < all_pieces.length; i++){\n            const ids = uncollapsed(all_pieces[i], boardState, team)\n            const ids2 = collapsed([all_pieces[i]], boardState, team)\n            if (ids.length + arr2[i] === arr1[i]){\n                removeAll(all_pieces[i], boardState, ids)               \n            }\n        }\n    }\n\nfunction first_level_collapse(boardState : Piece [], team : TeamType) {\n    const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece\n    const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK\n    for (let i =  0; i < all_pieces.length; i++){\n        const ids = collapsed([all_pieces[i]], boardState, team)\n        if (ids.length + arr2[i] === arr1[i]){\n            remove([all_pieces[i]], boardState, team, ids)               \n        }\n    }\n}\n\nfunction second_level_collapse(boardState : Piece [], team : TeamType) {\n    const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece\n    const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK\n    for (let i =  0; i < all_pieces.length; i++){\n        for(let j = i + 1; j < all_pieces.length; j ++){\n            const piece_combo = [all_pieces[i], all_pieces[j]]\n            const taken_sum =  arr2[i] + arr2[j]\n            const ids = collapsed(piece_combo, boardState, team)\n            if (ids.length + taken_sum === arr1[i] + arr1[j]){\n                remove(piece_combo, boardState, team, ids)               \n            }\n        }\n    }\n}\n\n\nfunction third_level_collapse(boardState : Piece [], team : TeamType) {\n    const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece\n    const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK\n    for (let i =  0; i < all_pieces.length; i++){\n        for(let j = i + 1; j < all_pieces.length; j ++){\n            for(let k = j + 1; k < all_pieces.length; k ++){\n                const piece_combo = [all_pieces[i], all_pieces[j], all_pieces[k]]\n                const taken_sum =  arr2[i] + arr2[j] + arr2[k] \n                const ids = collapsed(piece_combo, boardState, team)\n                if (ids.length + taken_sum === arr1[i] + arr1[j] + arr1[k]){\n                    remove(piece_combo, boardState, team, ids)               \n                }\n            }\n        }\n    }\n}\n\n\n\n\nfunction fourth_level_collapse(boardState : Piece [], team : TeamType) {\n    const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece\n    const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK\n    for (let i =  0; i < all_pieces.length; i++){\n        for(let j = i + 1; j < all_pieces.length; j ++){\n            for(let k = j + 1; k < all_pieces.length; k ++){\n                for(let l = k + 1; l < all_pieces.length; l ++){\n                    const piece_combo = [all_pieces[i], all_pieces[j], all_pieces[k], all_pieces[l]]\n                    const taken_sum =  arr2[i] + arr2[j] + arr2[k] + arr2[l]\n                    const ids = collapsed(piece_combo, boardState, team)\n                    if (ids.length + taken_sum === arr1[i] + arr1[j] + arr1[k] + arr1[l]){\n                        remove(piece_combo, boardState, team, ids)               \n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction fifth_level_collapse(boardState : Piece [], team : TeamType) {\n    const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece\n    const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK\n    for (let i =  0; i < all_pieces.length; i++){\n        for(let j = i + 1; j < all_pieces.length; j ++){\n            for(let k = j + 1; k < all_pieces.length; k ++){\n                for(let l = k + 1; l < all_pieces.length; l ++){\n                    for(let m = l + 1; l < all_pieces.length; l ++){\n                        const piece_combo = [all_pieces[i], all_pieces[j], all_pieces[k], all_pieces[l], all_pieces[m]]\n                        const taken_sum =  arr2[i] + arr2[j] + arr2[k] + arr2[l] + arr2[m]\n                        const ids = collapsed(piece_combo, boardState, team)\n                        if (ids.length + taken_sum === arr1[i] + arr1[j] + arr1[k] + arr1[l] + arr1[m]){\n                            remove(piece_combo, boardState, team, ids)               \n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n\n\nexport function fullReduction(boardState : Piece []){\n    let somethingChanged = true\n    while (somethingChanged === true){\n        first_level_collapse(boardState, TeamType.WHITE)\n        first_level_collapse(boardState, TeamType.BLACK)\n        second_level_collapse(boardState, TeamType.WHITE)\n        second_level_collapse(boardState, TeamType.BLACK)\n        third_level_collapse(boardState, TeamType.WHITE)\n        third_level_collapse(boardState, TeamType.BLACK)\n        fourth_level_collapse(boardState, TeamType.WHITE)\n        fourth_level_collapse(boardState, TeamType.BLACK)\n        fifth_level_collapse(boardState, TeamType.WHITE)\n        fifth_level_collapse(boardState, TeamType.BLACK)\n        somethingChanged = count !== 0\n        count = 0\n    }\n}"]},"metadata":{},"sourceType":"module"}