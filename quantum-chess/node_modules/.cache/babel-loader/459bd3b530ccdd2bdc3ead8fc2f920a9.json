{"ast":null,"code":"/*\nThis class does a lot of the heavy lifting for the chess game.  Currently \nthe isValidMove also makes the move by changing the Piece [] as it checks for \nthe moves validity.  This is because once the move has been made it must use \nthe new board state to see if the move has put its own king in check which would \nactually make the move invalid.  So, if the move returns as invalid, the board \nstate must be reset. \n*/\nimport { PieceType, TeamType, AXIS } from \"../constants\";\nimport { isPawnNormalMove, isPawnStartingMove } from \"./pawnLogic\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove } from \"./pieceLogic\";\nimport { CLICKED1 } from '../components/Promotion/promotion';\nimport { CLICKED2 } from \"../components/TakenPiece/TakenPiece\";\nexport default class Referee {\n  // promote(px: number, py: number, x : number, y: number, boardState : Piece []){\n  //     const piece = boardState.find(p => p.x === px && p.y === py)\n  //     if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.WHITE && y === 7){\n  //         piece.promoted = true\n  //     }   \n  //     else if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.BLACK && y === 0){\n  //         piece.promoted = true\n  //     } else if (piece){\n  //         piece.promoted = false\n  //     }\n  // } \n  getPossiblePieces(px, py, x, y, piece, boardState, activePlayer) {\n    const possiblePieces = [];\n    const CLICKED = CLICKED1 && CLICKED2;\n\n    if (!CLICKED) {\n      return possiblePieces;\n    } // Only the active player can move\n\n\n    if (piece.team !== activePlayer) {\n      return possiblePieces;\n    } // A non-move is not a move\n\n\n    if (px === x && py === y) {\n      return possiblePieces;\n    } // A move off the board is not a move\n\n\n    if (!(AXIS.includes(px) && AXIS.includes(py) && AXIS.includes(x) && AXIS.includes(y))) {\n      return possiblePieces;\n    }\n\n    var valid = {\n      value: false\n    };\n    const dx = x - px;\n    const dy = y - py;\n    const team = piece.team ? piece.team : TeamType.WHITE;\n    piece.subPieces.forEach(p => {\n      switch (p) {\n        case PieceType.PAWN:\n          {\n            if (isPawnStartingMove(px, py, x, y, team, boardState)) {\n              possiblePieces.push(PieceType.PAWN);\n            }\n\n            if (isPawnNormalMove(px, py, x, y, team, boardState)) {\n              if (!possiblePieces.includes(PieceType.PAWN)) {\n                possiblePieces.push(PieceType.PAWN);\n              }\n            }\n\n            break;\n          }\n\n        case PieceType.NIGHT:\n          {\n            if (isLegalNightMove(px, py, dx, dy, boardState)) {\n              possiblePieces.push(PieceType.NIGHT);\n            }\n\n            break;\n          }\n\n        case PieceType.BISHOP:\n          {\n            if (isLegalBishopMove(px, py, dx, dy, boardState)) {\n              possiblePieces.push(PieceType.BISHOP);\n            }\n\n            break;\n          }\n\n        case PieceType.ROOK:\n          {\n            if (isLegalRookMove(px, py, dx, dy, boardState)) {\n              possiblePieces.push(PieceType.ROOK);\n            }\n\n            break;\n          }\n\n        case PieceType.QUEEN:\n          {\n            if (isLegalQueenMove(px, py, dx, dy, boardState)) {\n              possiblePieces.push(PieceType.QUEEN);\n            }\n\n            break;\n          }\n\n        case PieceType.KING:\n          {\n            if (isLegalKingMove(px, py, dx, dy, boardState)) {\n              possiblePieces.push(PieceType.KING);\n            }\n\n            break;\n          }\n      }\n    });\n    return possiblePieces;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/QuantumChess/quantum-chess/src/Referee/referee.ts"],"names":["PieceType","TeamType","AXIS","isPawnNormalMove","isPawnStartingMove","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","CLICKED1","CLICKED2","Referee","getPossiblePieces","px","py","x","y","piece","boardState","activePlayer","possiblePieces","CLICKED","team","includes","valid","value","dx","dy","WHITE","subPieces","forEach","p","PAWN","push","NIGHT","BISHOP","ROOK","QUEEN","KING"],"mappings":"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","sourcesContent":["/*\nThis class does a lot of the heavy lifting for the chess game.  Currently \nthe isValidMove also makes the move by changing the Piece [] as it checks for \nthe moves validity.  This is because once the move has been made it must use \nthe new board state to see if the move has put its own king in check which would \nactually make the move invalid.  So, if the move returns as invalid, the board \nstate must be reset. \n*/\n\n\nimport { PieceType, TeamType, Piece, AXIS } from \"../constants\"\nimport { isPawnNormalMove, isPawnStartingMove, isFriendlyPiece } from \"./pawnLogic\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove} from \"./pieceLogic\"\nimport Checker from './checker'\nimport {CLICKED1} from '../components/Promotion/promotion'\nimport { executeMove } from \"./executeMove\"\nimport SuperPiece from \"../superPiece\"\nimport { CLICKED2 } from \"../components/TakenPiece/TakenPiece\"\n\nexport default class Referee{\n    \n\n\n    // promote(px: number, py: number, x : number, y: number, boardState : Piece []){\n    //     const piece = boardState.find(p => p.x === px && p.y === py)\n    //     if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.WHITE && y === 7){\n    //         piece.promoted = true\n    //     }   \n    //     else if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.BLACK && y === 0){\n    //         piece.promoted = true\n    //     } else if (piece){\n    //         piece.promoted = false\n    //     }\n    // } \n\n    getPossiblePieces(px : number, py : number, x : number, y : number, piece : SuperPiece, \n                boardState : Piece [],  activePlayer : TeamType) : PieceType [] {\n        const possiblePieces : PieceType [] = []; \n        const CLICKED = CLICKED1 && CLICKED2\n        if (!CLICKED){\n            return possiblePieces\n        }  \n        // Only the active player can move\n        if (piece.team !== activePlayer){\n            return possiblePieces\n        }\n        // A non-move is not a move\n        if (px === x && py === y){\n            return possiblePieces\n        }\n        // A move off the board is not a move\n        if (!(AXIS.includes(px) &&  AXIS.includes(py) &&  AXIS.includes(x) && AXIS.includes(y))){\n            return possiblePieces\n        }\n        var valid = { value: false }\n        const dx = x - px\n        const dy = y - py\n        const team = piece.team ? piece.team : TeamType.WHITE\n        piece.subPieces.forEach(p =>  {\n            switch(p){\n                case PieceType.PAWN : {\n                    if (isPawnStartingMove(px, py, x, y, team, boardState)){\n                        possiblePieces.push(PieceType.PAWN)\n                    }\n                    if (isPawnNormalMove(px, py, x, y, team, boardState)){\n                        if (!possiblePieces.includes(PieceType.PAWN)){\n                            possiblePieces.push(PieceType.PAWN)\n                        }\n                    }\n                    break;\n                }\n                case PieceType.NIGHT : {\n                    if (isLegalNightMove(px, py, dx, dy, boardState)){\n                        possiblePieces.push(PieceType.NIGHT)\n                    }\n                    break;\n                }\n                case PieceType.BISHOP : {\n                    if (isLegalBishopMove(px, py, dx, dy, boardState)){\n                        possiblePieces.push(PieceType.BISHOP)\n                    }\n                    break;\n                }\n                case PieceType.ROOK : {\n                    if (isLegalRookMove(px, py, dx, dy, boardState)){\n                        possiblePieces.push(PieceType.ROOK)\n                    }\n                    break;\n                }\n                case PieceType.QUEEN : {\n                    if (isLegalQueenMove(px, py, dx, dy, boardState)){\n                        possiblePieces.push(PieceType.QUEEN)\n                    }\n                    break;\n                }\n                case PieceType.KING : {\n                    if (isLegalKingMove(px, py, dx, dy, boardState)){\n                        possiblePieces.push(PieceType.KING)\n                    }\n                    break;\n                }\n\n            }\n        })\n    return possiblePieces\n    }\n}"]},"metadata":{},"sourceType":"module"}