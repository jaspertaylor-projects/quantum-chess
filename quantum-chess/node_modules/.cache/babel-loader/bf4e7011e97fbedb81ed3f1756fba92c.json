{"ast":null,"code":"var _jsxFileName = \"/home/jaybird/Coding Projects/Chess/chess/src/components/Chessboard/chessboard.tsx\",\n    _s = $RefreshSig$();\n\n/*\nThis is the chess board react based function.  It is the only element in our App.tsx and\nit is responsible for keeping the Piece [] in sync with the displayed tiles of the \nchess board.  The boards state updates via React hooks which are all declared at \nthe top of the function. \n*/\nimport React, { useRef, useState } from 'react';\nimport Tile from '../Tile/tile';\nimport './chessboard.css';\nimport Referee from '../../Referee/referee';\nimport { AXIS, GRID_SIZE, TeamType, initializeBoardState } from '../../constants';\nimport Checker from '../../Referee/checker';\nimport { CLICKED } from '../Promotion/promotion';\nimport { promotePieces } from '../../Referee/pawnLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard() {\n  _s();\n\n  const [activePiece, setActivePiece] = useState(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const [pieces, setPieces] = useState(initializeBoardState());\n  const [activePlayer, setActivePlayer] = useState(TeamType.WHITE);\n  const [winner, setWinner] = useState('');\n  const [[checkMate, message], setCheckMate] = useState([false, '']);\n  const chessboardRef = useRef(null);\n  const referee = new Referee();\n  let board = []; // Returns the board state to the original board state\n\n  function newGame() {\n    setPieces(initializeBoardState());\n    setActivePlayer(TeamType.WHITE);\n    setCheckMate([false, ' ']);\n  } // Used To make a copy of the piece array.  This is useful to pass while \n  // cheking for check mate so the actual board state does not get changed \n  // in the process\n\n\n  function deepCopy() {\n    const oldBoardState = [];\n    pieces.forEach(p => oldBoardState.push({\n      image: p.image,\n      x: p.x,\n      y: p.y,\n      team: p.team,\n      type: p.type,\n      enPassantable: p.enPassantable,\n      canCastle: p.canCastle,\n      promoted: p.promoted\n    }));\n    return oldBoardState;\n  } // Switches the game state from WHITE to BLACK and vice versa\n\n\n  function switchPlayer() {\n    const nextPlayer = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    setActivePlayer(nextPlayer);\n  } // Returns the active piece to its original location.\n\n\n  function revert(boardState) {\n    if (activePiece) {\n      activePiece.style.position = 'relative';\n      activePiece.style.removeProperty('left');\n      activePiece.style.removeProperty('top');\n      setPieces(boardState);\n    }\n  } // Tries to look for 'chess-piece' in the HTML of the clicked area \n  // to see if a player is trying to grab a piece\n\n\n  function grabPiece(e) {\n    const chessboard = chessboardRef.current;\n    const element = e.target;\n\n    if (element.classList.contains('chess-piece') && chessboard) {\n      setGridX(Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE));\n      setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE) / GRID_SIZE)));\n      const x = e.clientX - GRID_SIZE / 2;\n      const y = e.clientY - GRID_SIZE / 2;\n      element.style.position = 'absolute';\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  } // Places the center of the active piece beneath the cursor\n\n\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n\n    if (activePiece && chessboard) {\n      const x = e.clientX - GRID_SIZE / 2;\n      const y = e.clientY - GRID_SIZE / 2;\n      activePiece.style.position = 'absolute';\n      activePiece.style.left = `${x}px`;\n      activePiece.style.top = `${y}px`;\n    }\n  }\n  /* When the active piece is released we check to see if there was a piece promotion \n  using the variable CLICKED, then we check to see if the move made was a legal chess \n  move, this logic is done by files in the referee subdirectory. And finally we check \n  to see if the move that was made resulted in chekmate or stalemate. \n  */\n\n\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n\n    if (activePiece && chessboard) {\n      if (CLICKED) {\n        promotePieces(pieces);\n      }\n\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE) / GRID_SIZE));\n      const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY);\n\n      if (currentPiece) {\n        const oldBoardState = deepCopy();\n        const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces, activePlayer);\n\n        if (validMove) {\n          switchPlayer();\n          setPieces(pieces);\n        } else {\n          revert(oldBoardState);\n        }\n\n        const boardState = deepCopy();\n        const boardState2 = deepCopy();\n        const checker = new Checker(boardState2);\n        const oppponent = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n        const checkMate = checker.isCheckMate(activePlayer, boardState);\n\n        if (checkMate) {\n          if (checker.isMyKingInCheck(oppponent, boardState, 0)) {\n            const winner = activePlayer === TeamType.WHITE ? 'White Wins' : 'Black Wins';\n            setWinner(winner);\n            setCheckMate([true, 'Check Mate']);\n          } else {\n            setWinner('Players Draw');\n            setCheckMate([true, 'Stale Mate']);\n          }\n        }\n      }\n    }\n\n    setActivePiece(null);\n  } // This code places 64 squares on the chessboard and for each square will look to see if their is \n  // a piece to place the image on. The HTML for the tiles is in the Tile subdirectory\n\n\n  for (let j = AXIS.length - 1; j >= 0; j--) {\n    for (let i = 0; i < AXIS.length; i++) {\n      const number = i + j;\n      const piece = pieces.find(p => p.x === i && p.y === j);\n      let image = piece ? piece.image : undefined;\n      const promotedPiece = pieces.find(p => p.promoted === true);\n      const team = promotedPiece && promotedPiece.y === 7 ? TeamType.WHITE : TeamType.BLACK;\n\n      if (promotedPiece && promotedPiece.x === i && promotedPiece.y === j) {\n        board.push( /*#__PURE__*/_jsxDEV(Tile, {\n          image: image,\n          number: number,\n          team: team,\n          isPromotion: true\n        }, `${i}, ${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 28\n        }, this));\n      } else {\n        board.push( /*#__PURE__*/_jsxDEV(Tile, {\n          image: image,\n          number: number,\n          team: team,\n          isPromotion: false\n        }, `${i}, ${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 28\n        }, this));\n      }\n    }\n  } // Continues the game if it is not over otherwise displays the game result and prompts the user to play again\n\n\n  if (!checkMate) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chessboardRef,\n      onMouseUp: e => dropPiece(e),\n      onMouseMove: e => movePiece(e),\n      onMouseDown: e => grabPiece(e),\n      className: \"chessboard\",\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chessboardRef,\n        className: \"chessboard grayed-out\",\n        children: board\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"check\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mate\",\n          children: [\" \", message, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 41\n          }, this), \" \", winner, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"newgame\",\n        onClick: newGame,\n        children: \" Play Again \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 12\n    }, this);\n  }\n}\n\n_s(Chessboard, \"1BTW72ZQ+ODjnAybwXOI7vYabGQ=\");\n\n_c = Chessboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess/chess/src/components/Chessboard/chessboard.tsx"],"names":["React","useRef","useState","Tile","Referee","AXIS","GRID_SIZE","TeamType","initializeBoardState","Checker","CLICKED","promotePieces","Chessboard","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","pieces","setPieces","activePlayer","setActivePlayer","WHITE","winner","setWinner","checkMate","message","setCheckMate","chessboardRef","referee","board","newGame","deepCopy","oldBoardState","forEach","p","push","image","x","y","team","type","enPassantable","canCastle","promoted","switchPlayer","nextPlayer","BLACK","revert","boardState","style","position","removeProperty","grabPiece","e","chessboard","current","element","target","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","left","top","movePiece","dropPiece","currentPiece","find","validMove","isValidMove","boardState2","checker","oppponent","isCheckMate","isMyKingInCheck","j","length","i","number","piece","undefined","promotedPiece"],"mappings":";;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,QAAvB,QAAwC,OAAxC;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAO,kBAAP;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAAQC,IAAR,EAAcC,SAAd,EAAgCC,QAAhC,EAA0CC,oBAA1C,QAAqE,iBAArE;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAAQC,OAAR,QAAsB,wBAAtB;AACA,SAAQC,aAAR,QAA4B,yBAA5B;;AAEA,eAAe,SAASC,UAAT,GAAqB;AAAA;;AAChC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAqB,IAArB,CAA9C;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACiB,MAAD,EAASC,SAAT,IAAuBlB,QAAQ,CAAUM,oBAAoB,EAA9B,CAArC;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCpB,QAAQ,CAAWK,QAAQ,CAACgB,KAApB,CAAhD;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAuBvB,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM,CAAC,CAACwB,SAAD,EAAYC,OAAZ,CAAD,EAAuBC,YAAvB,IAAuC1B,QAAQ,CAAC,CAAC,KAAD,EAAQ,EAAR,CAAD,CAArD;AACA,QAAM2B,aAAa,GAAG5B,MAAM,CAAiB,IAAjB,CAA5B;AACA,QAAM6B,OAAO,GAAG,IAAI1B,OAAJ,EAAhB;AACA,MAAI2B,KAAK,GAAG,EAAZ,CAVgC,CAYhC;;AACA,WAASC,OAAT,GAAkB;AACdZ,IAAAA,SAAS,CAACZ,oBAAoB,EAArB,CAAT;AACAc,IAAAA,eAAe,CAACf,QAAQ,CAACgB,KAAV,CAAf;AACAK,IAAAA,YAAY,CAAC,CAAC,KAAD,EAAQ,GAAR,CAAD,CAAZ;AACH,GAjB+B,CAmBhC;AACA;AACA;;;AACA,WAASK,QAAT,GAAoB;AAChB,UAAMC,aAAuB,GAAG,EAAhC;AACAf,IAAAA,MAAM,CAACgB,OAAP,CAAeC,CAAC,IAAIF,aAAa,CAACG,IAAd,CAAmB;AAACC,MAAAA,KAAK,EAAGF,CAAC,CAACE,KAAX;AAAkBC,MAAAA,CAAC,EAAGH,CAAC,CAACG,CAAxB;AAA4BC,MAAAA,CAAC,EAAGJ,CAAC,CAACI,CAAlC;AACCC,MAAAA,IAAI,EAAGL,CAAC,CAACK,IADV;AACgBC,MAAAA,IAAI,EAAGN,CAAC,CAACM,IADzB;AAECC,MAAAA,aAAa,EAAGP,CAAC,CAACO,aAFnB;AAGCC,MAAAA,SAAS,EAAER,CAAC,CAACQ,SAHd;AAICC,MAAAA,QAAQ,EAAET,CAAC,CAACS;AAJb,KAAnB,CAApB;AAKA,WAAOX,aAAP;AACH,GA9B+B,CAgChC;;;AACA,WAASY,YAAT,GAAuB;AACnB,UAAMC,UAAU,GAAG1B,YAAY,KAAKd,QAAQ,CAACgB,KAA1B,GAAkChB,QAAQ,CAACyC,KAA3C,GAAmDzC,QAAQ,CAACgB,KAA/E;AACAD,IAAAA,eAAe,CAACyB,UAAD,CAAf;AACH,GApC+B,CAsChC;;;AACA,WAASE,MAAT,CAAgBC,UAAhB,EAAsC;AAClC,QAAIrC,WAAJ,EAAgB;AACZA,MAAAA,WAAW,CAACsC,KAAZ,CAAkBC,QAAlB,GAA6B,UAA7B;AACAvC,MAAAA,WAAW,CAACsC,KAAZ,CAAkBE,cAAlB,CAAiC,MAAjC;AACAxC,MAAAA,WAAW,CAACsC,KAAZ,CAAkBE,cAAlB,CAAiC,KAAjC;AACAjC,MAAAA,SAAS,CAAC8B,UAAD,CAAT;AACH;AACJ,GA9C+B,CAgDhC;AACA;;;AACA,WAASI,SAAT,CAAmBC,CAAnB,EAAuC;AACnC,UAAMC,UAAU,GAAG3B,aAAa,CAAC4B,OAAjC;AACA,UAAMC,OAAO,GAAGH,CAAC,CAACI,MAAlB;;AACA,QAAID,OAAO,CAACE,SAAR,CAAkBC,QAAlB,CAA2B,aAA3B,KAA6CL,UAAjD,EAA4D;AACxDxC,MAAAA,QAAQ,CAAC8C,IAAI,CAACC,KAAL,CAAW,CAACR,CAAC,CAACS,OAAF,GAAYR,UAAU,CAACS,UAAxB,IAAoC3D,SAA/C,CAAD,CAAR;AACAY,MAAAA,QAAQ,CAAC4C,IAAI,CAACI,GAAL,CAASJ,IAAI,CAACK,IAAL,CAAU,CAACZ,CAAC,CAACa,OAAF,GAAYZ,UAAU,CAACa,SAAvB,GAAmC,IAAI/D,SAAxC,IAAmDA,SAA7D,CAAT,CAAD,CAAR;AACA,YAAMiC,CAAC,GAAGgB,CAAC,CAACS,OAAF,GAAY1D,SAAS,GAAC,CAAhC;AACA,YAAMkC,CAAC,GAAGe,CAAC,CAACa,OAAF,GAAY9D,SAAS,GAAC,CAAhC;AACAoD,MAAAA,OAAO,CAACP,KAAR,CAAcC,QAAd,GAAyB,UAAzB;AACAM,MAAAA,OAAO,CAACP,KAAR,CAAcmB,IAAd,GAAsB,GAAE/B,CAAE,IAA1B;AACAmB,MAAAA,OAAO,CAACP,KAAR,CAAcoB,GAAd,GAAqB,GAAE/B,CAAE,IAAzB;AACA1B,MAAAA,cAAc,CAAC4C,OAAD,CAAd;AACH;AAEJ,GAhE+B,CAiEhC;;;AACA,WAASc,SAAT,CAAmBjB,CAAnB,EAAuC;AACnC,UAAMC,UAAU,GAAG3B,aAAa,CAAC4B,OAAjC;;AACA,QAAI5C,WAAW,IAAI2C,UAAnB,EAA8B;AAC1B,YAAMjB,CAAC,GAAGgB,CAAC,CAACS,OAAF,GAAY1D,SAAS,GAAC,CAAhC;AACA,YAAMkC,CAAC,GAAGe,CAAC,CAACa,OAAF,GAAY9D,SAAS,GAAC,CAAhC;AACAO,MAAAA,WAAW,CAACsC,KAAZ,CAAkBC,QAAlB,GAA6B,UAA7B;AACAvC,MAAAA,WAAW,CAACsC,KAAZ,CAAkBmB,IAAlB,GAA0B,GAAE/B,CAAE,IAA9B;AACA1B,MAAAA,WAAW,CAACsC,KAAZ,CAAkBoB,GAAlB,GAAyB,GAAE/B,CAAE,IAA7B;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;AAEI,WAASiC,SAAT,CAAmBlB,CAAnB,EAAuC;AACnC,UAAMC,UAAU,GAAG3B,aAAa,CAAC4B,OAAjC;;AACA,QAAI5C,WAAW,IAAI2C,UAAnB,EAA8B;AAC1B,UAAI9C,OAAJ,EAAY;AACRC,QAAAA,aAAa,CAACQ,MAAD,CAAb;AACH;;AACD,YAAMoB,CAAC,GAAGuB,IAAI,CAACC,KAAL,CAAW,CAACR,CAAC,CAACS,OAAF,GAAYR,UAAU,CAACS,UAAxB,IAAoC3D,SAA/C,CAAV;AACA,YAAMkC,CAAC,GAAGsB,IAAI,CAACI,GAAL,CAASJ,IAAI,CAACK,IAAL,CAAU,CAACZ,CAAC,CAACa,OAAF,GAAYZ,UAAU,CAACa,SAAvB,GAAmC,IAAI/D,SAAxC,IAAmDA,SAA7D,CAAT,CAAV;AACA,YAAMoE,YAAY,GAAGvD,MAAM,CAACwD,IAAP,CAAYvC,CAAC,IAAIA,CAAC,CAACG,CAAF,KAAQxB,KAAR,IAAiBqB,CAAC,CAACI,CAAF,KAAQvB,KAA1C,CAArB;;AACA,UAAIyD,YAAJ,EAAiB;AACb,cAAMxC,aAAa,GAAGD,QAAQ,EAA9B;AACA,cAAM2C,SAAS,GAAG9C,OAAO,CAAC+C,WAAR,CAAoB9D,KAApB,EAA2BE,KAA3B,EAAkCsB,CAAlC,EAAqCC,CAArC,EAAwCkC,YAAY,CAAChC,IAArD,EAA2DgC,YAAY,CAACjC,IAAxE,EAA8EtB,MAA9E,EAAsFE,YAAtF,CAAlB;;AACA,YAAIuD,SAAJ,EAAc;AACV9B,UAAAA,YAAY;AACZ1B,UAAAA,SAAS,CAACD,MAAD,CAAT;AACH,SAHD,MAGO;AACH8B,UAAAA,MAAM,CAACf,aAAD,CAAN;AACH;;AACL,cAAMgB,UAAU,GAAGjB,QAAQ,EAA3B;AACA,cAAM6C,WAAW,GAAG7C,QAAQ,EAA5B;AACA,cAAM8C,OAAO,GAAG,IAAItE,OAAJ,CAAYqE,WAAZ,CAAhB;AACA,cAAME,SAAS,GAAG3D,YAAY,KAAKd,QAAQ,CAACgB,KAA1B,GAAkChB,QAAQ,CAACyC,KAA3C,GAAmDzC,QAAQ,CAACgB,KAA9E;AACA,cAAMG,SAAS,GAAGqD,OAAO,CAACE,WAAR,CAAoB5D,YAApB,EAAkC6B,UAAlC,CAAlB;;AACA,YAAIxB,SAAJ,EAAc;AACV,cAAGqD,OAAO,CAACG,eAAR,CAAwBF,SAAxB,EAAmC9B,UAAnC,EAA+C,CAA/C,CAAH,EAAqD;AACjD,kBAAM1B,MAAM,GAAGH,YAAY,KAAKd,QAAQ,CAACgB,KAA1B,GAAkC,YAAlC,GAAiD,YAAhE;AACAE,YAAAA,SAAS,CAACD,MAAD,CAAT;AACAI,YAAAA,YAAY,CAAC,CAAC,IAAD,EAAO,YAAP,CAAD,CAAZ;AACH,WAJD,MAIO;AACHH,YAAAA,SAAS,CAAC,cAAD,CAAT;AACAG,YAAAA,YAAY,CAAC,CAAC,IAAD,EAAO,YAAP,CAAD,CAAZ;AACH;AAEJ;AACA;AACJ;;AACDd,IAAAA,cAAc,CAAC,IAAD,CAAd;AACH,GAxH+B,CA2HhC;AACA;;;AACA,OAAK,IAAIqE,CAAC,GAAG9E,IAAI,CAAC+E,MAAL,GAAc,CAA3B,EAA8BD,CAAC,IAAI,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACvC,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhF,IAAI,CAAC+E,MAAzB,EAAiCC,CAAC,EAAlC,EAAuC;AACnC,YAAMC,MAAM,GAAGD,CAAC,GAAGF,CAAnB;AACA,YAAMI,KAAK,GAAGpE,MAAM,CAACwD,IAAP,CAAYvC,CAAC,IAAIA,CAAC,CAACG,CAAF,KAAQ8C,CAAR,IAAajD,CAAC,CAACI,CAAF,KAAQ2C,CAAtC,CAAd;AACA,UAAI7C,KAAK,GAAGiD,KAAK,GAAGA,KAAK,CAACjD,KAAT,GAAiBkD,SAAlC;AACA,YAAMC,aAAa,GAAGtE,MAAM,CAACwD,IAAP,CAAYvC,CAAC,IAAIA,CAAC,CAACS,QAAF,KAAe,IAAhC,CAAtB;AACA,YAAMJ,IAAI,GAAGgD,aAAa,IAAIA,aAAa,CAACjD,CAAd,KAAoB,CAArC,GAAyCjC,QAAQ,CAACgB,KAAlD,GAA0DhB,QAAQ,CAACyC,KAAhF;;AACA,UAAIyC,aAAa,IAAIA,aAAa,CAAClD,CAAd,KAAoB8C,CAArC,IAA0CI,aAAa,CAACjD,CAAd,KAAoB2C,CAAlE,EAAoE;AAChEpD,QAAAA,KAAK,CAACM,IAAN,eAAW,QAAC,IAAD;AAA2B,UAAA,KAAK,EAAIC,KAApC;AAA2C,UAAA,MAAM,EAAIgD,MAArD;AAA6D,UAAA,IAAI,EAAI7C,IAArE;AAA2E,UAAA,WAAW,EAAI;AAA1F,WAAc,GAAE4C,CAAE,KAAIF,CAAE,EAAxB;AAAA;AAAA;AAAA;AAAA,gBAAX;AACH,OAFD,MAEO;AACHpD,QAAAA,KAAK,CAACM,IAAN,eAAW,QAAC,IAAD;AAA2B,UAAA,KAAK,EAAIC,KAApC;AAA2C,UAAA,MAAM,EAAIgD,MAArD;AAA6D,UAAA,IAAI,EAAI7C,IAArE;AAA2E,UAAA,WAAW,EAAI;AAA1F,WAAc,GAAE4C,CAAE,KAAIF,CAAE,EAAxB;AAAA;AAAA;AAAA;AAAA,gBAAX;AACH;AACJ;AACJ,GA1I+B,CA4IhC;;;AACA,MAAI,CAACzD,SAAL,EAAe;AACf,wBAAO;AACP,MAAA,GAAG,EAAIG,aADA;AAEP,MAAA,SAAS,EAAI0B,CAAC,IAAIkB,SAAS,CAAClB,CAAD,CAFpB;AAGP,MAAA,WAAW,EAAIA,CAAC,IAAIiB,SAAS,CAACjB,CAAD,CAHtB;AAIP,MAAA,WAAW,EAAIA,CAAC,IAAID,SAAS,CAACC,CAAD,CAJtB;AAKP,MAAA,SAAS,EAAG,YALL;AAAA,gBAKmBxB;AALnB;AAAA;AAAA;AAAA;AAAA,YAAP;AAOC,GARD,MAQO;AACP,wBAAO;AAAA,8BAAK;AACZ,QAAA,GAAG,EAAIF,aADK;AAEZ,QAAA,SAAS,EAAG,uBAFA;AAAA,kBAE0BE;AAF1B;AAAA;AAAA;AAAA;AAAA,cAAL,eAGD;AAAK,QAAA,SAAS,EAAG,OAAjB;AAAA,+BACN;AAAK,UAAA,SAAS,EAAG,MAAjB;AAAA,0BAA2BJ,OAA3B,oBAAoC;AAAA;AAAA;AAAA;AAAA,kBAApC,OAA+CH,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AADM;AAAA;AAAA;AAAA;AAAA,cAHC,eAMP;AAAQ,QAAA,SAAS,EAAG,SAApB;AAA8B,QAAA,OAAO,EAAIQ,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANO;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAQC;AACJ;;GA/JuBpB,U;;KAAAA,U","sourcesContent":["\n/*\nThis is the chess board react based function.  It is the only element in our App.tsx and\nit is responsible for keeping the Piece [] in sync with the displayed tiles of the \nchess board.  The boards state updates via React hooks which are all declared at \nthe top of the function. \n*/\n\nimport React, {useRef, useState, } from 'react';\nimport Tile from '../Tile/tile';\nimport './chessboard.css';\nimport Referee from '../../Referee/referee'\nimport {AXIS, GRID_SIZE, Piece, TeamType, initializeBoardState} from '../../constants'\nimport Checker from '../../Referee/checker'\nimport {CLICKED} from '../Promotion/promotion';\nimport {promotePieces} from '../../Referee/pawnLogic'\n\nexport default function Chessboard(){\n    const [activePiece, setActivePiece] = useState<HTMLElement | null>(null) \n    const [gridX, setGridX] = useState(0);\n    const [gridY, setGridY] = useState(0);\n    const [pieces, setPieces]  = useState<Piece[]>(initializeBoardState());\n    const [activePlayer, setActivePlayer] = useState<TeamType>(TeamType.WHITE);\n    const [winner, setWinner]  = useState('');\n    const [[checkMate, message], setCheckMate] = useState([false, '']);\n    const chessboardRef = useRef<HTMLDivElement>(null);\n    const referee = new Referee();\n    let board = [];\n    \n    // Returns the board state to the original board state\n    function newGame(){\n        setPieces(initializeBoardState())\n        setActivePlayer(TeamType.WHITE)\n        setCheckMate([false, ' '])\n    }\n\n    // Used To make a copy of the piece array.  This is useful to pass while \n    // cheking for check mate so the actual board state does not get changed \n    // in the process\n    function deepCopy() {\n        const oldBoardState : Piece[] = [];\n        pieces.forEach(p => oldBoardState.push({image : p.image, x : p.x,  y : p.y,\n                                                team : p.team, type : p.type, \n                                                enPassantable : p.enPassantable,\n                                                canCastle: p.canCastle,\n                                                promoted: p.promoted}))\n        return oldBoardState\n    }\n\n    // Switches the game state from WHITE to BLACK and vice versa\n    function switchPlayer(){\n        const nextPlayer = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        setActivePlayer(nextPlayer) \n    }\n\n    // Returns the active piece to its original location.\n    function revert(boardState : Piece []){\n        if (activePiece){\n            activePiece.style.position = 'relative';\n            activePiece.style.removeProperty('left');\n            activePiece.style.removeProperty('top');\n            setPieces(boardState)\n        }\n    }\n\n    // Tries to look for 'chess-piece' in the HTML of the clicked area \n    // to see if a player is trying to grab a piece\n    function grabPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        const element = e.target as HTMLElement\n        if (element.classList.contains('chess-piece') && chessboard){\n            setGridX(Math.floor((e.clientX - chessboard.offsetLeft)/GRID_SIZE));\n            setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE)/GRID_SIZE)));\n            const x = e.clientX - GRID_SIZE/2;\n            const y = e.clientY - GRID_SIZE/2;\n            element.style.position = 'absolute'; \n            element.style.left = `${x}px`;\n            element.style.top = `${y}px`;\n            setActivePiece(element)    \n        }\n    \n    }\n    // Places the center of the active piece beneath the cursor\n    function movePiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        if (activePiece && chessboard){\n            const x = e.clientX - GRID_SIZE/2;\n            const y = e.clientY - GRID_SIZE/2;\n            activePiece.style.position = 'absolute'; \n            activePiece.style.left = `${x}px`;\n            activePiece.style.top = `${y}px`;\n        }\n    }\n    \n    /* When the active piece is released we check to see if there was a piece promotion \n    using the variable CLICKED, then we check to see if the move made was a legal chess \n    move, this logic is done by files in the referee subdirectory. And finally we check \n    to see if the move that was made resulted in chekmate or stalemate. \n    */\n\n    function dropPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current;\n        if (activePiece && chessboard){\n            if (CLICKED){\n                promotePieces(pieces)\n            }  \n            const x = Math.floor((e.clientX - chessboard.offsetLeft)/GRID_SIZE);\n            const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE)/GRID_SIZE))\n            const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY)\n            if (currentPiece){\n                const oldBoardState = deepCopy()\n                const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces, activePlayer);                               \n                if (validMove){  \n                    switchPlayer()\n                    setPieces(pieces)\n                } else {\n                    revert(oldBoardState)\n                }\n            const boardState = deepCopy()\n            const boardState2 = deepCopy()\n            const checker = new Checker(boardState2);\n            const oppponent = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n            const checkMate = checker.isCheckMate(activePlayer, boardState)\n            if (checkMate){\n                if(checker.isMyKingInCheck(oppponent, boardState, 0)){\n                    const winner = activePlayer === TeamType.WHITE ? 'White Wins' : 'Black Wins'\n                    setWinner(winner)\n                    setCheckMate([true, 'Check Mate'])\n                } else {\n                    setWinner('Players Draw')\n                    setCheckMate([true, 'Stale Mate'])\n                }\n\n            }\n            }\n        }\n        setActivePiece(null);\n    }\n\n\n    // This code places 64 squares on the chessboard and for each square will look to see if their is \n    // a piece to place the image on. The HTML for the tiles is in the Tile subdirectory\n    for (let j = AXIS.length - 1; j >= 0; j-- ){\n        for (let i = 0; i < AXIS.length; i++ ) {\n            const number = i + j;\n            const piece = pieces.find(p => p.x === i && p.y === j) \n            let image = piece ? piece.image : undefined\n            const promotedPiece = pieces.find(p => p.promoted === true)\n            const team = promotedPiece && promotedPiece.y === 7 ? TeamType.WHITE : TeamType.BLACK \n            if (promotedPiece && promotedPiece.x === i && promotedPiece.y === j){\n                board.push(<Tile key = {`${i}, ${j}`} image = {image} number = {number} team = {team} isPromotion = {true}/>);\n            } else {\n                board.push(<Tile key = {`${i}, ${j}`} image = {image} number = {number} team = {team} isPromotion = {false}/>);\n            }\n        }\n    }\n\n    // Continues the game if it is not over otherwise displays the game result and prompts the user to play again\n    if (!checkMate){\n    return <div \n    ref = {chessboardRef} \n    onMouseUp = {e => dropPiece(e)} \n    onMouseMove = {e => movePiece(e)} \n    onMouseDown = {e => grabPiece(e)} \n    className = 'chessboard'>{board}\n    </div>;\n    } else {\n    return <div><div \n    ref = {chessboardRef} \n    className = 'chessboard grayed-out' >{board}\n    </div><div className = 'check'>\n    <div className = 'mate' > {message} <br></br> {winner} </div>\n    </div>\n    <button className = 'newgame' onClick = {newGame}> Play Again </button>\n    </div>;\n    }\n}"]},"metadata":{},"sourceType":"module"}