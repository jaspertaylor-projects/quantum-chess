{"ast":null,"code":"import { PieceType, TeamType } from \"../components/chessboard/chessboard\";\nexport default class Referee {\n  isOccupied(x, y, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y);\n    return true; // (piece !== null)\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState) {\n    console.log(\"Ref checking the move .... \"); // PAWN MOVES LOGIC\n\n    if (type === PieceType.PAWN) {\n      // WHITE PAWNS\n      if (team === TeamType.WHITE) {\n        if (py === 1 && px === x && py === y - 2) {\n          if (!this.isOccupied(x, y, boardState) && !this.isOccupied(x, y - 1, boardState)) {\n            return true;\n          }\n        } else if (py === y - 1 && px === x) {\n          if (!this.isOccupied(x, y, boardState)) {\n            return true;\n          }\n        }\n      } // BLACK PAWNS\n\n\n      if (team === TeamType.BLACK) {\n        if (py === 6 && px === x && (py === y + 1 || py === y + 2)) {\n          return true;\n        } else if (py === y + 1 && px === x) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","TeamType","Referee","isOccupied","x","y","boardState","piece","find","p","isValidMove","px","py","type","team","console","log","PAWN","WHITE","BLACK"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAA2C,qCAA3C;AAEA,eAAe,MAAMC,OAAN,CAAa;AACxBC,EAAAA,UAAU,CAACC,CAAD,EAAaC,CAAb,EAAwBC,UAAxB,EAAwD;AAC9D,UAAMC,KAAK,GAAGD,UAAU,CAACE,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACL,CAAF,KAAQA,CAAR,IAAaK,CAAC,CAACJ,CAAF,KAAQA,CAA1C,CAAd;AACA,WAAO,IAAP,CAF8D,CAElD;AAEf;;AACDK,EAAAA,WAAW,CAACC,EAAD,EAAcC,EAAd,EAA2BR,CAA3B,EAAuCC,CAAvC,EAAmDQ,IAAnD,EAAqEC,IAArE,EAAsFR,UAAtF,EAA4G;AACnHS,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EADmH,CAGnH;;AACA,QAAIH,IAAI,KAAKb,SAAS,CAACiB,IAAvB,EAA4B;AACxB;AACA,UAAIH,IAAI,KAAKb,QAAQ,CAACiB,KAAtB,EAA4B;AACxB,YAAKN,EAAE,KAAK,CAAP,IAAYD,EAAE,KAAKP,CAApB,IAA2BQ,EAAE,KAAKP,CAAC,GAAE,CAAzC,EAA4C;AACxC,cAAI,CAAC,KAAKF,UAAL,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,UAAtB,CAAD,IAAsC,CAAC,KAAKH,UAAL,CAAgBC,CAAhB,EAAmBC,CAAC,GAAG,CAAvB,EAA0BC,UAA1B,CAA3C,EAAiF;AAC7E,mBAAO,IAAP;AACH;AACJ,SAJD,MAIO,IAAIM,EAAE,KAAKP,CAAC,GAAG,CAAX,IAAgBM,EAAE,KAAKP,CAA3B,EAA6B;AAChC,cAAI,CAAC,KAAKD,UAAL,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,UAAtB,CAAL,EAAuC;AACnC,mBAAO,IAAP;AACH;AACJ;AACJ,OAZuB,CAaxB;;;AACA,UAAIQ,IAAI,KAAKb,QAAQ,CAACkB,KAAtB,EAA4B;AACxB,YAAKP,EAAE,KAAK,CAAP,IAAYD,EAAE,KAAKP,CAApB,KAA2BQ,EAAE,KAAKP,CAAC,GAAG,CAAX,IAAgBO,EAAE,KAAKP,CAAC,GAAI,CAAvD,CAAJ,EAA8D;AAC1D,iBAAO,IAAP;AACH,SAFD,MAEO,IAAIO,EAAE,KAAKP,CAAC,GAAG,CAAX,IAAgBM,EAAE,KAAKP,CAA3B,EAA6B;AAChC,iBAAO,IAAP;AACH;AACJ;AAEJ;;AACD,WAAO,KAAP;AACH;;AAlCuB","sourcesContent":["import { PieceType, TeamType, Piece } from \"../components/chessboard/chessboard\"\n\nexport default class Referee{\n    isOccupied(x : number, y: number, boardState : Piece []): boolean {\n        const piece = boardState.find(p => p.x === x && p.y === y) \n        return true // (piece !== null)\n\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, team : TeamType, boardState : Piece []){\n        console.log(\"Ref checking the move .... \")\n        \n        // PAWN MOVES LOGIC\n        if (type === PieceType.PAWN){\n            // WHITE PAWNS\n            if (team === TeamType.WHITE){\n                if ((py === 1 && px === x) && (py === y -2)){\n                    if (!this.isOccupied(x, y, boardState) && !this.isOccupied(x, y - 1, boardState)){\n                        return true\n                    }\n                } else if (py === y - 1 && px === x){\n                    if (!this.isOccupied(x, y, boardState)){\n                        return true;\n                    }\n                } \n            } \n            // BLACK PAWNS\n            if (team === TeamType.BLACK){\n                if ((py === 6 && px === x) && (py === y + 1 || py === y  + 2)){\n                    return true;\n                } else if (py === y + 1 && px === x){\n                    return true;\n                }\n            } \n\n        }\n        return false\n    }\n}"]},"metadata":{},"sourceType":"module"}