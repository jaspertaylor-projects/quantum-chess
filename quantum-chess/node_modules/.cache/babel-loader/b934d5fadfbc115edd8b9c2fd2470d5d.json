{"ast":null,"code":"export function isLegalBishopMove(px, py, dx, dy, boardState) {\n  const x_dir = Math.sign(dx);\n  const y_dir = Math.sign(dy);\n\n  for (let i = 1; i < Math.abs(dx); i++) {\n    const obstructingPiece = boardState.find(p => p.x === px + i * x_dir && p.y === py + i * y_dir);\n\n    if (obstructingPiece) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function straightPathClear(px, py, dx, dy, boardState) {\n  if (dx === 0) {\n    const y_dir = Math.sign(dy);\n\n    for (let i = 1; i < Math.abs(dy); i++) {\n      const obstructingPiece = boardState.find(p => p.x === px && p.y === py + i * y_dir);\n\n      if (obstructingPiece) {\n        return false;\n      }\n    }\n  }\n\n  if (dy === 0) {\n    const x_dir = Math.sign(dx);\n\n    for (let i = 1; i < Math.abs(dx); i++) {\n      const obstructingPiece = boardState.find(p => p.x === px + i * x_dir && p.y === py);\n\n      if (obstructingPiece) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/pathChecker.ts"],"names":["isLegalBishopMove","px","py","dx","dy","boardState","x_dir","Math","sign","y_dir","i","abs","obstructingPiece","find","p","x","y","straightPathClear"],"mappings":"AAEA,OAAO,SAASA,iBAAT,CAA2BC,EAA3B,EAAwCC,EAAxC,EAAqDC,EAArD,EAAkEC,EAAlE,EAA+EC,UAA/E,EAA+G;AAClH,QAAMC,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,EAAV,CAAd;AACA,QAAMM,KAAK,GAAGF,IAAI,CAACC,IAAL,CAAUJ,EAAV,CAAd;;AACA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,GAAL,CAASR,EAAT,CAApB,EAAkCO,CAAC,EAAnC,EAAuC;AACnC,UAAME,gBAAgB,GAAGP,UAAU,CAACQ,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,CAAF,KAAQd,EAAE,GAAGS,CAAC,GAACJ,KAAf,IAAwBQ,CAAC,CAACE,CAAF,KAAQd,EAAE,GAAGQ,CAAC,GAACD,KAA5D,CAAzB;;AACA,QAAIG,gBAAJ,EAAqB;AACjB,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH;AAED,OAAO,SAASK,iBAAT,CAA2BhB,EAA3B,EAAwCC,EAAxC,EAAqDC,EAArD,EAAkEC,EAAlE,EAA+EC,UAA/E,EAA+G;AAClH,MAAIF,EAAE,KAAK,CAAX,EAAa;AACT,UAAMM,KAAK,GAAGF,IAAI,CAACC,IAAL,CAAUJ,EAAV,CAAd;;AACA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,GAAL,CAASP,EAAT,CAApB,EAAkCM,CAAC,EAAnC,EAAuC;AACnC,YAAME,gBAAgB,GAAGP,UAAU,CAACQ,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,CAAF,KAAQd,EAAR,IAAca,CAAC,CAACE,CAAF,KAAQd,EAAE,GAAGQ,CAAC,GAACD,KAAlD,CAAzB;;AACA,UAAIG,gBAAJ,EAAqB;AACjB,eAAO,KAAP;AACH;AACJ;AACJ;;AACD,MAAIR,EAAE,KAAK,CAAX,EAAa;AACT,UAAME,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,EAAV,CAAd;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,GAAL,CAASR,EAAT,CAApB,EAAkCO,CAAC,EAAnC,EAAuC;AACnC,YAAME,gBAAgB,GAAGP,UAAU,CAACQ,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,CAAF,KAAQd,EAAE,GAAGS,CAAC,GAACJ,KAAf,IAAwBQ,CAAC,CAACE,CAAF,KAAQd,EAArD,CAAzB;;AACA,UAAIU,gBAAJ,EAAqB;AACjB,eAAO,KAAP;AACH;AACJ;AACJ;;AACD,SAAO,IAAP;AACH","sourcesContent":["import { Piece } from '../constants'\n\nexport function isLegalBishopMove(px : number, py : number, dx : number, dy : number, boardState : Piece[]) : boolean {\n    const x_dir = Math.sign(dx)\n    const y_dir = Math.sign(dy)\n    for (let i = 1; i < Math.abs(dx); i ++){\n        const obstructingPiece = boardState.find(p => p.x === px + i*x_dir && p.y === py + i*y_dir) \n        if (obstructingPiece){\n            return false\n        }\n    }\n    return true\n}\n\nexport function straightPathClear(px : number, py : number, dx : number, dy : number, boardState : Piece[]) : boolean {\n    if (dx === 0){\n        const y_dir = Math.sign(dy)\n        for (let i = 1; i < Math.abs(dy); i ++){\n            const obstructingPiece = boardState.find(p => p.x === px && p.y === py + i*y_dir) \n            if (obstructingPiece){\n                return false\n            }\n        }\n    }\n    if (dy === 0){\n        const x_dir = Math.sign(dx)\n        for (let i = 1; i < Math.abs(dx); i ++){\n            const obstructingPiece = boardState.find(p => p.x === px + i*x_dir && p.y === py) \n            if (obstructingPiece){\n                return false\n            }\n        }\n    }\n    return true;\n}"]},"metadata":{},"sourceType":"module"}