{"ast":null,"code":"import { PieceType, TeamType, AXIS } from \"../constants\";\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove, isCastleMove } from \"./pieceLogic\";\nimport Checker from './boardChecks';\nimport { CLICKED } from '../components/PopUp/PopUp';\nimport { executeMove } from \"./executeMove\";\nexport default class Referee {\n  promote(px, py, x, y, boardState) {\n    const piece = boardState.find(p => p.x === px && p.y === py);\n\n    if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.WHITE && y === 7) {\n      piece.promoted = true;\n    } else if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.BLACK && y === 0) {\n      piece.promoted = true;\n    } else if (piece) {\n      piece.promoted = false;\n    }\n  }\n\n  noCastle(px, py, boardState) {\n    const piece = boardState.find(p => p.x === px && p.y === py);\n\n    if (piece) {\n      piece.canCastle = false;\n    }\n  }\n\n  takePiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team);\n\n    if (piece) {\n      piece.taken = true;\n    }\n  }\n\n  endMove(px, py, x, y, team, boardState, valid, enPassant) {\n    if (!isFriendlyPiece(x, y, team, boardState)) {\n      this.promote(px, py, x, y, boardState);\n      this.noCastle(px, py, boardState);\n\n      if (enPassant) {\n        setEnPassant(px, py, boardState);\n      } else {\n        this.takePiece(x, y, team, boardState);\n        unsetEnPassant(boardState);\n      }\n\n      executeMove(px, py, x, y, boardState);\n      const checker = new Checker();\n      const inCheck = checker.isMyKingInCheck(team, boardState, 0);\n\n      if (inCheck) {\n        valid.value = false;\n      } else {\n        valid.value = true;\n      }\n    }\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState, activePlayer) {\n    if (!CLICKED) {\n      return false;\n    } // Only the active player can move\n\n\n    if (team !== activePlayer) {\n      return false;\n    } // A non-move is not a move\n\n\n    if (px === x && py === y) {\n      return false;\n    } // A move off the board is not a move\n\n\n    if (!(AXIS.includes(px) && AXIS.includes(py) && AXIS.includes(x) && AXIS.includes(y))) {\n      return false;\n    }\n\n    var valid = {\n      value: false\n    };\n    const dx = x - px;\n    const dy = y - py;\n\n    switch (type) {\n      case PieceType.PAWN:\n        {\n          if (isPawnStartingMove(px, py, x, y, team, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, true);\n          }\n\n          if (isPawnNormalMove(px, py, x, y, team, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false);\n          }\n\n          if (isEnPassant(px, py, x, y, team, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false);\n          }\n\n          break;\n        }\n\n      case PieceType.NIGHT:\n        {\n          if (isLegalNightMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false);\n          }\n\n          break;\n        }\n\n      case PieceType.BISHOP:\n        {\n          if (isLegalBishopMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false);\n          }\n\n          break;\n        }\n\n      case PieceType.ROOK:\n        {\n          if (isLegalRookMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false);\n          }\n\n          break;\n        }\n\n      case PieceType.QUEEN:\n        {\n          if (isLegalQueenMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false);\n          }\n\n          break;\n        }\n\n      case PieceType.KING:\n        {\n          if (isLegalKingMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false);\n          }\n\n          if (isCastleMove(px, py, dx, dy, activePlayer, boardState)) {\n            if (activePlayer === TeamType.WHITE) {\n              if (dx === -2) {\n                const piece = boardState.find(p => p.x === 0 && p.y === 0);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n\n              if (dx === 2) {\n                const piece = boardState.find(p => p.x === 7 && p.y === 0);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n            }\n\n            if (activePlayer === TeamType.BLACK) {\n              if (dx === -2) {\n                const piece = boardState.find(p => p.x === 0 && p.y === 7);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n\n              if (dx === 2) {\n                const piece = boardState.find(p => p.x === 7 && p.y === 7);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n            }\n\n            this.endMove(px, py, x, y, team, boardState, valid, false);\n          }\n\n          break;\n        }\n    }\n\n    console.log(valid.value);\n    return valid.value;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","TeamType","AXIS","isPawnNormalMove","isEnPassant","isPawnStartingMove","isFriendlyPiece","unsetEnPassant","setEnPassant","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","isCastleMove","Checker","CLICKED","executeMove","Referee","promote","px","py","x","y","boardState","piece","find","p","type","PAWN","team","WHITE","promoted","BLACK","noCastle","canCastle","takePiece","taken","endMove","valid","enPassant","checker","inCheck","isMyKingInCheck","value","isValidMove","activePlayer","includes","dx","dy","NIGHT","BISHOP","ROOK","QUEEN","KING","teleported","console","log"],"mappings":"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","sourcesContent":["\nimport { PieceType, TeamType, Piece, AXIS, initialBoardState, } from \"../constants\"\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove, isCastleMove} from \"./pieceLogic\"\nimport Checker from './boardChecks'\nimport {CLICKED} from '../components/PopUp/PopUp'\nimport { executeMove } from \"./executeMove\"\n\nexport default class Referee{\n    \n    promote(px: number, py: number, x : number, y: number, boardState : Piece []){\n    const piece = boardState.find(p => p.x === px && p.y === py)\n        if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.WHITE && y === 7){\n            piece.promoted = true\n        }   \n        else if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.BLACK && y === 0){\n            piece.promoted = true\n        } else if (piece){\n            piece.promoted = false\n        }\n    }    \n    noCastle(px: number, py: number, boardState : Piece []){\n        const piece = boardState.find(p => p.x === px && p.y === py)\n        if (piece){\n            piece.canCastle = false\n        }\n    }\n    takePiece(x : number, y: number, team : TeamType, boardState : Piece []){\n        const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team)  \n                if (piece) {\n            piece.taken = true\n        }\n    }\n\n    endMove(px : number, py : number, x : number, y: number, team : TeamType, \n            boardState : Piece [], valid : any, enPassant: boolean){\n        if (!isFriendlyPiece(x, y, team, boardState)){\n            this.promote(px, py, x, y, boardState)\n            this.noCastle(px, py, boardState)\n            if (enPassant){\n                setEnPassant(px, py, boardState)\n            } else{\n                this.takePiece(x, y, team, boardState)\n                unsetEnPassant(boardState)\n            }\n            executeMove(px, py, x, y, boardState)\n            const checker = new Checker();\n            const inCheck = checker.isMyKingInCheck(team, boardState, 0)\n            if (inCheck){\n                valid.value = false\n            }  else {\n                valid.value = true\n            }      \n        }\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, \n                team : TeamType, boardState : Piece [],  activePlayer : TeamType) : boolean{\n        if (!CLICKED){\n            return false\n        }  \n        // Only the active player can move\n        if (team !== activePlayer){\n            return false\n        }\n        // A non-move is not a move\n        if (px === x && py === y){\n            return false\n        }\n        // A move off the board is not a move\n        if (!(AXIS.includes(px) &&  AXIS.includes(py) &&  AXIS.includes(x) && AXIS.includes(y))){\n            return false\n        }\n        var valid = { value: false }\n        const dx = x - px\n        const dy = y - py\n\n        switch(type){\n            case PieceType.PAWN : {\n                if (isPawnStartingMove(px, py, x, y, team, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, true)\n                }\n                if (isPawnNormalMove(px, py, x, y, team, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false)\n                }\n                if (isEnPassant(px, py, x, y, team, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false)\n                }\n                break;\n            }\n            case PieceType.NIGHT : {\n                if (isLegalNightMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false)\n                }\n                break;\n            }\n            case PieceType.BISHOP : {\n                if (isLegalBishopMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false)\n                }\n                break;\n            }\n            case PieceType.ROOK : {\n                if (isLegalRookMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false)\n                }\n                break;\n            }\n            case PieceType.QUEEN : {\n                if (isLegalQueenMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false)\n                }\n                break;\n            }\n            case PieceType.KING : {\n                if (isLegalKingMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false)\n                }\n                if (isCastleMove(px, py, dx, dy, activePlayer, boardState)){\n                    if (activePlayer === TeamType.WHITE){\n                        if (dx === -2){ \n                            const piece = boardState.find(p => p.x === 0 && p.y === 0)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                        if (dx === 2){ \n                            const piece = boardState.find(p => p.x === 7 && p.y === 0)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                    }\n                    if (activePlayer === TeamType.BLACK){\n                        if (dx === -2){ \n                            const piece = boardState.find(p => p.x === 0 && p.y === 7)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                        if (dx === 2){ \n                            const piece = boardState.find(p => p.x === 7 && p.y === 7)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                    }\n                this.endMove(px, py, x, y, team, boardState, valid, false)\n                }\n            break;\n            }\n        }\n    console.log(valid.value)\n    return valid.value\n    }\n}"]},"metadata":{},"sourceType":"module"}