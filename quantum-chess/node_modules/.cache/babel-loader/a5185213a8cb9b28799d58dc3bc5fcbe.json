{"ast":null,"code":"import { PieceType, TeamType } from \"../constants\";\nimport { setEnPassant, checkEnPassant, unsetEnPassant, pawnIsBlockaded, isPawnStartingMove, isFriendlyPiece } from \"./pawnLogic\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove } from \"./pieceLogic\";\nexport default class Referee {\n  takePiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team);\n\n    if (piece) {\n      piece.taken = true;\n    }\n  }\n\n  endMove(x, y, team, boardState, valid) {\n    if (!isFriendlyPiece(x, y, team, boardState)) {\n      this.takePiece(x, y, team, boardState);\n      unsetEnPassant(boardState);\n      valid.value = true;\n    }\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState, activePlayer) {\n    // Only the active player can move\n    if (team !== activePlayer) {\n      return false;\n    } // A non-move is not a move\n\n\n    if (px === x && py === y) {\n      return false;\n    }\n\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    var valid = {\n      value: false\n    };\n    const dx = x - px;\n    const dy = y - py;\n\n    if (type === PieceType.PAWN) {\n      const startingRow = team === TeamType.WHITE ? 1 : 6;\n      const increment = team === TeamType.WHITE ? 1 : -1;\n\n      if (isPawnStartingMove(px, py, x, y, team, boardState)) {\n        setEnPassant(px, py, boardState);\n        return true;\n      }\n\n      if (isPawnNormalMove(px, py, x, y, team, boardState)) if (py === y - increment && px === x) {\n        if (!pawnIsBlockaded(x, y, boardState)) {\n          unsetEnPassant(boardState);\n          return true;\n        }\n      } // ATTACK LOGIC\n\n      if ((x === px + 1 || x === px - 1) && py === y - increment && isFriendlyPiece(x, y, enemyTeam, boardState)) {\n        this.endMove(x, y, team, boardState, valid);\n      }\n\n      if ((x === px + 1 || x === px - 1) && py === y - increment && isFriendlyPiece(x, py, enemyTeam, boardState)) {\n        if (checkEnPassant(x, py, boardState)) {\n          this.endMove(x, py, team, boardState, valid);\n        }\n      }\n    } // NIGHT LOGIC \n\n\n    if (type === PieceType.NIGHT) {\n      if (isLegalNightMove(px, py, dx, dy, boardState)) {\n        this.endMove(x, y, team, boardState, valid);\n      }\n    } // BISHOP LOGIC\n\n\n    if (type === PieceType.BISHOP) {\n      if (isLegalBishopMove(px, py, dx, dy, boardState)) {\n        this.endMove(x, y, team, boardState, valid);\n      }\n    } // ROOK LOGIC\n\n\n    if (type === PieceType.ROOK) {\n      if (isLegalRookMove(px, py, dx, dy, boardState)) {\n        this.endMove(x, y, team, boardState, valid);\n      }\n    } // QUEEN LOGIC\n\n\n    if (type === PieceType.QUEEN) {\n      if (isLegalQueenMove(px, py, dx, dy, boardState)) {\n        this.endMove(x, y, team, boardState, valid);\n      }\n    } // KING LOGIC\n\n\n    if (type === PieceType.KING) {\n      if (isLegalKingMove(px, py, dx, dy, boardState)) {\n        this.endMove(x, y, team, boardState, valid);\n      }\n    }\n\n    return valid.value;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","TeamType","setEnPassant","checkEnPassant","unsetEnPassant","pawnIsBlockaded","isPawnStartingMove","isFriendlyPiece","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","Referee","takePiece","x","y","team","boardState","piece","find","p","taken","endMove","valid","value","isValidMove","px","py","type","activePlayer","enemyTeam","WHITE","BLACK","dx","dy","PAWN","startingRow","increment","isPawnNormalMove","NIGHT","BISHOP","ROOK","QUEEN","KING"],"mappings":"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","sourcesContent":["import { PieceType, TeamType, Piece } from \"../constants\"\nimport { setEnPassant , checkEnPassant, unsetEnPassant, pawnIsBlockaded, isPawnStartingMove, isFriendlyPiece} from \"./pawnLogic\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove} from \"./pieceLogic\"\n\nexport default class Referee{\n    takePiece(x : number, y: number, team : TeamType, boardState : Piece []){\n        const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team)  \n        if (piece) {\n            piece.taken = true\n        }\n    }\n\n\n    endMove(x : number, y: number, team : TeamType, boardState : Piece [], valid : any){\n        if (!isFriendlyPiece(x, y, team, boardState)){\n            this.takePiece(x, y, team, boardState)\n            unsetEnPassant(boardState)\n            valid.value = true          \n        }\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, \n                team : TeamType, boardState : Piece [], activePlayer : TeamType){\n        // Only the active player can move\n        if (team !== activePlayer){\n            return false\n        }\n        // A non-move is not a move\n        if (px === x && py === y){\n            return false\n        }\n        const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        var valid = { value: false }\n        const dx = x - px\n        const dy = y - py\n        if (type === PieceType.PAWN){\n            const startingRow = team === TeamType.WHITE ? 1 : 6\n            const increment = team === TeamType.WHITE ? 1 : - 1\n            if (isPawnStartingMove(px, py, x, y, team, boardState)){\n                setEnPassant(px, py, boardState)\n                return true\n            }\n            if (isPawnNormalMove(px, py, x, y, team, boardState))\n            if (py === y - increment && px === x){\n                if (!pawnIsBlockaded(x, y, boardState)){\n                    unsetEnPassant(boardState)\n                    return true;\n                }\n            } \n            // ATTACK LOGIC\n            if ((x === px + 1 || x === px -1) && (py === y - increment) && isFriendlyPiece(x, y, enemyTeam, boardState)) {\n                this.endMove(x, y, team, boardState, valid)\n            }\n            if ((x === px + 1 || x === px -1) && (py === y - increment) && isFriendlyPiece(x, py, enemyTeam, boardState)) {\n                if (checkEnPassant(x, py, boardState)){\n                this.endMove(x, py, team, boardState, valid)\n                }\n            }\n        }\n        // NIGHT LOGIC \n        if (type === PieceType.NIGHT){\n            if (isLegalNightMove(px, py, dx, dy, boardState)){\n                this.endMove(x, y, team, boardState, valid)\n            }\n        }\n        // BISHOP LOGIC\n        if (type === PieceType.BISHOP){\n            if (isLegalBishopMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid)\n            }\n        }\n        // ROOK LOGIC\n        if (type === PieceType.ROOK){\n            if (isLegalRookMove(px, py, dx, dy, boardState)){\n                this.endMove(x, y, team, boardState, valid)\n            }\n         }\n        // QUEEN LOGIC\n        if (type === PieceType.QUEEN){\n            if (isLegalQueenMove(px, py, dx, dy, boardState)){\n                this.endMove(x, y, team, boardState, valid)\n            }\n         }\n         // KING LOGIC\n        if (type === PieceType.KING){\n            if (isLegalKingMove(px, py, dx, dy, boardState)){\n                this.endMove(x, y, team, boardState, valid)\n            }\n         }\n    return valid.value\n    }\n}"]},"metadata":{},"sourceType":"module"}