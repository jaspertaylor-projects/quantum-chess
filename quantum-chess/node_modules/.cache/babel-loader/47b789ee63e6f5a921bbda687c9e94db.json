{"ast":null,"code":"import { PieceType, TeamType } from \"../components/chessboard/chessboard\";\nexport default class Referee {\n  isOccupied(x, y, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y);\n    const occupied = piece ? true : false;\n    return occupied;\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState) {\n    console.log(\"Ref checking the move .... \");\n\n    if (type === PieceType.PAWN) {\n      const startingRow = team === TeamType.WHITE ? 1 : 6;\n      const increment = team === TeamType.WHITE ? 1 : -1;\n\n      if (py === startingRow && px === x && py === y - 2 * increment) {\n        if (!this.isOccupied(x, y, boardState) && !this.isOccupied(x, y - increment, boardState)) {\n          return true;\n        }\n      }\n\n      if (py === y - increment && px === x) {\n        if (!this.isOccupied(x, y, boardState)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","TeamType","Referee","isOccupied","x","y","boardState","piece","find","p","occupied","isValidMove","px","py","type","team","console","log","PAWN","startingRow","WHITE","increment"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAA2C,qCAA3C;AAEA,eAAe,MAAMC,OAAN,CAAa;AACxBC,EAAAA,UAAU,CAACC,CAAD,EAAaC,CAAb,EAAwBC,UAAxB,EAAwD;AAC9D,UAAMC,KAAK,GAAGD,UAAU,CAACE,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACL,CAAF,KAAQA,CAAR,IAAaK,CAAC,CAACJ,CAAF,KAAQA,CAA1C,CAAd;AACA,UAAMK,QAAQ,GAAIH,KAAK,GAAG,IAAH,GAAU,KAAjC;AACA,WAAOG,QAAP;AACH;;AACDC,EAAAA,WAAW,CAACC,EAAD,EAAcC,EAAd,EAA2BT,CAA3B,EAAuCC,CAAvC,EAAmDS,IAAnD,EAAqEC,IAArE,EAAsFT,UAAtF,EAA4G;AACnHU,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;;AAEA,QAAIH,IAAI,KAAKd,SAAS,CAACkB,IAAvB,EAA4B;AACxB,YAAMC,WAAW,GAAGJ,IAAI,KAAKd,QAAQ,CAACmB,KAAlB,GAA0B,CAA1B,GAA8B,CAAlD;AACA,YAAMC,SAAS,GAAGN,IAAI,KAAKd,QAAQ,CAACmB,KAAlB,GAA0B,CAA1B,GAA8B,CAAE,CAAlD;;AACA,UAAKP,EAAE,KAAKM,WAAP,IAAsBP,EAAE,KAAKR,CAA9B,IAAqCS,EAAE,KAAKR,CAAC,GAAG,IAAIgB,SAAxD,EAAmE;AAC/D,YAAI,CAAC,KAAKlB,UAAL,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,UAAtB,CAAD,IAAsC,CAAC,KAAKH,UAAL,CAAgBC,CAAhB,EAAmBC,CAAC,GAAGgB,SAAvB,EAAkCf,UAAlC,CAA3C,EAAyF;AACrF,iBAAO,IAAP;AACH;AACJ;;AACD,UAAIO,EAAE,KAAKR,CAAC,GAAGgB,SAAX,IAAwBT,EAAE,KAAKR,CAAnC,EAAqC;AACjC,YAAI,CAAC,KAAKD,UAAL,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,UAAtB,CAAL,EAAuC;AACnC,iBAAO,IAAP;AACH;AACJ;AACJ;;AACD,WAAO,KAAP;AACH;;AAxBuB","sourcesContent":["import { PieceType, TeamType, Piece } from \"../components/chessboard/chessboard\"\n\nexport default class Referee{\n    isOccupied(x : number, y: number, boardState : Piece []): boolean {\n        const piece = boardState.find(p => p.x === x && p.y === y) \n        const occupied =  piece ? true : false\n        return occupied\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, team : TeamType, boardState : Piece []){\n        console.log(\"Ref checking the move .... \")\n\n        if (type === PieceType.PAWN){\n            const startingRow = team === TeamType.WHITE ? 1 : 6\n            const increment = team === TeamType.WHITE ? 1 : - 1\n            if ((py === startingRow && px === x) && (py === y - 2 * increment)){\n                if (!this.isOccupied(x, y, boardState) && !this.isOccupied(x, y - increment, boardState)){\n                    return true\n                }\n            } \n            if (py === y - increment && px === x){\n                if (!this.isOccupied(x, y, boardState)){\n                    return true;\n                }\n            } \n        }\n        return false\n    }\n}"]},"metadata":{},"sourceType":"module"}