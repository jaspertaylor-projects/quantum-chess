{"ast":null,"code":"var _jsxFileName = \"/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/chessboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport Tile from '../Tile/Tile';\nimport './chessboard.css';\nimport Referee from '../../referee/Referee';\nimport { VERTICAL_AXIS, HORIZONTAL_AXIS, GRID_SIZE, TeamType, initialBoardState } from '../../constants';\nimport Checker from '../../referee/boardChecks';\nimport { PROMOTED_PIECE, IMAGE, CLICKED } from '../PopUp/PopUp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard() {\n  _s();\n\n  const [activePiece, setActivePiece] = useState(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const [pieces, setPieces] = useState(initialBoardState);\n  const [activePlayer, setActivePlayer] = useState(TeamType.WHITE);\n  const chessboardRef = useRef(null);\n  const referee = new Referee();\n  const checker = new Checker();\n  let board = [];\n\n  function switchPlayer() {\n    const nextPlayer = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    setActivePlayer(nextPlayer);\n  }\n\n  function revert() {\n    if (activePiece) {\n      activePiece.style.position = 'relative';\n      activePiece.style.removeProperty('left');\n      activePiece.style.removeProperty('top');\n    }\n  }\n\n  function promotePieces() {\n    const promotedPiece = pieces.find(p => p.promoted === true);\n\n    if (promotedPiece) {\n      const id = pieces.indexOf(promotedPiece);\n      pieces[id] = {\n        image: IMAGE,\n        x: promotedPiece.x,\n        y: promotedPiece.y,\n        taken: false,\n        team: promotedPiece.team,\n        type: PROMOTED_PIECE,\n        enPassantable: false,\n        promoted: false\n      };\n      console.log(IMAGE, PROMOTED_PIECE, promotedPiece.team);\n      console.log(promotedPiece.x, promotedPiece.y);\n    }\n  }\n\n  function takePiece(p) {\n    const id2 = pieces.indexOf(p);\n    pieces.splice(id2, 1);\n  }\n\n  function teleportPiece(p) {\n    let tele = 0;\n\n    if (p.x === 7) {\n      tele = -2;\n    } else {\n      tele = 3;\n    }\n\n    p.x = p.x + tele;\n    p.teleported = false;\n  }\n\n  function grabPiece(e) {\n    const chessboard = chessboardRef.current;\n    const element = e.target;\n\n    if (element.classList.contains('chess-piece') && chessboard) {\n      setGridX(Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE));\n      setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE) / GRID_SIZE)));\n      const x = e.clientX - GRID_SIZE / 2;\n      const y = e.clientY - GRID_SIZE / 2;\n      element.style.position = 'absolute';\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n\n    if (activePiece && chessboard) {\n      const x = e.clientX - GRID_SIZE / 2;\n      const y = e.clientY - GRID_SIZE / 2;\n      activePiece.style.position = 'absolute';\n      activePiece.style.left = `${x}px`;\n      activePiece.style.top = `${y}px`;\n    }\n  }\n\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n\n    if (activePiece && chessboard) {\n      if (CLICKED) {\n        promotePieces();\n      }\n\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE) / GRID_SIZE));\n      const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY);\n\n      if (currentPiece) {\n        const oldBoardState = deepCopy();\n        const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces, activePlayer);\n\n        if (validMove) {\n          const takenPiece = pieces.find(p => p.taken === true);\n\n          if (takenPiece) {\n            takePiece(takenPiece);\n          }\n\n          const teleportedPiece = pieces.find(p => p.teleported === true);\n\n          if (teleportedPiece) {\n            teleportPiece(teleportedPiece);\n          }\n\n          const id1 = pieces.indexOf(currentPiece);\n          currentPiece.x = x;\n          currentPiece.y = y;\n          pieces[id1] = currentPiece;\n          setPieces(pieces);\n          switchPlayer();\n        } else {\n          revert();\n        }\n      }\n    }\n\n    setActivePiece(null);\n  }\n\n  for (let j = VERTICAL_AXIS.length - 1; j >= 0; j--) {\n    for (let i = 0; i < HORIZONTAL_AXIS.length; i++) {\n      const number = i + j;\n      const piece = pieces.find(p => p.x === i && p.y === j);\n      let image = piece ? piece.image : undefined;\n      const promotedPiece = pieces.find(p => p.promoted === true);\n      const team = promotedPiece && promotedPiece.y === 7 ? TeamType.WHITE : TeamType.BLACK;\n\n      if (promotedPiece && promotedPiece.x === i && promotedPiece.y === j) {\n        console.log('here');\n        board.push( /*#__PURE__*/_jsxDEV(Tile, {\n          image: image,\n          number: number,\n          team: team,\n          isPromotion: true\n        }, `${i}, ${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 28\n        }, this));\n      } else {\n        board.push( /*#__PURE__*/_jsxDEV(Tile, {\n          image: image,\n          number: number,\n          team: team,\n          isPromotion: false\n        }, `${i}, ${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 28\n        }, this));\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chessboardRef,\n    onMouseUp: e => dropPiece(e),\n    onMouseMove: e => movePiece(e),\n    onMouseDown: e => grabPiece(e),\n    id: \"chessboard\",\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Chessboard, \"kdrAI8vopvD3bdD47ggtMzHSoI8=\");\n\n_c = Chessboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/chessboard.tsx"],"names":["React","useRef","useState","Tile","Referee","VERTICAL_AXIS","HORIZONTAL_AXIS","GRID_SIZE","TeamType","initialBoardState","Checker","PROMOTED_PIECE","IMAGE","CLICKED","Chessboard","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","pieces","setPieces","activePlayer","setActivePlayer","WHITE","chessboardRef","referee","checker","board","switchPlayer","nextPlayer","BLACK","revert","style","position","removeProperty","promotePieces","promotedPiece","find","p","promoted","id","indexOf","image","x","y","taken","team","type","enPassantable","console","log","takePiece","id2","splice","teleportPiece","tele","teleported","grabPiece","e","chessboard","current","element","target","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","left","top","movePiece","dropPiece","currentPiece","oldBoardState","deepCopy","validMove","isValidMove","takenPiece","teleportedPiece","id1","j","length","i","number","piece","undefined","push"],"mappings":"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","sourcesContent":["import React, {useRef, useState, } from 'react';\nimport Tile from '../Tile/Tile';\nimport './chessboard.css';\nimport Referee from '../../referee/Referee'\nimport {VERTICAL_AXIS, HORIZONTAL_AXIS, GRID_SIZE, Piece, TeamType, initialBoardState} from '../../constants'\nimport Checker from '../../referee/boardChecks'\nimport { PROMOTED_PIECE , IMAGE, CLICKED} from '../PopUp/PopUp';\n\nexport default function Chessboard(){\n    const [activePiece, setActivePiece] = useState<HTMLElement | null>(null) \n    const [gridX, setGridX] = useState(0);\n    const [gridY, setGridY] = useState(0);\n    const [pieces, setPieces]  = useState<Piece[]>(initialBoardState);\n    const [activePlayer, setActivePlayer] = useState<TeamType>(TeamType.WHITE);\n    const chessboardRef = useRef<HTMLDivElement>(null);\n    const referee = new Referee();\n    const checker = new Checker();\n    let board = [];\n\n\n    function switchPlayer(){\n        const nextPlayer = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        setActivePlayer(nextPlayer) \n    }\n\n    function revert(){\n        if (activePiece){\n            activePiece.style.position = 'relative';\n            activePiece.style.removeProperty('left');\n            activePiece.style.removeProperty('top');\n        }\n    }\n\n    function promotePieces(){\n        const promotedPiece = pieces.find(p => p.promoted === true)\n        if (promotedPiece){\n            const id = pieces.indexOf(promotedPiece)\n            pieces[id] = {image : IMAGE, x : promotedPiece.x,  y: promotedPiece.y, taken : false,\n                        team : promotedPiece.team, type : PROMOTED_PIECE, enPassantable : false,\n                        promoted : false}\n            console.log(IMAGE, PROMOTED_PIECE, promotedPiece.team)\n            console.log(promotedPiece.x, promotedPiece.y)\n        }\n    }\n\n    function takePiece(p : Piece){\n        const id2 = pieces.indexOf(p)\n        pieces.splice(id2, 1)\n    }\n\n    function teleportPiece(p : Piece){\n        let tele = 0;\n        if (p.x === 7){  \n            tele = -2\n        } else {\n            tele = 3\n        }\n        p.x = p.x + tele\n        p.teleported = false\n    }\n\n    function grabPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        const element = e.target as HTMLElement\n        if (element.classList.contains('chess-piece') && chessboard){\n            setGridX(Math.floor((e.clientX - chessboard.offsetLeft)/GRID_SIZE));\n            setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE)/GRID_SIZE)));\n            const x = e.clientX - GRID_SIZE/2;\n            const y = e.clientY - GRID_SIZE/2;\n            element.style.position = 'absolute'; \n            element.style.left = `${x}px`;\n            element.style.top = `${y}px`;\n            setActivePiece(element)    \n        }\n    \n    }\n    \n    function movePiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        if (activePiece && chessboard){\n            const x = e.clientX - GRID_SIZE/2;\n            const y = e.clientY - GRID_SIZE/2;\n            activePiece.style.position = 'absolute'; \n            activePiece.style.left = `${x}px`;\n            activePiece.style.top = `${y}px`;\n        }\n    }\n    \n    function dropPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current;\n        if (activePiece && chessboard){\n            if (CLICKED){\n                promotePieces()\n            }  \n            const x = Math.floor((e.clientX - chessboard.offsetLeft)/GRID_SIZE);\n            const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE)/GRID_SIZE))\n            const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY)\n            if (currentPiece){\n                const oldBoardState = deepCopy()\n                const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces, activePlayer);                \n                if (validMove){  \n                    const takenPiece = pieces.find(p => p.taken === true)\n                    if (takenPiece){\n                        takePiece(takenPiece)\n                    }\n                    const teleportedPiece = pieces.find(p => p.teleported === true)\n                    if (teleportedPiece){\n                        teleportPiece(teleportedPiece)\n                    }\n                    const id1 = pieces.indexOf(currentPiece)\n                    currentPiece.x = x\n                    currentPiece.y = y\n                    pieces[id1] = currentPiece\n                    setPieces(pieces)\n                    switchPlayer()\n                    } else {\n                        revert()\n                }\n            }\n        }\n        setActivePiece(null);\n    }\n\n    for (let j = VERTICAL_AXIS.length - 1; j >= 0; j-- ){\n        for (let i = 0; i < HORIZONTAL_AXIS.length; i++ ) {\n            const number = i + j;\n            const piece = pieces.find(p => p.x === i && p.y === j) \n            let image = piece ? piece.image : undefined\n            const promotedPiece = pieces.find(p => p.promoted === true)\n            const team = promotedPiece && promotedPiece.y === 7 ? TeamType.WHITE : TeamType.BLACK \n            if (promotedPiece && promotedPiece.x === i && promotedPiece.y === j){\n                console.log('here')\n                board.push(<Tile key = {`${i}, ${j}`} image = {image} number = {number} team = {team} isPromotion = {true}/>);\n            } else {\n                board.push(<Tile key = {`${i}, ${j}`} image = {image} number = {number} team = {team} isPromotion = {false}/>);\n            }\n        }\n    }\n    return <div \n    ref = {chessboardRef} \n    onMouseUp = {e => dropPiece(e)} \n    onMouseMove = {e => movePiece(e)} \n    onMouseDown = {e => grabPiece(e)} \n    id = 'chessboard'>{board}\n    </div>;\n}"]},"metadata":{},"sourceType":"module"}