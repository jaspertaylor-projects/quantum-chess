{"ast":null,"code":"import { PieceType, TeamType } from \"../../constants\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove } from \"../../referee/pieceLogic\";\nexport default function isMyKingInCheck(team, boardState) {\n  const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n  const myKing = boardState.find(p => p.team === team && p.type === PieceType.KING);\n  boardState.forEach(p => {\n    if (myKing && p.team === enemyTeam) {\n      const dx = myKing.x - p.x;\n      const dy = myKing.y - p.y;\n\n      switch (p.type) {\n        case PieceType.NIGHT:\n          {\n            if (isLegalNightMove(p.x, p.y, dx, dy, boardState)) {\n              return true;\n            }\n\n            break;\n          }\n\n        case PieceType.BISHOP:\n          {\n            console.log('im a bishop');\n\n            if (isLegalBishopMove(p.x, p.y, dx, dy, boardState)) {\n              console.log('I think I can get your king');\n              return true;\n            }\n\n            break;\n          }\n\n        case PieceType.ROOK:\n          {\n            if (isLegalRookMove(p.x, p.y, dx, dy, boardState)) {\n              return true;\n            }\n\n            break;\n          }\n\n        case PieceType.QUEEN:\n          {\n            if (isLegalQueenMove(p.x, p.y, dx, dy, boardState)) {\n              return true;\n            }\n\n            break;\n          }\n\n        case PieceType.KING:\n          {\n            if (isLegalKingMove(p.x, p.y, dx, dy, boardState)) {\n              return true;\n            }\n\n            break;\n          }\n      }\n    }\n  });\n  return false;\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/boardChecks.ts"],"names":["PieceType","TeamType","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","isMyKingInCheck","team","boardState","enemyTeam","WHITE","BLACK","myKing","find","p","type","KING","forEach","dx","x","dy","y","NIGHT","BISHOP","console","log","ROOK","QUEEN"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAA2C,iBAA3C;AACA,SAASC,iBAAT,EAA4BC,eAA5B,EAA6CC,gBAA7C,EAA+DC,eAA/D,EAAgFC,gBAAhF,QAAuG,0BAAvG;AAEA,eAAe,SAASC,eAAT,CAAyBC,IAAzB,EAA0CC,UAA1C,EAAgE;AAC3E,QAAMC,SAAS,GAAGF,IAAI,KAAKP,QAAQ,CAACU,KAAlB,GAA0BV,QAAQ,CAACW,KAAnC,GAA2CX,QAAQ,CAACU,KAAtE;AACA,QAAME,MAAM,GAAGJ,UAAU,CAACK,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACP,IAAF,KAAWA,IAAX,IAAmBO,CAAC,CAACC,IAAF,KAAWhB,SAAS,CAACiB,IAA7D,CAAf;AACAR,EAAAA,UAAU,CAACS,OAAX,CAAmBH,CAAC,IAAI;AACpB,QAAIF,MAAM,IAAIE,CAAC,CAACP,IAAF,KAAWE,SAAzB,EAAoC;AAChC,YAAMS,EAAE,GAAGN,MAAM,CAACO,CAAP,GAAWL,CAAC,CAACK,CAAxB;AACA,YAAMC,EAAE,GAAGR,MAAM,CAACS,CAAP,GAAWP,CAAC,CAACO,CAAxB;;AACA,cAAQP,CAAC,CAACC,IAAV;AACI,aAAKhB,SAAS,CAACuB,KAAf;AAAuB;AACnB,gBAAIjB,gBAAgB,CAACS,CAAC,CAACK,CAAH,EAAML,CAAC,CAACO,CAAR,EAAWH,EAAX,EAAeE,EAAf,EAAmBZ,UAAnB,CAApB,EAAmD;AAC/C,qBAAO,IAAP;AACH;;AAAC;AACL;;AACD,aAAKT,SAAS,CAACwB,MAAf;AAAwB;AACpBC,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;;AACA,gBAAIxB,iBAAiB,CAACa,CAAC,CAACK,CAAH,EAAML,CAAC,CAACO,CAAR,EAAWH,EAAX,EAAeE,EAAf,EAAmBZ,UAAnB,CAArB,EAAoD;AAChDgB,cAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,qBAAO,IAAP;AACH;;AAAC;AACL;;AACD,aAAK1B,SAAS,CAAC2B,IAAf;AAAsB;AAClB,gBAAIxB,eAAe,CAACY,CAAC,CAACK,CAAH,EAAML,CAAC,CAACO,CAAR,EAAWH,EAAX,EAAeE,EAAf,EAAmBZ,UAAnB,CAAnB,EAAkD;AAC9C,qBAAO,IAAP;AACH;;AAAC;AACL;;AACD,aAAKT,SAAS,CAAC4B,KAAf;AAAuB;AACnB,gBAAIxB,gBAAgB,CAACW,CAAC,CAACK,CAAH,EAAML,CAAC,CAACO,CAAR,EAAWH,EAAX,EAAeE,EAAf,EAAmBZ,UAAnB,CAApB,EAAmD;AAC/C,qBAAO,IAAP;AACH;;AAAC;AACL;;AACD,aAAKT,SAAS,CAACiB,IAAf;AAAsB;AAClB,gBAAIZ,eAAe,CAACU,CAAC,CAACK,CAAH,EAAML,CAAC,CAACO,CAAR,EAAWH,EAAX,EAAeE,EAAf,EAAmBZ,UAAnB,CAAnB,EAAkD;AAC9C,qBAAO,IAAP;AACH;;AAAC;AACL;AA3BL;AA8BH;AACJ,GAnCD;AAoCA,SAAO,KAAP;AAEH","sourcesContent":["import { PieceType, TeamType, Piece } from \"../../constants\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove} from \"../../referee/pieceLogic\"\n\nexport default function isMyKingInCheck(team : TeamType, boardState : Piece []){\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n    const myKing = boardState.find(p => p.team === team && p.type === PieceType.KING) \n    boardState.forEach(p => {\n        if (myKing && p.team === enemyTeam) {\n            const dx = myKing.x - p.x\n            const dy = myKing.y - p.y\n            switch (p.type){\n                case PieceType.NIGHT : {\n                    if (isLegalNightMove(p.x, p.y, dx, dy, boardState)){\n                        return true;\n                    } break;\n                }\n                case PieceType.BISHOP : {\n                    console.log('im a bishop')\n                    if (isLegalBishopMove(p.x, p.y, dx, dy, boardState)){\n                        console.log('I think I can get your king')\n                        return true;\n                    } break;\n                }\n                case PieceType.ROOK : {\n                    if (isLegalRookMove(p.x, p.y, dx, dy, boardState)){\n                        return true;\n                    } break;\n                }\n                case PieceType.QUEEN : {\n                    if (isLegalQueenMove(p.x, p.y, dx, dy, boardState)){\n                        return true;\n                    } break;\n                }\n                case PieceType.KING : {\n                    if (isLegalKingMove(p.x, p.y, dx, dy, boardState)){\n                        return true;\n                    } break;\n                }\n            }\n\n        }\n    })\n    return false\n\n}"]},"metadata":{},"sourceType":"module"}