{"ast":null,"code":"import { PieceType, TeamType } from \"../constants\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove } from \"./pieceLogic\";\nimport { isPawnNormalMove } from \"./pawnLogic\";\nexport default class Checker {\n  deepCopy(boardState) {\n    const oldBoardState = [];\n    boardState.forEach(p => oldBoardState.push({\n      image: p.image,\n      x: p.x,\n      y: p.y,\n      team: p.team,\n      type: p.type,\n      enPassantable: p.enPassantable,\n      canCastle: p.canCastle,\n      promoted: p.promoted\n    }));\n    return oldBoardState;\n  }\n\n  isMyKingInCheck(team, boardState, increment) {\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    const myKing = boardState.find(p => p.team === team && p.type === PieceType.KING);\n\n    for (let i = 0; i < boardState.length; i++) {\n      const p = boardState[i];\n\n      if (myKing && p.team === enemyTeam) {\n        const dx = myKing.x + increment - p.x;\n        const dy = myKing.y - p.y;\n\n        switch (p.type) {\n          case PieceType.PAWN:\n            {\n              if (isPawnNormalMove(p.x, p.y, myKing.x + increment, myKing.y, p.team, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.NIGHT:\n            {\n              if (isLegalNightMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.BISHOP:\n            {\n              if (isLegalBishopMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.ROOK:\n            {\n              if (isLegalRookMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.QUEEN:\n            {\n              if (isLegalQueenMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.KING:\n            {\n              if (isLegalKingMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n        }\n      }\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/boardChecks.ts"],"names":["PieceType","TeamType","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","isPawnNormalMove","Checker","deepCopy","boardState","oldBoardState","forEach","p","push","image","x","y","team","type","enPassantable","canCastle","promoted","isMyKingInCheck","increment","enemyTeam","WHITE","BLACK","myKing","find","KING","i","length","dx","dy","PAWN","NIGHT","BISHOP","ROOK","QUEEN"],"mappings":"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","sourcesContent":["import { PieceType, TeamType, Piece, VERTICAL_AXIS, HORIZONTAL_AXIS } from \"../constants\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove} from \"./pieceLogic\"\nimport { isPawnNormalMove } from \"./pawnLogic\"\nimport Referee from \"./Referee\"\n\nexport default class Checker{\n    deepCopy(boardState : Piece []) : Piece [] {\n        const oldBoardState : Piece[] = [];\n        boardState.forEach(p => oldBoardState.push({image : p.image, x : p.x,  y : p.y,\n                                                team : p.team, type : p.type, \n                                                enPassantable : p.enPassantable,\n                                                canCastle: p.canCastle,\n                                                promoted: p.promoted}))\n        return oldBoardState\n    }\n    \n    \n    isMyKingInCheck(team : TeamType, boardState : Piece [], increment : number) : boolean {\n        const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        const myKing = boardState.find(p => p.team === team && p.type === PieceType.KING) \n        for (let i = 0; i < boardState.length; i++){\n            const p = boardState[i];\n            if (myKing && p.team === enemyTeam) {\n                const dx = myKing.x + increment - p.x\n                const dy = myKing.y - p.y\n                switch (p.type){\n                    case PieceType.PAWN : {\n                        if (isPawnNormalMove(p.x, p.y, myKing.x + increment, myKing.y, p.team, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.NIGHT : {\n                        if (isLegalNightMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.BISHOP : {\n                        if (isLegalBishopMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.ROOK : {\n                        if (isLegalRookMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.QUEEN : {\n                        if (isLegalQueenMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.KING : {\n                        if (isLegalKingMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                }\n\n            }\n        }\n        return false\n    }\n\n}"]},"metadata":{},"sourceType":"module"}