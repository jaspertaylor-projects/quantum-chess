{"ast":null,"code":"import { PieceType, TeamType, VERTICAL_AXIS, HORIZONTAL_AXIS } from \"../constants\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove } from \"./pieceLogic\";\nimport { isPawnNormalMove } from \"./pawnLogic\";\nimport Referee from \"./Referee\";\nexport default class Checker {\n  isMyKingInCheck(team, boardState, increment) {\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    const myKing = boardState.find(p => p.team === team && p.type === PieceType.KING);\n\n    for (let i = 0; i < boardState.length; i++) {\n      const p = boardState[i];\n\n      if (myKing && p.team === enemyTeam) {\n        const dx = myKing.x + increment - p.x;\n        const dy = myKing.y - p.y;\n\n        switch (p.type) {\n          case PieceType.PAWN:\n            {\n              if (isPawnNormalMove(p.x, p.y, myKing.x + increment, myKing.y, p.team, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.NIGHT:\n            {\n              if (isLegalNightMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.BISHOP:\n            {\n              if (isLegalBishopMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.ROOK:\n            {\n              if (isLegalRookMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.QUEEN:\n            {\n              if (isLegalQueenMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.KING:\n            {\n              if (isLegalKingMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isCheckMate(team, boardState) {\n    const ref = new Referee();\n    const copy = this.deepCopy(boardState);\n\n    for (let j = VERTICAL_AXIS.length - 1; j >= 0; j--) {\n      for (let i = 0; i < HORIZONTAL_AXIS.length; i++) {\n        for (let k = 0; k < boardState.length; k++) {\n          const p = boardState[k];\n          const legalMove = ref.isValidMove(p.x, p.y, i, j, p.type, p.team, boardState, p.team);\n\n          if (legalMove) {\n            boardState = copy;\n            return false;\n          } else {\n            boardState = copy;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/boardChecks.ts"],"names":["PieceType","TeamType","VERTICAL_AXIS","HORIZONTAL_AXIS","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","isPawnNormalMove","Referee","Checker","isMyKingInCheck","team","boardState","increment","enemyTeam","WHITE","BLACK","myKing","find","p","type","KING","i","length","dx","x","dy","y","PAWN","NIGHT","BISHOP","ROOK","QUEEN","isCheckMate","ref","copy","deepCopy","j","k","legalMove","isValidMove"],"mappings":"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","sourcesContent":["import { PieceType, TeamType, Piece, VERTICAL_AXIS, HORIZONTAL_AXIS } from \"../constants\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove} from \"./pieceLogic\"\nimport { isPawnNormalMove } from \"./pawnLogic\"\nimport Referee from \"./Referee\"\n\nexport default class Checker{    \n    isMyKingInCheck(team : TeamType, boardState : Piece [], increment : number) : boolean {\n        const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        const myKing = boardState.find(p => p.team === team && p.type === PieceType.KING) \n        for (let i = 0; i < boardState.length; i++){\n            const p = boardState[i];\n            if (myKing && p.team === enemyTeam) {\n                const dx = myKing.x + increment - p.x\n                const dy = myKing.y - p.y\n                switch (p.type){\n                    case PieceType.PAWN : {\n                        if (isPawnNormalMove(p.x, p.y, myKing.x + increment, myKing.y, p.team, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.NIGHT : {\n                        if (isLegalNightMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.BISHOP : {\n                        if (isLegalBishopMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.ROOK : {\n                        if (isLegalRookMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.QUEEN : {\n                        if (isLegalQueenMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.KING : {\n                        if (isLegalKingMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                }\n\n            }\n        }\n        return false\n    }\n\n    isCheckMate(team : TeamType, boardState : Piece []): boolean{\n        const ref = new Referee()\n        const copy = this.deepCopy(boardState)\n        for (let j = VERTICAL_AXIS.length - 1; j >= 0; j-- ){\n            for (let i = 0; i < HORIZONTAL_AXIS.length; i++ ) {\n                for (let k = 0; k < boardState.length; k ++ ){\n                    const p = boardState[k]\n                    const legalMove = ref.isValidMove(p.x, p.y, i, j, p.type, p.team, boardState, p.team) \n                    if (legalMove){\n                        boardState = copy\n                        return false                       \n                    } else {\n                        boardState = copy\n                    }\n                    \n                }\n            \n            }\n        }        \n        return true\n\n    }\n\n}"]},"metadata":{},"sourceType":"module"}