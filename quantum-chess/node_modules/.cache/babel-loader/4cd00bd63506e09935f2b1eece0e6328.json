{"ast":null,"code":"import { PieceType, TeamType, AXIS } from \"../constants\";\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove, isCastleMove } from \"./pieceLogic\";\nimport Checker from './boardChecks';\nimport { CLICKED } from '../components/PopUp/PopUp';\nimport { executeMove } from \"./executeMove\";\nexport default class Referee {\n  enPassantPawnLogic(px, py, x, y, team, boardState) {}\n\n  promote(px, py, x, y, boardState) {\n    const piece = boardState.find(p => p.x === px && p.y === py);\n\n    if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.WHITE && y === 7) {\n      piece.promoted = true;\n    } else if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.BLACK && y === 0) {\n      piece.promoted = true;\n    } else if (piece) {\n      piece.promoted = false;\n    }\n  }\n\n  noCastle(px, py, boardState) {\n    const piece = boardState.find(p => p.x === px && p.y === py);\n\n    if (piece) {\n      piece.canCastle = false;\n    }\n  }\n\n  takePiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team);\n\n    if (piece) {\n      piece.taken = true;\n    }\n  }\n\n  endMove(px, py, x, y, team, boardState, valid, startignPawnMove, enPassant) {\n    if (!isFriendlyPiece(x, y, team, boardState)) {\n      this.promote(px, py, x, y, boardState);\n      this.noCastle(px, py, boardState);\n      enPassantPawnLogic(px, py, x, y, team, boardState);\n\n      if (startignPawnMove) {\n        setEnPassant(px, py, boardState);\n      } else if (enPassant) {\n        this.takePiece(x, py, team, boardState);\n        unsetEnPassant(boardState);\n      } else {\n        this.takePiece(x, y, team, boardState);\n        unsetEnPassant(boardState);\n      }\n\n      executeMove(px, py, x, y, boardState);\n      const checker = new Checker();\n      const inCheck = checker.isMyKingInCheck(team, boardState, 0);\n\n      if (inCheck) {\n        valid.value = false;\n      } else {\n        valid.value = true;\n      }\n    }\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState, activePlayer) {\n    if (!CLICKED) {\n      return false;\n    } // Only the active player can move\n\n\n    if (team !== activePlayer) {\n      return false;\n    } // A non-move is not a move\n\n\n    if (px === x && py === y) {\n      return false;\n    } // A move off the board is not a move\n\n\n    if (!(AXIS.includes(px) && AXIS.includes(py) && AXIS.includes(x) && AXIS.includes(y))) {\n      return false;\n    }\n\n    var valid = {\n      value: false\n    };\n    const dx = x - px;\n    const dy = y - py;\n\n    switch (type) {\n      case PieceType.PAWN:\n        {\n          if (isPawnStartingMove(px, py, x, y, team, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, true, false);\n          }\n\n          if (isPawnNormalMove(px, py, x, y, team, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false, false);\n          }\n\n          if (isEnPassant(px, py, x, y, team, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false, true);\n          }\n\n          break;\n        }\n\n      case PieceType.NIGHT:\n        {\n          if (isLegalNightMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false, false);\n          }\n\n          break;\n        }\n\n      case PieceType.BISHOP:\n        {\n          if (isLegalBishopMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false, false);\n          }\n\n          break;\n        }\n\n      case PieceType.ROOK:\n        {\n          if (isLegalRookMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false, false);\n          }\n\n          break;\n        }\n\n      case PieceType.QUEEN:\n        {\n          if (isLegalQueenMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false, false);\n          }\n\n          break;\n        }\n\n      case PieceType.KING:\n        {\n          if (isLegalKingMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false, false);\n          }\n\n          if (isCastleMove(px, py, dx, dy, activePlayer, boardState)) {\n            if (activePlayer === TeamType.WHITE) {\n              if (dx === -2) {\n                const piece = boardState.find(p => p.x === 0 && p.y === 0);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n\n              if (dx === 2) {\n                const piece = boardState.find(p => p.x === 7 && p.y === 0);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n            }\n\n            if (activePlayer === TeamType.BLACK) {\n              if (dx === -2) {\n                const piece = boardState.find(p => p.x === 0 && p.y === 7);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n\n              if (dx === 2) {\n                const piece = boardState.find(p => p.x === 7 && p.y === 7);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n            }\n\n            this.endMove(px, py, x, y, team, boardState, valid, false, false);\n          }\n\n          break;\n        }\n    }\n\n    console.log(valid.value);\n    return valid.value;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","TeamType","AXIS","isPawnNormalMove","isEnPassant","isPawnStartingMove","isFriendlyPiece","unsetEnPassant","setEnPassant","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","isCastleMove","Checker","CLICKED","executeMove","Referee","enPassantPawnLogic","px","py","x","y","team","boardState","promote","piece","find","p","type","PAWN","WHITE","promoted","BLACK","noCastle","canCastle","takePiece","taken","endMove","valid","startignPawnMove","enPassant","checker","inCheck","isMyKingInCheck","value","isValidMove","activePlayer","includes","dx","dy","NIGHT","BISHOP","ROOK","QUEEN","KING","teleported","console","log"],"mappings":"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","sourcesContent":["\nimport { PieceType, TeamType, Piece, AXIS, initialBoardState, } from \"../constants\"\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove, isCastleMove} from \"./pieceLogic\"\nimport Checker from './boardChecks'\nimport {CLICKED} from '../components/PopUp/PopUp'\nimport { executeMove } from \"./executeMove\"\n\nexport default class Referee{\n    \n    enPassantPawnLogic(px: number, py: number, x : number, y: number, team : TeamType, boardState : Piece []){\n        \n    }\n\n\n    promote(px: number, py: number, x : number, y: number, boardState : Piece []){\n        const piece = boardState.find(p => p.x === px && p.y === py)\n        if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.WHITE && y === 7){\n            piece.promoted = true\n        }   \n        else if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.BLACK && y === 0){\n            piece.promoted = true\n        } else if (piece){\n            piece.promoted = false\n        }\n    }    \n    noCastle(px: number, py: number, boardState : Piece []){\n        const piece = boardState.find(p => p.x === px && p.y === py)\n        if (piece){\n            piece.canCastle = false\n        }\n    }\n    takePiece(x : number, y: number, team : TeamType, boardState : Piece []){\n        const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team)  \n                if (piece) {\n            piece.taken = true\n        }\n    }\n\n    endMove(px : number, py : number, x : number, y: number, team : TeamType, \n            boardState : Piece [], valid : any, startignPawnMove: boolean, enPassant: boolean){\n        if (!isFriendlyPiece(x, y, team, boardState)){\n            this.promote(px, py, x, y, boardState)\n            this.noCastle(px, py, boardState)\n            enPassantPawnLogic(px, py, x, y, team, boardState)\n            if (startignPawnMove){\n                setEnPassant(px, py, boardState)\n            } else if (enPassant){\n                this.takePiece(x, py, team, boardState)\n                unsetEnPassant(boardState)\n            }\n            else{\n                this.takePiece(x, y, team, boardState)\n                unsetEnPassant(boardState)\n            }\n            executeMove(px, py, x, y, boardState)\n            const checker = new Checker();\n            const inCheck = checker.isMyKingInCheck(team, boardState, 0)\n            if (inCheck){\n                valid.value = false\n            }  else {\n                valid.value = true\n            }      \n        }\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, \n                team : TeamType, boardState : Piece [],  activePlayer : TeamType) : boolean{\n        if (!CLICKED){\n            return false\n        }  \n        // Only the active player can move\n        if (team !== activePlayer){\n            return false\n        }\n        // A non-move is not a move\n        if (px === x && py === y){\n            return false\n        }\n        // A move off the board is not a move\n        if (!(AXIS.includes(px) &&  AXIS.includes(py) &&  AXIS.includes(x) && AXIS.includes(y))){\n            return false\n        }\n        var valid = { value: false }\n        const dx = x - px\n        const dy = y - py\n\n        switch(type){\n            case PieceType.PAWN : {\n                if (isPawnStartingMove(px, py, x, y, team, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, true, false)\n                }\n                if (isPawnNormalMove(px, py, x, y, team, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false, false)\n                }\n                if (isEnPassant(px, py, x, y, team, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false, true)\n                }\n                break;\n            }\n            case PieceType.NIGHT : {\n                if (isLegalNightMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false, false)\n                }\n                break;\n            }\n            case PieceType.BISHOP : {\n                if (isLegalBishopMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false, false)\n                }\n                break;\n            }\n            case PieceType.ROOK : {\n                if (isLegalRookMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false, false)\n                }\n                break;\n            }\n            case PieceType.QUEEN : {\n                if (isLegalQueenMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false, false)\n                }\n                break;\n            }\n            case PieceType.KING : {\n                if (isLegalKingMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false, false)\n                }\n                if (isCastleMove(px, py, dx, dy, activePlayer, boardState)){\n                    if (activePlayer === TeamType.WHITE){\n                        if (dx === -2){ \n                            const piece = boardState.find(p => p.x === 0 && p.y === 0)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                        if (dx === 2){ \n                            const piece = boardState.find(p => p.x === 7 && p.y === 0)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                    }\n                    if (activePlayer === TeamType.BLACK){\n                        if (dx === -2){ \n                            const piece = boardState.find(p => p.x === 0 && p.y === 7)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                        if (dx === 2){ \n                            const piece = boardState.find(p => p.x === 7 && p.y === 7)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                    }\n                this.endMove(px, py, x, y, team, boardState, valid, false, false)\n                }\n            break;\n            }\n        }\n    console.log(valid.value)\n    return valid.value\n    }\n}"]},"metadata":{},"sourceType":"module"}