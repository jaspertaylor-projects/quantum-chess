{"ast":null,"code":"import { TAKEN_PIECES_BLACK, TAKEN_PIECES_WHITE } from \"../components/TakePiece/TakePiece\";\nimport { PieceType, TeamType } from \"../constants\";\nconst all_pieces = [PieceType.KING, PieceType.QUEEN, PieceType.ROOK, PieceType.BISHOP, PieceType.NIGHT, PieceType.PAWN];\nlet whiteNumPiece = [1, 1, 2, 2, 2, 8];\nlet blackNumPiece = [1, 1, 2, 2, 2, 8];\nlet count = 0;\n\nfunction collapsed(piece, boardState, team, level) {\n  let ids = [];\n\n  for (let i = 0; i < boardState.length; i++) {\n    if (boardState[i].SuperPiece.subPieces.length === level && boardState[i].SuperPiece.equals([...piece]) && boardState[i].SuperPiece.team === team) {\n      ids.push(i);\n    }\n  }\n\n  return ids;\n}\n\nfunction uncollapsed(piece, boardState, team) {\n  let ids = [];\n\n  for (let i = 0; i < boardState.length; i++) {\n    if (boardState[i].SuperPiece.subPieces.length > 1 && boardState[i].SuperPiece.subPieces.includes(piece) && boardState[i].SuperPiece.team === team) {\n      ids.push(i);\n    }\n  }\n\n  return ids;\n}\n\nfunction remove(piece, boardState, team, level) {\n  for (let p = 0; p < piece.length; p++) for (let i = 0; i < boardState.length; i++) {\n    if (boardState[i].SuperPiece.subPieces.length > level && boardState[i].SuperPiece.subPieces.includes(piece[p]) && boardState[i].SuperPiece.team === team) {\n      const id = boardState[i].SuperPiece.subPieces.indexOf(piece[p]);\n      boardState[i].SuperPiece.subPieces.splice(id, 1);\n      count = count + 1;\n    }\n  }\n}\n\nfunction first_level_collapse(boardState, team) {\n  if (team === TeamType.WHITE) {\n    for (let i = 0; i < all_pieces.length; i++) {\n      const ids = collapsed([all_pieces[i]], boardState, team, 1);\n\n      if (ids.length + TAKEN_PIECES_WHITE[i] === whiteNumPiece[i]) {\n        remove([all_pieces[i]], boardState, team, 1);\n      }\n    }\n  } else {\n    for (let i = 0; i < all_pieces.length; i++) {\n      const ids = collapsed([all_pieces[i]], boardState, team, 1);\n\n      if (ids.length + TAKEN_PIECES_BLACK[i] === blackNumPiece[i]) {\n        remove([all_pieces[i]], boardState, team, 1);\n      }\n    }\n  }\n}\n\nfunction second_level_collapse(boardState, team) {\n  if (team === TeamType.WHITE) {\n    for (let i = 0; i < all_pieces.length; i++) {\n      for (let j = i + 1; j < all_pieces.length; j++) {\n        const ids = collapsed([all_pieces[i], all_pieces[j]], boardState, team, 2);\n\n        if (ids.length + TAKEN_PIECES_WHITE[i] + TAKEN_PIECES_WHITE[j] === whiteNumPiece[i] + whiteNumPiece[j]) {\n          remove([all_pieces[i], all_pieces[j]], boardState, team, 2);\n        }\n      }\n    }\n  } else {\n    for (let i = 0; i < all_pieces.length; i++) {\n      for (let j = i + 1; j < all_pieces.length; j++) {\n        const ids = collapsed([all_pieces[i], all_pieces[j]], boardState, team, 2);\n\n        if (ids.length + TAKEN_PIECES_BLACK[i] + TAKEN_PIECES_BLACK[j] === blackNumPiece[i] + blackNumPiece[j]) {\n          remove([all_pieces[i], all_pieces[j]], boardState, team, 2);\n        }\n      }\n    }\n  }\n}\n\nexport default function fullReduction(boardState) {\n  let somethingChanged = true;\n\n  while (somethingChanged === true) {\n    first_level_collapse(boardState, TeamType.WHITE);\n    first_level_collapse(boardState, TeamType.BLACK);\n    second_level_collapse(boardState, TeamType.WHITE);\n    second_level_collapse(boardState, TeamType.BLACK);\n    somethingChanged = count !== 0;\n    count = 0;\n  }\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/QuantumChess/quantum-chess/src/Referee/stateReducer.ts"],"names":["TAKEN_PIECES_BLACK","TAKEN_PIECES_WHITE","PieceType","TeamType","all_pieces","KING","QUEEN","ROOK","BISHOP","NIGHT","PAWN","whiteNumPiece","blackNumPiece","count","collapsed","piece","boardState","team","level","ids","i","length","SuperPiece","subPieces","equals","push","uncollapsed","includes","remove","p","id","indexOf","splice","first_level_collapse","WHITE","second_level_collapse","j","fullReduction","somethingChanged","BLACK"],"mappings":"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","sourcesContent":["import { TAKEN_PIECES_BLACK, TAKEN_PIECES_WHITE } from \"../components/TakePiece/TakePiece\";\nimport { Piece, PieceType, TeamType } from \"../constants\";\n\n\nconst all_pieces = [PieceType.KING, PieceType.QUEEN, PieceType.ROOK, PieceType.BISHOP, PieceType.NIGHT, PieceType.PAWN]\n\n\nlet whiteNumPiece : number [] = [1, 1, 2, 2, 2, 8]\nlet blackNumPiece : number [] = [1, 1, 2, 2, 2, 8]\nlet count : number = 0\n\n\n\nfunction collapsed(piece : PieceType [], boardState : Piece [], team : TeamType, level : number) : number [] {\n    let ids : number [] = []\n    for(let i = 0; i < boardState.length; i ++){\n        if (boardState[i].SuperPiece.subPieces.length === level && \n            boardState[i].SuperPiece.equals([...piece]) &&\n            boardState[i].SuperPiece.team === team){\n            ids.push(i)\n        }\n    }\n    return ids\n}\n\nfunction uncollapsed(piece : PieceType, boardState : Piece [], team : TeamType) : number [] {\n    let ids : number [] = []\n    for(let i = 0; i < boardState.length; i ++){\n        if (boardState[i].SuperPiece.subPieces.length > 1 && \n            boardState[i].SuperPiece.subPieces.includes(piece) &&\n            boardState[i].SuperPiece.team === team){\n            ids.push(i)\n        }\n    }\n    return ids\n}\n\nfunction remove(piece : PieceType [], boardState : Piece [], team : TeamType, level : number){\n    for (let p = 0; p < piece.length; p++)\n        for(let i = 0; i < boardState.length; i ++){\n            if (boardState[i].SuperPiece.subPieces.length > level && \n                boardState[i].SuperPiece.subPieces.includes(piece[p]) && \n                boardState[i].SuperPiece.team === team){\n                const id = boardState[i].SuperPiece.subPieces.indexOf(piece[p])\n                boardState[i].SuperPiece.subPieces.splice(id, 1)\n                count = count + 1\n            }\n        }\n    }\n\nfunction first_level_collapse(boardState : Piece [], team : TeamType) {\n    if (team === TeamType.WHITE){\n        for (let i =  0; i < all_pieces.length; i++){\n            const ids = collapsed([all_pieces[i]], boardState, team, 1)\n            if (ids.length + TAKEN_PIECES_WHITE[i] === whiteNumPiece[i]){\n                remove([all_pieces[i]], boardState, team, 1)               \n            }\n        }\n    }\n    else {\n        for (let i =  0; i < all_pieces.length; i++){\n            const ids = collapsed([all_pieces[i]], boardState, team, 1)\n            if (ids.length + TAKEN_PIECES_BLACK[i] === blackNumPiece[i]){\n                remove([all_pieces[i]], boardState, team, 1)\n            }\n        }\n    }\n}\n\nfunction second_level_collapse(boardState : Piece [], team : TeamType) {\n    if (team === TeamType.WHITE){\n        for (let i =  0; i < all_pieces.length; i++){\n            for(let j = i + 1; j < all_pieces.length; j ++){\n                const ids = collapsed([all_pieces[i], all_pieces[j]], boardState, team, 2)\n                if (ids.length + TAKEN_PIECES_WHITE[i] + TAKEN_PIECES_WHITE[j] === whiteNumPiece[i] + whiteNumPiece[j]){\n                    remove([all_pieces[i], all_pieces[j]], boardState, team, 2)               \n                }\n            }\n        }\n    }\n    else {\n        for (let i =  0; i < all_pieces.length; i++){\n            for(let j = i + 1; j < all_pieces.length; j ++){\n                const ids = collapsed([all_pieces[i], all_pieces[j]], boardState, team, 2)\n                if (ids.length + TAKEN_PIECES_BLACK[i] + TAKEN_PIECES_BLACK[j] === blackNumPiece[i] + blackNumPiece[j]){\n                    remove([all_pieces[i], all_pieces[j]], boardState, team, 2)               \n                }\n            }\n        }\n    }\n}\n\nexport default function fullReduction(boardState : Piece []){\n    let somethingChanged = true\n    while (somethingChanged === true){\n        first_level_collapse(boardState, TeamType.WHITE)\n        first_level_collapse(boardState, TeamType.BLACK)\n        second_level_collapse(boardState, TeamType.WHITE)\n        second_level_collapse(boardState, TeamType.BLACK)\n        somethingChanged = count !== 0\n        count = 0\n    }\n}"]},"metadata":{},"sourceType":"module"}