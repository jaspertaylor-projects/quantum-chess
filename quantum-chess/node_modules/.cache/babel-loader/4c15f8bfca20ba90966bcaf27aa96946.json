{"ast":null,"code":"import { PieceType, TeamType } from \"../constants\";\nimport { setEnPassant, checkEnPassant, unsetEnPassant, pawnIsBlockaded } from \"./pawnHelper\";\nexport default class Referee {\n  diagonalPathClear(px, py, dx, dy, boardState) {\n    for (let i = 1; i < Math.abs(dx) - 1; i++) {\n      const obstructingPiece = boardState.find(p => p.x === x && p.y === y);\n\n      if (obstructingPiece) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  takePiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team);\n\n    if (piece) {\n      piece.taken = true;\n    }\n  }\n\n  isFriendlyPiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y);\n    const occupied = piece && piece.team === team ? true : false;\n    return occupied;\n  }\n\n  endMove(x, y, team, boardState, valid) {\n    if (!this.isFriendlyPiece(x, y, team, boardState)) {\n      this.takePiece(x, y, team, boardState);\n      unsetEnPassant(boardState);\n      valid.value = true;\n    }\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState, activePlayer) {\n    if (team !== activePlayer) {\n      return false;\n    }\n\n    if (px === x && py === y) {\n      return false;\n    }\n\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    var valid = {\n      value: false\n    }; //PAWN LOGIC \n    //May want to put each piece in different function\n\n    if (type === PieceType.PAWN) {\n      const startingRow = team === TeamType.WHITE ? 1 : 6;\n      const increment = team === TeamType.WHITE ? 1 : -1;\n      console.log(px, py, x, y, increment); // Moving Logic\n\n      if (py === startingRow && px === x && py === y - 2 * increment) {\n        if (!pawnIsBlockaded(x, y, boardState) && !pawnIsBlockaded(x, y - increment, boardState)) {\n          setEnPassant(px, py, boardState);\n          return true;\n        }\n      }\n\n      if (py === y - increment && px === x) {\n        if (!pawnIsBlockaded(x, y, boardState)) {\n          unsetEnPassant(boardState);\n          return true;\n        }\n      } // ATTACK LOGIC\n\n\n      if ((x === px + 1 || x === px - 1) && py === y - increment && this.isFriendlyPiece(x, y, enemyTeam, boardState)) {\n        this.endMove(x, y, team, boardState, valid);\n      }\n\n      if ((x === px + 1 || x === px - 1) && py === y - increment && this.isFriendlyPiece(x, py, enemyTeam, boardState)) {\n        if (checkEnPassant(x, py, boardState)) {\n          this.endMove(x, py, team, boardState, valid);\n        }\n      }\n    } // NIGHT LOGIC \n\n\n    if (type === PieceType.NIGHT) {\n      if ((px === x + 1 || px === x - 1) && (py === y + 2 || py === y - 2) || (py === y + 1 || py === y - 1) && (px === x + 2 || px === x - 2)) {\n        this.endMove(x, y, team, boardState, valid);\n      }\n    } // BISHOP LOGIC\n\n\n    if (type === PieceType.BISHOP) {\n      const dx = x - px;\n      const dy = x - py;\n\n      if (Math.abs(dx) === Math.abs(dy)) {\n        this.diagonalPathClear(px, py, dx, dy, boardState);\n        this.endMove(x, y, team, boardState, valid);\n      }\n    }\n\n    return valid.value;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","TeamType","setEnPassant","checkEnPassant","unsetEnPassant","pawnIsBlockaded","Referee","diagonalPathClear","px","py","dx","dy","boardState","i","Math","abs","obstructingPiece","find","p","x","y","takePiece","team","piece","taken","isFriendlyPiece","occupied","endMove","valid","value","isValidMove","type","activePlayer","enemyTeam","WHITE","BLACK","PAWN","startingRow","increment","console","log","NIGHT","BISHOP"],"mappings":"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","sourcesContent":["import { PieceType, TeamType, Piece } from \"../constants\"\nimport { setEnPassant , checkEnPassant, unsetEnPassant, pawnIsBlockaded} from \"./pawnHelper\"\n\nexport default class Referee{\n    diagonalPathClear(px : number, py : number, dx : number, dy : number, boardState : Piece[]) : boolean {\n        for (let i = 1; i < Math.abs(dx) -1; i ++){\n            const obstructingPiece = boardState.find(p => p.x === x && p.y === y) \n            if (obstructingPiece){\n                return false\n            }\n        }\n        return true\n    }\n    takePiece(x : number, y: number, team : TeamType, boardState : Piece []){\n        const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team)  \n        if (piece) {\n            piece.taken = true\n        }\n    }\n    isFriendlyPiece(x : number, y: number, team : TeamType, boardState : Piece []): boolean {\n        const piece = boardState.find(p => p.x === x && p.y === y)\n        const occupied =  piece && piece.team === team ? true : false\n        return occupied\n    }\n\n    endMove(x : number, y: number, team : TeamType, boardState : Piece [], valid : any){\n        if (!this.isFriendlyPiece(x, y, team, boardState)){\n            this.takePiece(x, y, team, boardState)\n            unsetEnPassant(boardState)\n            valid.value = true          \n        }\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, \n                team : TeamType, boardState : Piece [], activePlayer : TeamType){\n        if (team !== activePlayer){\n            return false\n        }\n        if (px === x && py === y){\n            return false\n        }\n        const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        var valid = { value: false }\n        //PAWN LOGIC \n        //May want to put each piece in different function\n        if (type === PieceType.PAWN){\n            const startingRow = team === TeamType.WHITE ? 1 : 6\n            const increment = team === TeamType.WHITE ? 1 : - 1\n            console.log(px, py, x, y, increment)\n            // Moving Logic\n            if ((py === startingRow && px === x) && (py === y - 2 * increment)){\n                if (!pawnIsBlockaded(x, y, boardState) && !pawnIsBlockaded(x, y - increment, boardState)){\n                    setEnPassant(px, py, boardState)\n                    return true\n                }\n            } \n            if (py === y - increment && px === x){\n                if (!pawnIsBlockaded(x, y, boardState)){\n                    unsetEnPassant(boardState)\n                    return true;\n                }\n            } \n            // ATTACK LOGIC\n            if ((x === px + 1 || x === px -1) && (py === y - increment) && this.isFriendlyPiece(x, y, enemyTeam, boardState)) {\n                this.endMove(x, y, team, boardState, valid)\n            }\n            if ((x === px + 1 || x === px -1) && (py === y - increment) && this.isFriendlyPiece(x, py, enemyTeam, boardState)) {\n                if (checkEnPassant(x, py, boardState)){\n                    this.endMove(x, py, team, boardState, valid)\n                }\n            }\n        }\n        // NIGHT LOGIC \n        if (type === PieceType.NIGHT){\n            if (((px === x + 1 || px === x - 1) &&  (py === y + 2 || py === y - 2)) ||\n                ((py === y + 1 || py === y - 1) &&  (px === x + 2 || px === x - 2))){\n                    this.endMove(x, y, team, boardState, valid)\n            }\n        }\n        // BISHOP LOGIC\n        if (type === PieceType.BISHOP){\n            const dx = x - px\n            const dy = x - py\n            if (Math.abs(dx) === Math.abs(dy)){\n                this.diagonalPathClear(px, py, dx, dy, boardState)\n                this.endMove(x, y, team, boardState, valid)\n            }\n        }\n\n        return valid.value\n    }\n}"]},"metadata":{},"sourceType":"module"}