{"ast":null,"code":"import { PieceType, TeamType, VERTICAL_AXIS, HORIZONTAL_AXIS } from \"../constants\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove } from \"./pieceLogic\";\nimport { isPawnNormalMove } from \"./pawnLogic\";\nimport { CLICKED } from '../components/Promotion/Promotion';\nimport Referee from \"./Referee\";\nexport default class Checker {\n  constructor(boardState) {\n    this.oldBoardState = void 0;\n    this.oldBoardState = boardState;\n  }\n\n  deepCopy(boardState) {\n    if (this.oldBoardState) {\n      for (let i = 0; i < this.oldBoardState.length; i++) {\n        const p = this.oldBoardState[i];\n        boardState[i] = {\n          image: p.image,\n          x: p.x,\n          y: p.y,\n          type: p.type,\n          team: p.team,\n          enPassantable: p.enPassantable,\n          canCastle: p.canCastle,\n          taken: false,\n          promoted: false\n        };\n      }\n    }\n  }\n\n  isMyKingInCheck(team, boardState, increment) {\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    const myKing = boardState.find(p => p.team === team && p.type === PieceType.KING);\n\n    for (let i = 0; i < boardState.length; i++) {\n      const p = boardState[i];\n\n      if (myKing && p.team === enemyTeam) {\n        const dx = myKing.x + increment - p.x;\n        const dy = myKing.y - p.y;\n\n        switch (p.type) {\n          case PieceType.PAWN:\n            {\n              if (isPawnNormalMove(p.x, p.y, myKing.x + increment, myKing.y, p.team, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.NIGHT:\n            {\n              if (isLegalNightMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.BISHOP:\n            {\n              if (isLegalBishopMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.ROOK:\n            {\n              if (isLegalRookMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.QUEEN:\n            {\n              if (isLegalQueenMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.KING:\n            {\n              if (isLegalKingMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isCheckMate(team, boardState) {\n    const ref = new Referee();\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n\n    for (let j = VERTICAL_AXIS.length - 1; j >= 0; j--) {\n      for (let i = 0; i < HORIZONTAL_AXIS.length; i++) {\n        for (let k = 0; k < boardState.length; k++) {\n          const p = boardState[k];\n\n          if (p.team === enemyTeam) {\n            const legalMove = ref.isValidMove(p.x, p.y, i, j, p.type, enemyTeam, boardState, enemyTeam);\n            this.deepCopy(boardState);\n\n            if (legalMove || !CLICKED) {\n              return false;\n            }\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/Referee/Checker.ts"],"names":["PieceType","TeamType","VERTICAL_AXIS","HORIZONTAL_AXIS","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","isPawnNormalMove","CLICKED","Referee","Checker","constructor","boardState","oldBoardState","deepCopy","i","length","p","image","x","y","type","team","enPassantable","canCastle","taken","promoted","isMyKingInCheck","increment","enemyTeam","WHITE","BLACK","myKing","find","KING","dx","dy","PAWN","NIGHT","BISHOP","ROOK","QUEEN","isCheckMate","ref","j","k","legalMove","isValidMove"],"mappings":"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","sourcesContent":["import { PieceType, TeamType, Piece, VERTICAL_AXIS, HORIZONTAL_AXIS } from \"../constants\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove} from \"./pieceLogic\"\nimport { isPawnNormalMove } from \"./pawnLogic\"\nimport { CLICKED } from '../components/Promotion/Promotion'\nimport Referee from \"./Referee\"\n\nexport default class Checker {   \n    oldBoardState : Piece [] | null;\n\n    constructor (boardState: Piece [] | null){\n        this.oldBoardState = boardState\n    }\n\n\n    deepCopy(boardState : Piece []) {\n        if (this.oldBoardState){\n            for (let i = 0; i < this.oldBoardState.length; i ++){\n                const p = this.oldBoardState[i]\n                boardState[i] = {image : p.image, x : p.x, y : p.y, type : p.type, team : p.team,\n                                enPassantable : p.enPassantable, canCastle : p.canCastle, taken : false,\n                                promoted : false}\n            }\n        }\n    } \n\n    isMyKingInCheck(team : TeamType, boardState : Piece [], increment : number) : boolean {\n        const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        const myKing = boardState.find(p => p.team === team && p.type === PieceType.KING) \n        for (let i = 0; i < boardState.length; i++){\n            const p = boardState[i];\n            if (myKing && p.team === enemyTeam) {\n                const dx = myKing.x + increment - p.x\n                const dy = myKing.y - p.y\n                switch (p.type){\n                    case PieceType.PAWN : {\n                        if (isPawnNormalMove(p.x, p.y, myKing.x + increment, myKing.y, p.team, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.NIGHT : {\n                        if (isLegalNightMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.BISHOP : {\n                        if (isLegalBishopMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.ROOK : {\n                        if (isLegalRookMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.QUEEN : {\n                        if (isLegalQueenMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.KING : {\n                        if (isLegalKingMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                }\n\n            }\n        }\n        return false\n    }\n\n    isCheckMate(team : TeamType, boardState : Piece []): boolean{\n        const ref = new Referee()\n        const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        for (let j = VERTICAL_AXIS.length - 1; j >= 0; j-- ){\n            for (let i = 0; i < HORIZONTAL_AXIS.length; i++ ) {\n                for (let k = 0; k < boardState.length; k ++ ){\n                    const p = boardState[k] \n                    if (p.team === enemyTeam)  {               \n                        const legalMove = ref.isValidMove(p.x, p.y, i, j, p.type, enemyTeam, boardState, enemyTeam)\n                        this.deepCopy(boardState)\n                        if (legalMove || !CLICKED){\n                            return false                       \n                        } \n                    }\n                }\n            \n            }\n        }        \n        return true\n\n    }\n\n}"]},"metadata":{},"sourceType":"module"}