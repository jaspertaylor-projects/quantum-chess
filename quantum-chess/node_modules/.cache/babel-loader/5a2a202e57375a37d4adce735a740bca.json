{"ast":null,"code":"import { PieceType, TeamType, GameState } from \"../constants\";\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove, isCastleMove } from \"./pieceLogic\";\nexport default class Referee {\n  takePiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team);\n\n    if (piece) {\n      piece.taken = true;\n    }\n  }\n\n  endMove(x, y, team, boardState, valid, gs) {\n    if (!isFriendlyPiece(x, y, team, boardState)) {\n      this.takePiece(x, y, team, boardState);\n      unsetEnPassant(boardState);\n      valid.value = true;\n    } else {\n      gs = [];\n    }\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState, activePlayer, gameState) {\n    // Only the active player can move\n    if (team !== activePlayer) {\n      return [false, gameState];\n    } // A non-move is not a move\n\n\n    if (px === x && py === y) {\n      return [false, gameState];\n    } // A move off the board is not a move\n\n\n    if (x < 0 || y < 0 || x > 7 || y > 7) {\n      return [false, gameState];\n    }\n\n    var valid = {\n      value: false\n    };\n    let gs = [];\n    const dx = x - px;\n    const dy = y - py;\n\n    switch (type) {\n      case PieceType.PAWN:\n        {\n          if (isPawnStartingMove(px, py, x, y, team, boardState)) {\n            setEnPassant(px, py, boardState);\n            return [true, gameState];\n          }\n\n          if (isPawnNormalMove(px, py, x, y, team, boardState)) {\n            this.endMove(x, y, team, boardState, valid, gs);\n          }\n\n          if (isEnPassant(px, py, x, y, team, boardState)) {\n            this.endMove(x, py, team, boardState, valid, gs);\n          }\n\n          break;\n        }\n\n      case PieceType.NIGHT:\n        {\n          if (isLegalNightMove(px, py, dx, dy, boardState)) {\n            this.endMove(x, y, team, boardState, valid, gs);\n          }\n\n          break;\n        }\n\n      case PieceType.BISHOP:\n        {\n          if (isLegalBishopMove(px, py, dx, dy, boardState)) {\n            this.endMove(x, y, team, boardState, valid, gs);\n          }\n\n          break;\n        }\n\n      case PieceType.ROOK:\n        {\n          if (isLegalRookMove(px, py, dx, dy, boardState)) {\n            if (activePlayer === TeamType.WHITE && px === 0) {\n              gs.push(GameState.CAN_WHITE_CASTLE_LEFT);\n            }\n\n            if (activePlayer === TeamType.BLACK && px === 0) {\n              gs.push(GameState.CAN_BLACK_CASTLE_LEFT);\n            }\n\n            if (activePlayer === TeamType.WHITE && px === 7) {\n              gs.push(GameState.CAN_WHITE_CASTLE_RIGHT);\n            }\n\n            if (activePlayer === TeamType.BLACK && px === 7) {\n              gs.push(GameState.CAN_BLACK_CASTLE_RIGHT);\n            }\n\n            this.endMove(x, y, team, boardState, valid, gs);\n          }\n\n          break;\n        }\n\n      case PieceType.QUEEN:\n        {\n          if (isLegalQueenMove(px, py, dx, dy, boardState)) {\n            this.endMove(x, y, team, boardState, valid, gs);\n          }\n\n          break;\n        }\n\n      case PieceType.KING:\n        {\n          if (isLegalKingMove(px, py, dx, dy, boardState)) {\n            if (activePlayer === TeamType.WHITE && py === 0) {\n              gs.push(GameState.CAN_WHITE_CASTLE_LEFT);\n              gs.push(GameState.CAN_WHITE_CASTLE_RIGHT);\n            }\n\n            if (activePlayer === TeamType.BLACK && py === 7) {\n              gs.push(GameState.CAN_BLACK_CASTLE_LEFT);\n              gs.push(GameState.CAN_BLACK_CASTLE_RIGHT);\n            }\n\n            this.endMove(x, y, team, boardState, valid, gs);\n          }\n\n          if (isCastleMove(px, py, dx, dy, activePlayer, boardState, gameState)) {\n            if (activePlayer === TeamType.WHITE) {\n              gs.push(GameState.CAN_WHITE_CASTLE_LEFT);\n              gs.push(GameState.CAN_WHITE_CASTLE_RIGHT);\n\n              if (dx === -2) {\n                const piece = boardState.find(p => p.x === 0 && p.y === 0);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n\n              if (dx === 2) {\n                const piece = boardState.find(p => p.x === 7 && p.y === 0);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n            }\n\n            if (activePlayer === TeamType.BLACK) {\n              gs.push(GameState.CAN_BLACK_CASTLE_LEFT);\n              gs.push(GameState.CAN_BLACK_CASTLE_RIGHT);\n\n              if (dx === -2) {\n                const piece = boardState.find(p => p.x === 0 && p.y === 7);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n\n              if (dx === 2) {\n                const piece = boardState.find(p => p.x === 7 && p.y === 7);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n            }\n\n            break;\n          }\n        }\n    }\n\n    return [valid.value, gs];\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","TeamType","GameState","isPawnNormalMove","isEnPassant","isPawnStartingMove","isFriendlyPiece","unsetEnPassant","setEnPassant","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","isCastleMove","Referee","takePiece","x","y","team","boardState","piece","find","p","taken","endMove","valid","gs","value","isValidMove","px","py","type","activePlayer","gameState","dx","dy","PAWN","NIGHT","BISHOP","ROOK","WHITE","push","CAN_WHITE_CASTLE_LEFT","BLACK","CAN_BLACK_CASTLE_LEFT","CAN_WHITE_CASTLE_RIGHT","CAN_BLACK_CASTLE_RIGHT","QUEEN","KING","teleported"],"mappings":"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","sourcesContent":["import { PieceType, TeamType, Piece, GameState } from \"../constants\"\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove, isCastleMove} from \"./pieceLogic\"\n\nexport default class Referee{\n    takePiece(x : number, y: number, team : TeamType, boardState : Piece []){\n        const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team)  \n        if (piece) {\n            piece.taken = true\n        }\n    }\n    endMove(x : number, y: number, team : TeamType, boardState : Piece [], \n            valid : any, gs : GameState []){\n        if (!isFriendlyPiece(x, y, team, boardState)){\n            this.takePiece(x, y, team, boardState)\n            unsetEnPassant(boardState)\n            valid.value = true          \n        } else{\n            gs = [ ]\n        }\n\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, \n                team : TeamType, boardState : Piece [], activePlayer : TeamType, \n                gameState : GameState []) : [boolean, GameState []]{\n        // Only the active player can move\n        if (team !== activePlayer){\n            return [false, gameState]\n        }\n        // A non-move is not a move\n        if (px === x && py === y){\n            return [false, gameState]\n        }\n        // A move off the board is not a move\n        if (x < 0 || y < 0 || x > 7 || y > 7){\n            return [false, gameState]\n        }\n        var valid = { value: false }\n        let gs : GameState [] = []\n        const dx = x - px\n        const dy = y - py\n\n        switch(type){\n            case PieceType.PAWN : {\n                if (isPawnStartingMove(px, py, x, y, team, boardState)){\n                    setEnPassant(px, py, boardState)\n                    return [true, gameState]\n                }\n                if (isPawnNormalMove(px, py, x, y, team, boardState)){\n                    this.endMove(x, y, team, boardState, valid, gs)\n                }\n                if (isEnPassant(px, py, x, y, team, boardState)){\n                    this.endMove(x, py, team, boardState, valid, gs)\n                }\n                break;\n            }\n            case PieceType.NIGHT : {\n                if (isLegalNightMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid, gs)\n                }\n                break;\n            }\n            case PieceType.BISHOP : {\n                if (isLegalBishopMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid, gs)\n                }\n                break;\n            }\n            case PieceType.ROOK : {\n                if (isLegalRookMove(px, py, dx, dy, boardState)){\n                    if (activePlayer === TeamType.WHITE && px === 0){\n                        gs.push(GameState.CAN_WHITE_CASTLE_LEFT)\n                    }\n                    if (activePlayer === TeamType.BLACK && px === 0){\n                        gs.push(GameState.CAN_BLACK_CASTLE_LEFT)\n                    }\n                    if (activePlayer === TeamType.WHITE && px === 7){\n                        gs.push(GameState.CAN_WHITE_CASTLE_RIGHT)\n                    }\n                    if (activePlayer === TeamType.BLACK && px === 7){\n                        gs.push(GameState.CAN_BLACK_CASTLE_RIGHT)\n                    }\n                    this.endMove(x, y, team, boardState, valid, gs)\n                }\n                break;\n            }\n            case PieceType.QUEEN : {\n                if (isLegalQueenMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid, gs)\n                }\n                break;\n            }\n            case PieceType.KING : {\n                if (isLegalKingMove(px, py, dx, dy, boardState)){\n                    if (activePlayer === TeamType.WHITE && py === 0){\n                        gs.push(GameState.CAN_WHITE_CASTLE_LEFT)\n                        gs.push(GameState.CAN_WHITE_CASTLE_RIGHT)\n                    }\n                    if (activePlayer === TeamType.BLACK && py === 7){\n                        gs.push(GameState.CAN_BLACK_CASTLE_LEFT)\n                        gs.push(GameState.CAN_BLACK_CASTLE_RIGHT)\n                    }\n                    this.endMove(x, y, team, boardState, valid, gs)\n                }\n                if (isCastleMove(px, py, dx, dy, activePlayer, boardState, gameState)){\n                    if (activePlayer === TeamType.WHITE){\n                        gs.push(GameState.CAN_WHITE_CASTLE_LEFT)\n                        gs.push(GameState.CAN_WHITE_CASTLE_RIGHT)\n                        if (dx === -2){ \n                            const piece = boardState.find(p => p.x === 0 && p.y === 0)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                        if (dx === 2){ \n                            const piece = boardState.find(p => p.x === 7 && p.y === 0)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                    }\n                    if (activePlayer === TeamType.BLACK){\n                        gs.push(GameState.CAN_BLACK_CASTLE_LEFT)\n                        gs.push(GameState.CAN_BLACK_CASTLE_RIGHT)\n                        if (dx === -2){ \n                            const piece = boardState.find(p => p.x === 0 && p.y === 7)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                        if (dx === 2){ \n                            const piece = boardState.find(p => p.x === 7 && p.y === 7)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                    }\n                break;\n                }\n            }\n        }\n    return [valid.value, gs]\n    }\n}"]},"metadata":{},"sourceType":"module"}