{"ast":null,"code":"import { PieceType, TeamType } from \"../constants\";\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove } from \"./pieceLogic\";\nexport default class Referee {\n  takePiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team);\n\n    if (piece) {\n      piece.taken = true;\n    }\n  }\n\n  endMove(x, y, team, boardState, valid) {\n    if (!isFriendlyPiece(x, y, team, boardState)) {\n      this.takePiece(x, y, team, boardState);\n      unsetEnPassant(boardState);\n      valid.value = true;\n    }\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState, activePlayer) {\n    // Only the active player can move\n    if (team !== activePlayer) {\n      return false;\n    } // A non-move is not a move\n\n\n    if (px === x && py === y) {\n      return false;\n    }\n\n    var valid = {\n      value: false\n    };\n    const dx = x - px;\n    const dy = y - py;\n\n    switch (type) {\n      case PieceType.PAWN:\n        {\n          const increment = team === TeamType.WHITE ? 1 : -1;\n\n          if (isPawnStartingMove(px, py, x, y, team, boardState, increment)) {\n            setEnPassant(px, py, boardState);\n            return true;\n          }\n\n          if (isPawnNormalMove(px, py, x, y, team, boardState, increment)) {\n            this.endMove(x, y, team, boardState, valid);\n            break;\n          }\n\n          if (isEnPassant(px, py, x, y, team, boardState, increment)) {\n            this.endMove(x, py, team, boardState, valid);\n            break;\n          }\n\n          break;\n        }\n\n      case PieceType.NIGHT:\n        {\n          if (isLegalNightMove(px, py, dx, dy, boardState)) {\n            this.endMove(x, y, team, boardState, valid);\n            break;\n          }\n\n          break;\n        }\n\n      case PieceType.BISHOP:\n        {\n          if (isLegalBishopMove(px, py, dx, dy, boardState)) {\n            this.endMove(x, y, team, boardState, valid);\n            break;\n          }\n\n          break;\n        }\n\n      case PieceType.ROOK:\n        {\n          if (isLegalRookMove(px, py, dx, dy, boardState)) {\n            this.endMove(x, y, team, boardState, valid);\n            break;\n          }\n\n          break;\n        }\n\n      case PieceType.QUEEN:\n        {\n          if (isLegalQueenMove(px, py, dx, dy, boardState)) {\n            this.endMove(x, y, team, boardState, valid);\n            break;\n          }\n\n          break;\n        }\n\n      case PieceType.KING:\n        {\n          if (isLegalKingMove(px, py, dx, dy, boardState)) {\n            this.endMove(x, y, team, boardState, valid);\n            break;\n          }\n\n          break;\n        }\n    }\n\n    return valid.value;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","TeamType","isPawnNormalMove","isEnPassant","isPawnStartingMove","isFriendlyPiece","unsetEnPassant","setEnPassant","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","Referee","takePiece","x","y","team","boardState","piece","find","p","taken","endMove","valid","value","isValidMove","px","py","type","activePlayer","dx","dy","PAWN","increment","WHITE","NIGHT","BISHOP","ROOK","QUEEN","KING"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAA2C,cAA3C;AACA,SAASC,gBAAT,EAA2BC,WAA3B,EAAwCC,kBAAxC,EAA4DC,eAA5D,EAA6EC,cAA7E,EAA6FC,YAA7F,QAAiH,aAAjH;AACA,SAASC,iBAAT,EAA4BC,eAA5B,EAA6CC,gBAA7C,EAA+DC,eAA/D,EAAgFC,gBAAhF,QAAuG,cAAvG;AAEA,eAAe,MAAMC,OAAN,CAAa;AACxBC,EAAAA,SAAS,CAACC,CAAD,EAAaC,CAAb,EAAwBC,IAAxB,EAAyCC,UAAzC,EAA+D;AACpE,UAAMC,KAAK,GAAGD,UAAU,CAACE,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACN,CAAF,KAAQA,CAAR,IAAaM,CAAC,CAACL,CAAF,KAAQA,CAArB,IAA0BK,CAAC,CAACJ,IAAF,KAAWA,IAA1D,CAAd;;AACA,QAAIE,KAAJ,EAAW;AACPA,MAAAA,KAAK,CAACG,KAAN,GAAc,IAAd;AACH;AACJ;;AACDC,EAAAA,OAAO,CAACR,CAAD,EAAaC,CAAb,EAAwBC,IAAxB,EAAyCC,UAAzC,EAAgEM,KAAhE,EAA4E;AAC/E,QAAI,CAACnB,eAAe,CAACU,CAAD,EAAIC,CAAJ,EAAOC,IAAP,EAAaC,UAAb,CAApB,EAA6C;AACzC,WAAKJ,SAAL,CAAeC,CAAf,EAAkBC,CAAlB,EAAqBC,IAArB,EAA2BC,UAA3B;AACAZ,MAAAA,cAAc,CAACY,UAAD,CAAd;AACAM,MAAAA,KAAK,CAACC,KAAN,GAAc,IAAd;AACH;AACJ;;AACDC,EAAAA,WAAW,CAACC,EAAD,EAAcC,EAAd,EAA2Bb,CAA3B,EAAuCC,CAAvC,EAAmDa,IAAnD,EACCZ,IADD,EACkBC,UADlB,EACyCY,YADzC,EACiE;AACxE;AACA,QAAIb,IAAI,KAAKa,YAAb,EAA0B;AACtB,aAAO,KAAP;AACH,KAJuE,CAKxE;;;AACA,QAAIH,EAAE,KAAKZ,CAAP,IAAYa,EAAE,KAAKZ,CAAvB,EAAyB;AACrB,aAAO,KAAP;AACH;;AACD,QAAIQ,KAAK,GAAG;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAZ;AACA,UAAMM,EAAE,GAAGhB,CAAC,GAAGY,EAAf;AACA,UAAMK,EAAE,GAAGhB,CAAC,GAAGY,EAAf;;AAEA,YAAOC,IAAP;AACI,WAAK7B,SAAS,CAACiC,IAAf;AAAsB;AAClB,gBAAMC,SAAS,GAAGjB,IAAI,KAAKhB,QAAQ,CAACkC,KAAlB,GAA0B,CAA1B,GAA8B,CAAE,CAAlD;;AACA,cAAI/B,kBAAkB,CAACuB,EAAD,EAAKC,EAAL,EAASb,CAAT,EAAYC,CAAZ,EAAeC,IAAf,EAAqBC,UAArB,EAAiCgB,SAAjC,CAAtB,EAAkE;AAC9D3B,YAAAA,YAAY,CAACoB,EAAD,EAAKC,EAAL,EAASV,UAAT,CAAZ;AACA,mBAAO,IAAP;AACH;;AACD,cAAIhB,gBAAgB,CAACyB,EAAD,EAAKC,EAAL,EAASb,CAAT,EAAYC,CAAZ,EAAeC,IAAf,EAAqBC,UAArB,EAAiCgB,SAAjC,CAApB,EAAgE;AAC5D,iBAAKX,OAAL,CAAaR,CAAb,EAAgBC,CAAhB,EAAmBC,IAAnB,EAAyBC,UAAzB,EAAqCM,KAArC;AACA;AACH;;AACD,cAAIrB,WAAW,CAACwB,EAAD,EAAKC,EAAL,EAASb,CAAT,EAAYC,CAAZ,EAAeC,IAAf,EAAqBC,UAArB,EAAiCgB,SAAjC,CAAf,EAA2D;AACvD,iBAAKX,OAAL,CAAaR,CAAb,EAAgBa,EAAhB,EAAoBX,IAApB,EAA0BC,UAA1B,EAAsCM,KAAtC;AACA;AACH;;AACD;AACH;;AACD,WAAKxB,SAAS,CAACoC,KAAf;AAAuB;AACnB,cAAIxB,gBAAgB,CAACe,EAAD,EAAKC,EAAL,EAASG,EAAT,EAAaC,EAAb,EAAiBd,UAAjB,CAApB,EAAiD;AAC7C,iBAAKK,OAAL,CAAaR,CAAb,EAAgBC,CAAhB,EAAmBC,IAAnB,EAAyBC,UAAzB,EAAqCM,KAArC;AACA;AACH;;AACD;AACH;;AACD,WAAKxB,SAAS,CAACqC,MAAf;AAAwB;AACpB,cAAI7B,iBAAiB,CAACmB,EAAD,EAAKC,EAAL,EAASG,EAAT,EAAaC,EAAb,EAAiBd,UAAjB,CAArB,EAAkD;AAC9C,iBAAKK,OAAL,CAAaR,CAAb,EAAgBC,CAAhB,EAAmBC,IAAnB,EAAyBC,UAAzB,EAAqCM,KAArC;AACA;AACH;;AACD;AACH;;AACD,WAAKxB,SAAS,CAACsC,IAAf;AAAsB;AAClB,cAAI7B,eAAe,CAACkB,EAAD,EAAKC,EAAL,EAASG,EAAT,EAAaC,EAAb,EAAiBd,UAAjB,CAAnB,EAAgD;AAC5C,iBAAKK,OAAL,CAAaR,CAAb,EAAgBC,CAAhB,EAAmBC,IAAnB,EAAyBC,UAAzB,EAAqCM,KAArC;AACA;AACH;;AACD;AACH;;AACD,WAAKxB,SAAS,CAACuC,KAAf;AAAuB;AACnB,cAAI7B,gBAAgB,CAACiB,EAAD,EAAKC,EAAL,EAASG,EAAT,EAAaC,EAAb,EAAiBd,UAAjB,CAApB,EAAiD;AAC7C,iBAAKK,OAAL,CAAaR,CAAb,EAAgBC,CAAhB,EAAmBC,IAAnB,EAAyBC,UAAzB,EAAqCM,KAArC;AACA;AACH;;AACD;AACH;;AACD,WAAKxB,SAAS,CAACwC,IAAf;AAAsB;AAClB,cAAI7B,eAAe,CAACgB,EAAD,EAAKC,EAAL,EAASG,EAAT,EAAaC,EAAb,EAAiBd,UAAjB,CAAnB,EAAgD;AAC5C,iBAAKK,OAAL,CAAaR,CAAb,EAAgBC,CAAhB,EAAmBC,IAAnB,EAAyBC,UAAzB,EAAqCM,KAArC;AACA;AACH;;AACD;AACH;AAnDL;;AAqDJ,WAAOA,KAAK,CAACC,KAAb;AACC;;AAlFuB","sourcesContent":["import { PieceType, TeamType, Piece } from \"../constants\"\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove} from \"./pieceLogic\"\n\nexport default class Referee{\n    takePiece(x : number, y: number, team : TeamType, boardState : Piece []){\n        const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team)  \n        if (piece) {\n            piece.taken = true\n        }\n    }\n    endMove(x : number, y: number, team : TeamType, boardState : Piece [], valid : any){\n        if (!isFriendlyPiece(x, y, team, boardState)){\n            this.takePiece(x, y, team, boardState)\n            unsetEnPassant(boardState)\n            valid.value = true          \n        }\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, \n                team : TeamType, boardState : Piece [], activePlayer : TeamType){\n        // Only the active player can move\n        if (team !== activePlayer){\n            return false\n        }\n        // A non-move is not a move\n        if (px === x && py === y){\n            return false\n        }\n        var valid = { value: false }\n        const dx = x - px\n        const dy = y - py\n\n        switch(type){\n            case PieceType.PAWN : {\n                const increment = team === TeamType.WHITE ? 1 : - 1\n                if (isPawnStartingMove(px, py, x, y, team, boardState, increment)){\n                    setEnPassant(px, py, boardState)\n                    return true\n                }\n                if (isPawnNormalMove(px, py, x, y, team, boardState, increment)){\n                    this.endMove(x, y, team, boardState, valid)\n                    break;\n                }\n                if (isEnPassant(px, py, x, y, team, boardState, increment)){\n                    this.endMove(x, py, team, boardState, valid)\n                    break;\n                }\n                break;\n            }\n            case PieceType.NIGHT : {\n                if (isLegalNightMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid)\n                    break;\n                }\n                break;\n            }\n            case PieceType.BISHOP : {\n                if (isLegalBishopMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid)\n                    break;\n                }\n                break;\n            }\n            case PieceType.ROOK : {\n                if (isLegalRookMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid)\n                    break;\n                }\n                break;\n            }\n            case PieceType.QUEEN : {\n                if (isLegalQueenMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid)\n                    break;\n                }\n                break;\n            }\n            case PieceType.KING : {\n                if (isLegalKingMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid)\n                    break;\n                }\n                break;\n            }\n        }\n    return valid.value\n    }\n}"]},"metadata":{},"sourceType":"module"}