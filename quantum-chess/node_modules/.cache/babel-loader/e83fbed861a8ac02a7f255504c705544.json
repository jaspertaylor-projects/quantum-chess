{"ast":null,"code":"import { PieceType, TeamType } from \"../constants\";\nimport { setEnPassant, checkEnPassant, unsetEnPassant, takeEnPassant } from \"./epRef\";\nexport default class Referee {\n  pawnIsBlockaded(x, y, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y);\n    const occupied = piece ? true : false;\n    return occupied;\n  }\n\n  takePiece(x, y, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y);\n\n    if (piece) {\n      piece.taken = true;\n    }\n  }\n\n  isFriendlyPiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y);\n    const occupied = piece && piece.team === team ? true : false;\n    return occupied;\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState) {\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE; //PAWN LOGIC \n    //May want to put each piece in different function\n\n    if (type === PieceType.PAWN) {\n      const startingRow = team === TeamType.WHITE ? 1 : 6;\n      const increment = team === TeamType.WHITE ? 1 : -1;\n      console.log(px, py, x, y, increment); // Moving Logic\n\n      if (py === startingRow && px === x && py === y - 2 * increment) {\n        if (!this.pawnIsBlockaded(x, y, boardState) && !this.pawnIsBlockaded(x, y - increment, boardState)) {\n          setEnPassant(px, py, boardState);\n          return true;\n        }\n      }\n\n      if (py === y - increment && px === x) {\n        if (!this.pawnIsBlockaded(x, y, boardState)) {\n          unsetEnPassant(boardState);\n          return true;\n        }\n      } // ATTACK LOGIC\n\n\n      if ((x === px + 1 || x === px - 1) && py === y - increment && this.isFriendlyPiece(x, y, enemyTeam, boardState)) {\n        unsetEnPassant(boardState);\n        return true;\n      }\n\n      if ((x === px + 1 || x === px - 1) && py === y - increment && this.isFriendlyPiece(x, py, enemyTeam, boardState)) {\n        if (checkEnPassant(x, py, boardState)) {\n          takeEnPassant(x, py, boardState);\n          unsetEnPassant(boardState);\n          return true;\n        }\n      }\n    } // NIGHT LOGIC \n\n\n    if (type === PieceType.NIGHT) {\n      if ((px === x + 1 || px === x - 1) && (py === y + 2 || py === y - 2) || (py === y + 1 || py === y - 1) && (px === x + 2 || px === x - 2)) {\n        if (!this.isFriendlyPiece(x, y, team, boardState)) {\n          unsetEnPassant(boardState);\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","TeamType","setEnPassant","checkEnPassant","unsetEnPassant","takeEnPassant","Referee","pawnIsBlockaded","x","y","boardState","piece","find","p","occupied","takePiece","taken","isFriendlyPiece","team","isValidMove","px","py","type","enemyTeam","WHITE","BLACK","PAWN","startingRow","increment","console","log","NIGHT"],"mappings":"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","sourcesContent":["import { PieceType, TeamType, Piece } from \"../constants\"\nimport { setEnPassant , checkEnPassant, unsetEnPassant, takeEnPassant} from \"./epRef\"\n\nexport default class Referee{\n    pawnIsBlockaded(x : number, y: number, boardState : Piece []): boolean {\n        const piece = boardState.find(p => p.x === x && p.y === y) \n        const occupied =  piece ? true : false\n        return occupied\n    }\n    takePiece(x : number, y: number, boardState : Piece []){\n        const piece = boardState.find(p => p.x === x && p.y === y)  \n        if (piece) {\n            piece.taken = true\n        }\n    }\n    isFriendlyPiece(x : number, y: number, team : TeamType, boardState : Piece []): boolean {\n        const piece = boardState.find(p => p.x === x && p.y === y)\n        const occupied =  piece && piece.team === team ? true : false\n        return occupied\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, team : TeamType, boardState : Piece []){\n        const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        //PAWN LOGIC \n        //May want to put each piece in different function\n        if (type === PieceType.PAWN){\n            const startingRow = team === TeamType.WHITE ? 1 : 6\n            const increment = team === TeamType.WHITE ? 1 : - 1\n            console.log(px, py, x, y, increment)\n            // Moving Logic\n            if ((py === startingRow && px === x) && (py === y - 2 * increment)){\n                if (!this.pawnIsBlockaded(x, y, boardState) && !this.pawnIsBlockaded(x, y - increment, boardState)){\n                    setEnPassant(px, py, boardState)\n                    return true\n                }\n            } \n            if (py === y - increment && px === x){\n                if (!this.pawnIsBlockaded(x, y, boardState)){\n                    unsetEnPassant(boardState)\n                    return true;\n                }\n            } \n            // ATTACK LOGIC\n            if ((x === px + 1 || x === px -1) && (py === y - increment) && this.isFriendlyPiece(x, y, enemyTeam, boardState)) {\n                unsetEnPassant(boardState)\n                return true\n            }\n            if ((x === px + 1 || x === px -1) && (py === y - increment) && this.isFriendlyPiece(x, py, enemyTeam, boardState)) {\n                if (checkEnPassant(x, py, boardState)){\n                        takeEnPassant(x, py, boardState)\n                        unsetEnPassant(boardState)\n                    return true\n                }\n            }\n        }\n        // NIGHT LOGIC \n        if (type === PieceType.NIGHT){\n            if (((px === x + 1 || px === x - 1) &&  (py === y + 2 || py === y - 2)) ||\n                ((py === y + 1 || py === y - 1) &&  (px === x + 2 || px === x - 2))){\n                    if (!this.isFriendlyPiece(x, y, team, boardState)){\n                        unsetEnPassant(boardState)\n                        return true\n                    }\n            }\n        }\n\n        return false\n    }\n}"]},"metadata":{},"sourceType":"module"}