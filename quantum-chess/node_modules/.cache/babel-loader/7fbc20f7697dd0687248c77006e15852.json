{"ast":null,"code":"export const HORIZONTAL_AXIS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\nexport const VERTICAL_AXIS = [1, 2, 3, 4, 5, 6, 7, 8];\nexport const AXIS = [0, 1, 2, 3, 4, 5, 6, 7];\nexport const GRID_SIZE = 100;\nexport let TeamType;\n\n(function (TeamType) {\n  TeamType[TeamType[\"WHITE\"] = 0] = \"WHITE\";\n  TeamType[TeamType[\"BLACK\"] = 1] = \"BLACK\";\n})(TeamType || (TeamType = {}));\n\nexport let PieceType;\n\n(function (PieceType) {\n  PieceType[PieceType[\"PAWN\"] = 0] = \"PAWN\";\n  PieceType[PieceType[\"BISHOP\"] = 1] = \"BISHOP\";\n  PieceType[PieceType[\"NIGHT\"] = 2] = \"NIGHT\";\n  PieceType[PieceType[\"ROOK\"] = 3] = \"ROOK\";\n  PieceType[PieceType[\"QUEEN\"] = 4] = \"QUEEN\";\n  PieceType[PieceType[\"KING\"] = 5] = \"KING\";\n})(PieceType || (PieceType = {}));\n\nexport function initializeBoardState() {\n  const state = [];\n\n  for (let p = 0; p < 2; p++) {\n    const type = p === 0 ? 'b' : 'w';\n    const team = p === 0 ? TeamType.BLACK : TeamType.WHITE;\n    const y = p === 0 ? 7 : 0; // Rooks\n\n    state.push({\n      image: `assets/images/rook_${type}.png`,\n      x: 0,\n      y,\n      team,\n      type: PieceType.ROOK,\n      enPassantable: false,\n      canCastle: true\n    });\n    state.push({\n      image: `assets/images/rook_${type}.png`,\n      x: 7,\n      y,\n      team,\n      type: PieceType.ROOK,\n      enPassantable: false,\n      canCastle: true\n    }); // Nights\n\n    state.push({\n      image: `assets/images/night_${type}.png`,\n      x: 1,\n      y,\n      team,\n      type: PieceType.NIGHT,\n      enPassantable: false\n    });\n    state.push({\n      image: `assets/images/night_${type}.png`,\n      x: 6,\n      y,\n      team,\n      type: PieceType.NIGHT,\n      enPassantable: false\n    }); // Bishops\n\n    state.push({\n      image: `assets/images/bishop_${type}.png`,\n      x: 2,\n      y,\n      team,\n      type: PieceType.BISHOP,\n      enPassantable: false\n    });\n    state.push({\n      image: `assets/images/bishop_${type}.png`,\n      x: 5,\n      y,\n      team,\n      type: PieceType.BISHOP,\n      enPassantable: false\n    }); // Queens\n\n    state.push({\n      image: `assets/images/queen_${type}.png`,\n      x: 3,\n      y,\n      team,\n      type: PieceType.QUEEN,\n      enPassantable: false\n    }); // Kings\n\n    state.push({\n      image: `assets/images/king_${type}.png`,\n      x: 4,\n      y,\n      team,\n      type: PieceType.KING,\n      enPassantable: false,\n      canCastle: true\n    });\n  } // Pawns\n\n\n  for (let i = 0; i < HORIZONTAL_AXIS.length; i++) {\n    state.push({\n      image: 'assets/images/pawn_b.png',\n      x: i,\n      y: 6,\n      team: TeamType.BLACK,\n      type: PieceType.PAWN,\n      enPassantable: false\n    });\n  }\n\n  for (let i = 0; i < HORIZONTAL_AXIS.length; i++) {\n    state.push({\n      image: 'assets/images/pawn_w.png',\n      x: i,\n      y: 1,\n      team: TeamType.WHITE,\n      type: PieceType.PAWN,\n      enPassantable: false\n    });\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess/chess/src/constants.ts"],"names":["HORIZONTAL_AXIS","VERTICAL_AXIS","AXIS","GRID_SIZE","TeamType","PieceType","initializeBoardState","state","p","type","team","BLACK","WHITE","y","push","image","x","ROOK","enPassantable","canCastle","NIGHT","BISHOP","QUEEN","KING","i","length","PAWN"],"mappings":"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","sourcesContent":["export const HORIZONTAL_AXIS = ['a', 'b', 'c', 'd', 'e', 'f',   'g', 'h'];\nexport const VERTICAL_AXIS = [1,2,3,4,5,6,7,8];\nexport const AXIS = [0,1,2,3,4,5,6,7];\nexport const GRID_SIZE = 100\n\nexport interface Piece {\n    image: string;\n    x : number; \n    y : number; \n    type : PieceType;\n    team : TeamType;\n    enPassantable? : boolean;\n    taken? : boolean;\n    teleported? : boolean;\n    canCastle? : boolean;\n    promoted? : boolean;\n}\n\nexport enum TeamType{\n    WHITE,\n    BLACK\n}\n\nexport enum PieceType {\n    PAWN,\n    BISHOP, \n    NIGHT, \n    ROOK,\n    QUEEN,\n    KING,\n}\n\nexport function initializeBoardState() : Piece []{\n    const state : Piece[] = []\n    for (let p = 0; p < 2; p ++){\n        const type = p === 0 ? 'b': 'w';\n        const team = p === 0 ? TeamType.BLACK : TeamType.WHITE;\n        const y = p === 0 ?  7 : 0;\n        // Rooks\n        state.push({image : `assets/images/rook_${type}.png`, x : 0,  y, team, type : PieceType.ROOK, enPassantable : false, canCastle : true})\n        state.push({image : `assets/images/rook_${type}.png`, x : 7,  y, team, type : PieceType.ROOK, enPassantable : false, canCastle : true})\n\n        // Nights\n        state.push({image : `assets/images/night_${type}.png`, x : 1,  y, team, type : PieceType.NIGHT, enPassantable : false})\n        state.push({image : `assets/images/night_${type}.png`, x : 6,  y, team, type : PieceType.NIGHT, enPassantable : false})\n\n        // Bishops\n        state.push({image : `assets/images/bishop_${type}.png`, x : 2,  y, team, type : PieceType.BISHOP, enPassantable : false})\n        state.push({image : `assets/images/bishop_${type}.png`, x : 5,  y, team, type : PieceType.BISHOP, enPassantable : false})\n\n        // Queens\n        state.push({image : `assets/images/queen_${type}.png`, x : 3,  y, team, type : PieceType.QUEEN, enPassantable : false})\n        // Kings\n        state.push({image : `assets/images/king_${type}.png`, x : 4,  y, team, type : PieceType.KING, enPassantable : false, canCastle : true})\n\n    }\n\n    // Pawns\n    for (let i = 0; i < HORIZONTAL_AXIS.length; i++){\n        state.push({image : 'assets/images/pawn_b.png', x : i, y : 6, team : TeamType.BLACK, type : PieceType.PAWN, enPassantable : false})\n    }\n    for (let i = 0; i < HORIZONTAL_AXIS.length; i++){\n        state.push({image : 'assets/images/pawn_w.png', x : i, y : 1, team : TeamType.WHITE, type : PieceType.PAWN, enPassantable : false})\n    }\n    return state\n}\n"]},"metadata":{},"sourceType":"module"}