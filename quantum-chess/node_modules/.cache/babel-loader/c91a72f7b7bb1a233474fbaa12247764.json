{"ast":null,"code":"import { PieceType, TeamType } from \"../constants\";\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove, isCastleMove } from \"./pieceLogic\";\nexport default class Referee {\n  takePiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team);\n\n    if (piece) {\n      piece.taken = true;\n    }\n  }\n\n  endMove(px, py, x, y, team, boardState, valid) {\n    if (!isFriendlyPiece(x, y, team, boardState)) {\n      this.takePiece(x, y, team, boardState);\n      unsetEnPassant(boardState);\n      valid.value = true;\n    }\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState, activePlayer) {\n    // Only the active player can move\n    if (team !== activePlayer) {\n      return false;\n    } // A non-move is not a move\n\n\n    if (px === x && py === y) {\n      return false;\n    } // A move off the board is not a move\n\n\n    if (x < 0 || y < 0 || x > 7 || y > 7) {\n      return false;\n    }\n\n    var valid = {\n      value: false\n    };\n    const dx = x - px;\n    const dy = y - py;\n\n    switch (type) {\n      case PieceType.PAWN:\n        {\n          if (isPawnStartingMove(px, py, x, y, team, boardState)) {\n            setEnPassant(px, py, boardState);\n            return true;\n          }\n\n          if (isPawnNormalMove(px, py, x, y, team, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid);\n          }\n\n          if (isEnPassant(px, py, x, y, team, boardState)) {\n            this.endMove(-1, -1, x, py, team, boardState, valid);\n          }\n\n          break;\n        }\n\n      case PieceType.NIGHT:\n        {\n          if (isLegalNightMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid);\n          }\n\n          break;\n        }\n\n      case PieceType.BISHOP:\n        {\n          if (isLegalBishopMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid);\n          }\n\n          break;\n        }\n\n      case PieceType.ROOK:\n        {\n          if (isLegalRookMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid);\n          }\n\n          break;\n        }\n\n      case PieceType.QUEEN:\n        {\n          if (isLegalQueenMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid);\n          }\n\n          break;\n        }\n\n      case PieceType.KING:\n        {\n          if (isLegalKingMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid);\n          }\n\n          if (isCastleMove(px, py, dx, dy, activePlayer, boardState)) {\n            if (activePlayer === TeamType.WHITE) {\n              if (dx === -2) {\n                const piece = boardState.find(p => p.x === 0 && p.y === 0);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n\n              if (dx === 2) {\n                const piece = boardState.find(p => p.x === 7 && p.y === 0);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n            }\n\n            if (activePlayer === TeamType.BLACK) {\n              if (dx === -2) {\n                const piece = boardState.find(p => p.x === 0 && p.y === 7);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n\n              if (dx === 2) {\n                const piece = boardState.find(p => p.x === 7 && p.y === 7);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n            }\n\n            this.endMove(px, py, x, y, team, boardState, valid);\n          }\n\n          break;\n        }\n    }\n\n    return valid.value;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","TeamType","isPawnNormalMove","isEnPassant","isPawnStartingMove","isFriendlyPiece","unsetEnPassant","setEnPassant","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","isCastleMove","Referee","takePiece","x","y","team","boardState","piece","find","p","taken","endMove","px","py","valid","value","isValidMove","type","activePlayer","dx","dy","PAWN","NIGHT","BISHOP","ROOK","QUEEN","KING","WHITE","teleported","BLACK"],"mappings":"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","sourcesContent":["import { kStringMaxLength } from \"buffer\"\nimport { PieceType, TeamType, Piece, } from \"../constants\"\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove, isCastleMove} from \"./pieceLogic\"\n\nexport default class Referee{\n    takePiece(x : number, y: number, team : TeamType, boardState : Piece []){\n        const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team)  \n                if (piece) {\n            piece.taken = true\n        }\n    }\n    endMove(px : number, py : number, x : number, y: number, team : TeamType, boardState : Piece [], \n            valid : any){\n        if (!isFriendlyPiece(x, y, team, boardState)){\n            this.takePiece(x, y, team, boardState)\n            unsetEnPassant(boardState)\n            valid.value = true          \n        }\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, \n                team : TeamType, boardState : Piece [], activePlayer : TeamType) : boolean{\n        // Only the active player can move\n        if (team !== activePlayer){\n            return false\n        }\n        // A non-move is not a move\n        if (px === x && py === y){\n            return false\n        }\n        // A move off the board is not a move\n        if (x < 0 || y < 0 || x > 7 || y > 7){\n            return false\n        }\n        var valid = { value: false }\n        const dx = x - px\n        const dy = y - py\n\n        switch(type){\n            case PieceType.PAWN : {\n                if (isPawnStartingMove(px, py, x, y, team, boardState)){\n                    setEnPassant(px, py, boardState)\n                    return true\n                }\n                if (isPawnNormalMove(px, py, x, y, team, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid)\n                }\n                if (isEnPassant(px, py, x, y, team, boardState)){\n                    this.endMove(-1, -1, x, py, team, boardState, valid)\n                }\n                break;\n            }\n            case PieceType.NIGHT : {\n                if (isLegalNightMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid)\n                }\n                break;\n            }\n            case PieceType.BISHOP : {\n                if (isLegalBishopMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid)\n                }\n                break;\n            }\n            case PieceType.ROOK : {\n                if (isLegalRookMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid)\n                }\n                break;\n            }\n            case PieceType.QUEEN : {\n                if (isLegalQueenMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid)\n                }\n                break;\n            }\n            case PieceType.KING : {\n                if (isLegalKingMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid)\n                }\n                if (isCastleMove(px, py, dx, dy, activePlayer, boardState)){\n                    if (activePlayer === TeamType.WHITE){\n                        if (dx === -2){ \n                            const piece = boardState.find(p => p.x === 0 && p.y === 0)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                        if (dx === 2){ \n                            const piece = boardState.find(p => p.x === 7 && p.y === 0)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                    }\n                    if (activePlayer === TeamType.BLACK){\n                        if (dx === -2){ \n                            const piece = boardState.find(p => p.x === 0 && p.y === 7)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                        if (dx === 2){ \n                            const piece = boardState.find(p => p.x === 7 && p.y === 7)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                    }\n                this.endMove(px, py, x, y, team, boardState, valid)\n                }\n            break;\n            }\n        }\n    return valid.value\n    }\n}"]},"metadata":{},"sourceType":"module"}