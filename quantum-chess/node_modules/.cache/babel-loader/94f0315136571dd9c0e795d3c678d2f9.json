{"ast":null,"code":"import { PieceType, TeamType, AXIS } from \"../constants\";\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove, isCastleMove } from \"./pieceLogic\";\nimport Checker from './boardChecks';\nimport { CLICKED } from '../components/PopUp/PopUp';\nexport default class Referee {\n  deepCopy(boardState) {\n    const oldBoardState = [];\n    boardState.forEach(p => oldBoardState.push({\n      image: p.image,\n      x: p.x,\n      y: p.y,\n      team: p.team,\n      type: p.type,\n      enPassantable: p.enPassantable,\n      canCastle: p.canCastle,\n      promoted: p.promoted\n    }));\n    return oldBoardState;\n  }\n\n  promote(px, py, x, y, boardState) {\n    const piece = boardState.find(p => p.x === px && p.y === py);\n\n    if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.WHITE && y === 7) {\n      piece.promoted = true;\n    } else if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.BLACK && y === 0) {\n      piece.promoted = true;\n    } else if (piece) {\n      piece.promoted = false;\n    }\n  }\n\n  noCastle(px, py, boardState) {\n    const piece = boardState.find(p => p.x === px && p.y === py);\n\n    if (piece) {\n      piece.canCastle = false;\n    }\n  }\n\n  takePiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team);\n\n    if (piece) {\n      piece.taken = true;\n    }\n  }\n\n  endMove(px, py, x, y, team, boardState, valid) {\n    if (!isFriendlyPiece(x, y, team, boardState)) {\n      this.promote(px, py, x, y, boardState);\n      this.noCastle(px, py, boardState);\n      this.takePiece(x, y, team, boardState);\n      unsetEnPassant(boardState);\n      const checker = new Checker();\n      const inCheck = checker.isMyKingInCheck(team, boardState, 0);\n\n      if (inCheck) {\n        let x = 'good';\n      } else {\n        valid.value = true;\n      }\n    }\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState, activePlayer) {\n    if (!CLICKED) {\n      return false;\n    } // Only the active player can move\n\n\n    if (team !== activePlayer) {\n      return false;\n    } // A non-move is not a move\n\n\n    if (px === x && py === y) {\n      return false;\n    } // A move off the board is not a move\n\n\n    if (!(AXIS.includes(px) && AXIS.includes(py) && AXIS.includes(x) && AXIS.includes(y))) {\n      return false;\n    }\n\n    var valid = {\n      value: false\n    };\n    const dx = x - px;\n    const dy = y - py;\n\n    switch (type) {\n      case PieceType.PAWN:\n        {\n          if (isPawnStartingMove(px, py, x, y, team, boardState)) {\n            setEnPassant(px, py, boardState);\n            return true;\n          }\n\n          if (isPawnNormalMove(px, py, x, y, team, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid);\n          }\n\n          if (isEnPassant(px, py, x, y, team, boardState)) {\n            this.endMove(-1, -1, x, py, team, boardState, valid);\n          }\n\n          break;\n        }\n\n      case PieceType.NIGHT:\n        {\n          if (isLegalNightMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid);\n          }\n\n          break;\n        }\n\n      case PieceType.BISHOP:\n        {\n          if (isLegalBishopMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid);\n          }\n\n          break;\n        }\n\n      case PieceType.ROOK:\n        {\n          if (isLegalRookMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid);\n          }\n\n          break;\n        }\n\n      case PieceType.QUEEN:\n        {\n          if (isLegalQueenMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid);\n          }\n\n          break;\n        }\n\n      case PieceType.KING:\n        {\n          if (isLegalKingMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid);\n          }\n\n          if (isCastleMove(px, py, dx, dy, activePlayer, boardState)) {\n            if (activePlayer === TeamType.WHITE) {\n              if (dx === -2) {\n                const piece = boardState.find(p => p.x === 0 && p.y === 0);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n\n              if (dx === 2) {\n                const piece = boardState.find(p => p.x === 7 && p.y === 0);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n            }\n\n            if (activePlayer === TeamType.BLACK) {\n              if (dx === -2) {\n                const piece = boardState.find(p => p.x === 0 && p.y === 7);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n\n              if (dx === 2) {\n                const piece = boardState.find(p => p.x === 7 && p.y === 7);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n            }\n\n            this.endMove(px, py, x, y, team, boardState, valid);\n          }\n\n          break;\n        }\n    }\n\n    return valid.value;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","TeamType","AXIS","isPawnNormalMove","isEnPassant","isPawnStartingMove","isFriendlyPiece","unsetEnPassant","setEnPassant","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","isCastleMove","Checker","CLICKED","Referee","deepCopy","boardState","oldBoardState","forEach","p","push","image","x","y","team","type","enPassantable","canCastle","promoted","promote","px","py","piece","find","PAWN","WHITE","BLACK","noCastle","takePiece","taken","endMove","valid","checker","inCheck","isMyKingInCheck","value","isValidMove","activePlayer","includes","dx","dy","NIGHT","BISHOP","ROOK","QUEEN","KING","teleported"],"mappings":"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","sourcesContent":["\nimport { PieceType, TeamType, Piece, AXIS, } from \"../constants\"\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove, isCastleMove} from \"./pieceLogic\"\nimport Checker from './boardChecks'\nimport {CLICKED} from '../components/PopUp/PopUp'\n\nexport default class Referee{\n    deepCopy(boardState : Piece []) : Piece [] {\n        const oldBoardState : Piece[] = [];\n        boardState.forEach(p => oldBoardState.push({image : p.image, x : p.x,  y : p.y,\n                                                team : p.team, type : p.type, \n                                                enPassantable : p.enPassantable,\n                                                canCastle: p.canCastle,\n                                                promoted: p.promoted}))\n        return oldBoardState\n    }\n    \n    promote(px: number, py: number, x : number, y: number, boardState : Piece []){\n    const piece = boardState.find(p => p.x === px && p.y === py)\n        if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.WHITE && y === 7){\n            piece.promoted = true\n        }   \n        else if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.BLACK && y === 0){\n            piece.promoted = true\n        } else if (piece){\n            piece.promoted = false\n        }\n    }    \n    noCastle(px: number, py: number, boardState : Piece []){\n        const piece = boardState.find(p => p.x === px && p.y === py)\n        if (piece){\n            piece.canCastle = false\n        }\n    }\n    takePiece(x : number, y: number, team : TeamType, boardState : Piece []){\n        const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team)  \n                if (piece) {\n            piece.taken = true\n        }\n    }\n    endMove(px : number, py : number, x : number, y: number, team : TeamType, boardState : Piece [], \n            valid : any){\n        if (!isFriendlyPiece(x, y, team, boardState)){\n            this.promote(px, py, x, y, boardState)\n            this.noCastle(px, py, boardState)\n            this.takePiece(x, y, team, boardState)\n            unsetEnPassant(boardState)\n            const checker = new Checker();\n            const inCheck = checker.isMyKingInCheck(team, boardState, 0)\n            if (inCheck){\n                let x = 'good'\n            }  else {\n                valid.value = true\n            }      \n        }\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, \n                team : TeamType, boardState : Piece [], activePlayer : TeamType) : boolean{\n        if (!CLICKED){\n            return false\n        }  \n        // Only the active player can move\n        if (team !== activePlayer){\n            return false\n        }\n        // A non-move is not a move\n        if (px === x && py === y){\n            return false\n        }\n        // A move off the board is not a move\n        if (!(AXIS.includes(px) &&  AXIS.includes(py) &&  AXIS.includes(x) && AXIS.includes(y))){\n            return false\n        }\n        var valid = { value: false }\n        const dx = x - px\n        const dy = y - py\n\n        switch(type){\n            case PieceType.PAWN : {\n                if (isPawnStartingMove(px, py, x, y, team, boardState)){\n                    setEnPassant(px, py, boardState)\n                    return true\n                }\n                if (isPawnNormalMove(px, py, x, y, team, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid)\n                }\n                if (isEnPassant(px, py, x, y, team, boardState)){\n                    this.endMove(-1, -1, x, py, team, boardState, valid)\n                }\n                break;\n            }\n            case PieceType.NIGHT : {\n                if (isLegalNightMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid)\n                }\n                break;\n            }\n            case PieceType.BISHOP : {\n                if (isLegalBishopMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid)\n                }\n                break;\n            }\n            case PieceType.ROOK : {\n                if (isLegalRookMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid)\n                }\n                break;\n            }\n            case PieceType.QUEEN : {\n                if (isLegalQueenMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid)\n                }\n                break;\n            }\n            case PieceType.KING : {\n                if (isLegalKingMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid)\n                }\n                if (isCastleMove(px, py, dx, dy, activePlayer, boardState)){\n                    if (activePlayer === TeamType.WHITE){\n                        if (dx === -2){ \n                            const piece = boardState.find(p => p.x === 0 && p.y === 0)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                        if (dx === 2){ \n                            const piece = boardState.find(p => p.x === 7 && p.y === 0)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                    }\n                    if (activePlayer === TeamType.BLACK){\n                        if (dx === -2){ \n                            const piece = boardState.find(p => p.x === 0 && p.y === 7)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                        if (dx === 2){ \n                            const piece = boardState.find(p => p.x === 7 && p.y === 7)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                    }\n                this.endMove(px, py, x, y, team, boardState, valid)\n                }\n            break;\n            }\n        }\n    return valid.value\n    }\n}"]},"metadata":{},"sourceType":"module"}