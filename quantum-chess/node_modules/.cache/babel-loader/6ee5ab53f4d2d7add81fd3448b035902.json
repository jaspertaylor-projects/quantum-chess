{"ast":null,"code":"import { TeamType } from '../constants';\nimport { IMAGE, PROMOTED_PIECE } from '../components/Promotion/Promotion';\n\nfunction pawnIsBlockaded(x, y, boardState) {\n  const piece = boardState.find(p => p.x === x && p.y === y);\n  const occupied = piece ? true : false;\n  return occupied;\n}\n\nfunction checkEnPassant(x, y, boardState) {\n  const piece = boardState.find(p => p.x === x && p.y === y);\n\n  if (piece && piece.enPassantable) {\n    return piece.enPassantable;\n  }\n\n  return false;\n}\n\nexport function setEnPassant(px, py, boardState) {\n  boardState.forEach(p => {\n    if (p.x === px && p.y === py) {\n      p.enPassantable = true;\n    } else {\n      p.enPassantable = false;\n    }\n  });\n}\nexport function unsetEnPassant(boardState) {\n  boardState.forEach(p => {\n    p.enPassantable = false;\n  });\n}\nexport function isFriendlyPiece(x, y, team, boardState) {\n  const piece = boardState.find(p => p.x === x && p.y === y);\n  const occupied = piece && piece.team === team ? true : false;\n  return occupied;\n}\nexport function isPawnStartingMove(px, py, x, y, team, boardState) {\n  const startingRow = team === TeamType.WHITE ? 1 : 6;\n  const increment = team === TeamType.WHITE ? 1 : -1;\n\n  if (py === startingRow && px === x && py === y - 2 * increment) {\n    if (!pawnIsBlockaded(x, y, boardState) && !pawnIsBlockaded(x, y - increment, boardState)) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function isPawnNormalMove(px, py, x, y, team, boardState) {\n  const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n  const increment = team === TeamType.WHITE ? 1 : -1;\n\n  if (py === y - increment && px === x) {\n    if (!pawnIsBlockaded(x, y, boardState)) {\n      return true;\n    }\n  }\n\n  if ((x === px + 1 || x === px - 1) && py === y - increment && isFriendlyPiece(x, y, enemyTeam, boardState)) {\n    return true;\n  }\n\n  return false;\n}\nexport function isEnPassant(px, py, x, y, team, boardState) {\n  const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n  const increment = team === TeamType.WHITE ? 1 : -1;\n\n  if ((x === px + 1 || x === px - 1) && py === y - increment && isFriendlyPiece(x, py, enemyTeam, boardState)) {\n    if (checkEnPassant(x, py, boardState)) {\n      return true;\n    }\n  }\n\n  return false;\n} // Promotes a pawn to a QUEEN, ROOK, BISHOP, or NIGHT\n\nexport function promotePieces(boardState) {\n  const promotedPiece = boardState.find(p => p.promoted === true);\n\n  if (promotedPiece) {\n    const id = boardState.indexOf(promotedPiece);\n    boardState[id] = {\n      image: IMAGE,\n      x: promotedPiece.x,\n      y: promotedPiece.y,\n      taken: false,\n      team: promotedPiece.team,\n      type: PROMOTED_PIECE,\n      enPassantable: false,\n      promoted: false\n    };\n  }\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/Referee/pawnLogic.ts"],"names":["TeamType","IMAGE","PROMOTED_PIECE","pawnIsBlockaded","x","y","boardState","piece","find","p","occupied","checkEnPassant","enPassantable","setEnPassant","px","py","forEach","unsetEnPassant","isFriendlyPiece","team","isPawnStartingMove","startingRow","WHITE","increment","isPawnNormalMove","enemyTeam","BLACK","isEnPassant","promotePieces","promotedPiece","promoted","id","indexOf","image","taken","type"],"mappings":"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","sourcesContent":["import { Piece, TeamType } from '../constants'\nimport {IMAGE, PROMOTED_PIECE} from '../components/Promotion/Promotion'\n\nfunction pawnIsBlockaded(x : number, y: number, boardState : Piece []): boolean {\n    const piece = boardState.find(p => p.x === x && p.y === y) \n    const occupied =  piece ? true : false\n    return occupied\n}\n\nfunction checkEnPassant (x : number, y : number, boardState : Piece []) : boolean {\n    const piece = boardState.find(p => p.x === x && p.y === y)\n    if (piece && piece.enPassantable){\n        return piece.enPassantable  \n    } return false\n}\n\n\n\n\nexport function setEnPassant(px : number, py : number, boardState : Piece []){\n        boardState.forEach(p => {\n            if (p.x === px && p.y === py){\n                p.enPassantable = true\n            } else{\n                p.enPassantable = false\n            }\n        })\n    }\n\nexport function unsetEnPassant( boardState : Piece []){\n    boardState.forEach(p => {\n            p.enPassantable = false\n    })\n}\n\nexport function isFriendlyPiece(x : number, y: number, team : TeamType, boardState : Piece []): boolean {\n    const piece = boardState.find(p => p.x === x && p.y === y)\n    const occupied =  piece && piece.team === team ? true : false\n    return occupied\n}\n\nexport function isPawnStartingMove(px : number, py : number, x : number, y : number, \n                                    team : TeamType, boardState : Piece []):boolean{\n    const startingRow = team === TeamType.WHITE ? 1 : 6\n    const increment = team === TeamType.WHITE ? 1 : - 1\n    if ((py === startingRow && px === x) && (py === y - 2 * increment)){\n        if (!pawnIsBlockaded(x, y, boardState) && !pawnIsBlockaded(x, y - increment, boardState)){\n            return true\n        }\n    } return false\n}\n\nexport function isPawnNormalMove(px : number, py : number, x : number, y : number, \n                                team : TeamType, boardState : Piece []): boolean{\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n    const increment = team === TeamType.WHITE ? 1 : - 1\n    if (py === y - increment && px === x){\n        if (!pawnIsBlockaded(x, y, boardState)){\n            return true;\n        } \n    }\n    if ((x === px + 1 || x === px -1) && (py === y - increment) && isFriendlyPiece(x, y, enemyTeam, boardState)) {\n        return true\n    } \n    return false \n} \n\n\nexport function isEnPassant(px : number, py : number, x : number, y : number,\n                                 team : TeamType, boardState : Piece []): boolean{\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n    const increment = team === TeamType.WHITE ? 1 : - 1\n    if ((x === px + 1 || x === px -1) && (py === y - increment) && isFriendlyPiece(x, py, enemyTeam, boardState)) {\n        if (checkEnPassant(x, py, boardState)){\n            return true\n        }\n    }\n    return false\n}\n\n    // Promotes a pawn to a QUEEN, ROOK, BISHOP, or NIGHT\nexport function promotePieces(boardState : Piece []){\n    const promotedPiece = boardState.find(p => p.promoted === true)\n    if (promotedPiece){\n        const id = boardState.indexOf(promotedPiece)\n        boardState[id] = {image : IMAGE, x : promotedPiece.x,  y: promotedPiece.y, taken : false,\n                    team : promotedPiece.team, type : PROMOTED_PIECE, enPassantable : false,\n                    promoted : false}\n    }\n}"]},"metadata":{},"sourceType":"module"}