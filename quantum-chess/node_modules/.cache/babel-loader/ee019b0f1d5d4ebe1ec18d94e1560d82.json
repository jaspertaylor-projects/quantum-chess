{"ast":null,"code":"/*\nThis is the file where we detrmine whether Kings are in check or checkmate.  It\nis important to remember that the isCheckMate function works by checking to see\nif there are any legal moves for a piece and returns true if there are no moves\nsometimes this can be stale mate so it must be used in conjunction with \nisMyKingInCheck to fully determine the outcome of the game.\n\n*/\nimport { PieceType, TeamType } from \"../constants\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove, isWH, isWD } from \"./pieceLogic\";\nimport { isPawnNormalMove } from \"./pawnLogic\";\nimport { CLICKED1 } from '../components/Promotion/promotion';\nimport { CLICKED2 } from '../components/TakePiece/TakePiece';\nimport Referee from './referee';\nimport { AXIS } from '../constants';\nimport { fakeMove } from \"./executeMove\";\nexport default class Checker {\n  constructor(boardState) {\n    this.oldBoardState = void 0;\n    this.oldBoardState = boardState;\n  } // Makes a copy of the board state so that way we can make 'hypothetical'\n  // moves and then do a 'take back'.\n\n\n  deepCopy(boardState) {\n    if (this.oldBoardState) {\n      for (let i = 0; i < this.oldBoardState.length; i++) {\n        const p = this.oldBoardState[i];\n        boardState[i] = {\n          SuperPiece: p.SuperPiece,\n          x: p.x,\n          y: p.y,\n          taken: false,\n          promoted: false\n        };\n      }\n    }\n  }\n\n  removeKing(p) {\n    if (p.SuperPiece.subPieces.includes(PieceType.KING)) {\n      p.SuperPiece.subPieces.splice(0, 1);\n    }\n  }\n\n  removeKingsInCheck(boardState, team) {\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n\n    for (let i = 0; i < boardState.length; i++) {\n      const enemyPiece = boardState[i];\n\n      if (enemyPiece.SuperPiece.team === enemyTeam) {\n        for (let j = 0; j < boardState.length; j++) {\n          const ourPiece = boardState[j];\n\n          if (ourPiece.SuperPiece.team === team && ourPiece.SuperPiece.subPieces.length > 1) {\n            const dx = ourPiece.x - enemyPiece.x;\n            const dy = ourPiece.y - enemyPiece.y;\n\n            switch (enemyPiece.SuperPiece.checksLike) {\n              case PieceType.PAWN:\n                {\n                  if (isPawnNormalMove(enemyPiece.x, enemyPiece.y, ourPiece.x, ourPiece.y, team, boardState)) {\n                    this.removeKing(ourPiece);\n                  }\n\n                  break;\n                }\n\n              case PieceType.NIGHT:\n                {\n                  if (isLegalNightMove(enemyPiece.x, enemyPiece.y, dx, dy, enemyTeam, boardState)) {\n                    this.removeKing(ourPiece);\n                  }\n\n                  break;\n                }\n\n              case PieceType.BISHOP:\n                {\n                  if (isLegalBishopMove(enemyPiece.x, enemyPiece.y, dx, dy, enemyTeam, boardState)) {\n                    this.removeKing(ourPiece);\n                  }\n\n                  break;\n                }\n\n              case PieceType.ROOK:\n                {\n                  if (isLegalRookMove(enemyPiece.x, enemyPiece.y, dx, dy, enemyTeam, boardState)) {\n                    this.removeKing(ourPiece);\n                  }\n\n                  break;\n                }\n\n              case PieceType.QUEEN:\n                {\n                  if (isLegalQueenMove(enemyPiece.x, enemyPiece.y, dx, dy, enemyTeam, boardState)) {\n                    this.removeKing(ourPiece);\n                  }\n\n                  break;\n                }\n\n              case PieceType.KING:\n                {\n                  if (isLegalKingMove(enemyPiece.x, enemyPiece.y, dx, dy, enemyTeam, boardState)) {\n                    this.removeKing(ourPiece);\n                  }\n\n                  break;\n                }\n\n              case PieceType.WIERD_XY:\n                {\n                  if (isWH(enemyPiece.x, enemyPiece.y, dx, dy, enemyTeam, boardState)) {\n                    return true;\n                  }\n\n                  break;\n                }\n\n              case PieceType.WIERD_D:\n                {\n                  if (isWD(enemyPiece.x, enemyPiece.y, dx, dy, enemyTeam, boardState)) {\n                    return true;\n                  }\n\n                  break;\n                }\n            }\n          }\n        }\n      }\n    }\n  } // Returns true if your team has a king in check.  The increment should usually be set to 0 \n  // but exists for checking the no castling through check rule \n\n\n  isMyKingInCheck(team, boardState) {\n    const ref = new Referee();\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    const myKing = boardState.find(p => p.SuperPiece.team === team && p.SuperPiece.subPieces.length === 1 && p.SuperPiece.subPieces[0] === PieceType.KING);\n\n    if (myKing) {\n      for (let i = 0; i < boardState.length; i++) {\n        const p = boardState[i];\n\n        if (p.SuperPiece.team === enemyTeam) {\n          const piecesThatCanTakeMyKing = ref.getPossiblePieces(p.x, p.y, myKing.x, myKing.y, p.SuperPiece, boardState, enemyTeam);\n\n          if (piecesThatCanTakeMyKing.length > 0) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  } //Returns true if the enemy team has no legal moves\n\n\n  isCheckMate(team, boardState) {\n    const CLICKED = CLICKED1 && CLICKED2;\n    const ref = new Referee();\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n\n    for (let j = AXIS.length - 1; j >= 0; j--) {\n      for (let i = 0; i < AXIS.length; i++) {\n        for (let k = 0; k < boardState.length; k++) {\n          const p = boardState[k];\n\n          if (p.SuperPiece.team === enemyTeam) {\n            const legalMove = ref.getPossiblePieces(p.x, p.y, i, j, p.SuperPiece, boardState, enemyTeam);\n\n            if (legalMove.length > 0 || !CLICKED) {\n              fakeMove(p.x, p.y, i, j, legalMove, enemyTeam, boardState);\n              const inCheck = this.isMyKingInCheck(enemyTeam, boardState);\n              this.deepCopy(boardState);\n\n              if (!inCheck) {\n                return false;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/QuantumChess/quantum-chess/src/Referee/checker.ts"],"names":["PieceType","TeamType","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","isWH","isWD","isPawnNormalMove","CLICKED1","CLICKED2","Referee","AXIS","fakeMove","Checker","constructor","boardState","oldBoardState","deepCopy","i","length","p","SuperPiece","x","y","taken","promoted","removeKing","subPieces","includes","KING","splice","removeKingsInCheck","team","enemyTeam","WHITE","BLACK","enemyPiece","j","ourPiece","dx","dy","checksLike","PAWN","NIGHT","BISHOP","ROOK","QUEEN","WIERD_XY","WIERD_D","isMyKingInCheck","ref","myKing","find","piecesThatCanTakeMyKing","getPossiblePieces","isCheckMate","CLICKED","k","legalMove","inCheck"],"mappings":"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","sourcesContent":["/*\nThis is the file where we detrmine whether Kings are in check or checkmate.  It\nis important to remember that the isCheckMate function works by checking to see\nif there are any legal moves for a piece and returns true if there are no moves\nsometimes this can be stale mate so it must be used in conjunction with \nisMyKingInCheck to fully determine the outcome of the game.\n\n*/\n\n\nimport { PieceType, TeamType, Piece} from \"../constants\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove, isWH, isWD} from \"./pieceLogic\"\nimport { isPawnNormalMove } from \"./pawnLogic\"\nimport { CLICKED1 } from '../components/Promotion/promotion'\nimport { CLICKED2 } from '../components/TakePiece/TakePiece'\nimport Referee from './referee'\nimport { AXIS } from '../constants'\nimport { fakeMove } from \"./executeMove\"\n\nexport default class Checker {   \n    oldBoardState : Piece [] | null;\n\n    constructor (boardState: Piece [] | null){\n        this.oldBoardState = boardState\n    }\n\n    // Makes a copy of the board state so that way we can make 'hypothetical'\n    // moves and then do a 'take back'.\n    deepCopy(boardState : Piece []) {\n        if (this.oldBoardState){\n            for (let i = 0; i < this.oldBoardState.length; i ++){\n                const p = this.oldBoardState[i]\n                boardState[i] = {SuperPiece : p.SuperPiece, x : p.x, y : p.y, taken : false, promoted : false}\n            }\n        }\n    } \n    removeKing(p : Piece){\n        if (p.SuperPiece.subPieces.includes(PieceType.KING)){\n            p.SuperPiece.subPieces.splice(0, 1)\n        }\n    }\n\n    removeKingsInCheck(boardState : Piece [], team : TeamType){\n        const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        for (let i = 0; i < boardState.length; i++){\n            const enemyPiece = boardState[i];\n            if (enemyPiece.SuperPiece.team === enemyTeam){\n                for (let j = 0; j < boardState.length; j++){\n                    const ourPiece = boardState[j];\n                    if (ourPiece.SuperPiece.team === team && ourPiece.SuperPiece.subPieces.length > 1){\n                        const dx = ourPiece.x - enemyPiece.x\n                        const dy = ourPiece.y - enemyPiece.y\n                        switch (enemyPiece.SuperPiece.checksLike){\n                            case PieceType.PAWN : {\n                                if (isPawnNormalMove(enemyPiece.x, enemyPiece.y, \n                                                    ourPiece.x, ourPiece.y, \n                                                    team, boardState)){\n                                    this.removeKing(ourPiece)\n                                } break;\n                            }\n                            case PieceType.NIGHT : {\n                                if (isLegalNightMove(enemyPiece.x, enemyPiece.y, dx, dy, enemyTeam, boardState)){\n                                    this.removeKing(ourPiece)\n                                } break;\n                            }\n                            case PieceType.BISHOP : {\n                                if (isLegalBishopMove(enemyPiece.x, enemyPiece.y, dx, dy, enemyTeam, boardState)){\n                                    this.removeKing(ourPiece)\n                                } break;\n                            }\n                            case PieceType.ROOK : {\n                                if (isLegalRookMove(enemyPiece.x, enemyPiece.y, dx, dy, enemyTeam, boardState)){\n                                    this.removeKing(ourPiece)\n                                } break;\n                            }\n                            case PieceType.QUEEN : {\n                                if (isLegalQueenMove(enemyPiece.x, enemyPiece.y, dx, dy, enemyTeam, boardState)){\n                                    this.removeKing(ourPiece)\n                                } break;\n                            }\n                            case PieceType.KING : {\n                                if (isLegalKingMove(enemyPiece.x, enemyPiece.y, dx, dy, enemyTeam, boardState)){\n                                    this.removeKing(ourPiece)\n                                } break;\n                            }\n                            case PieceType.WIERD_XY: {\n                                if (isWH(enemyPiece.x, enemyPiece.y, dx, dy, enemyTeam, boardState)){\n                                    return true;\n                                }\n                                break;\n                            }\n                            case PieceType.WIERD_D: {\n                                if (isWD(enemyPiece.x, enemyPiece.y, dx, dy, enemyTeam, boardState)){\n                                    return true;\n                                }\n                                break;\n                            }\n                        }       \n                    }\n                }\n            } \n        }\n    }\n    // Returns true if your team has a king in check.  The increment should usually be set to 0 \n    // but exists for checking the no castling through check rule \n    isMyKingInCheck(team : TeamType, boardState : Piece []) : boolean {\n        const ref = new Referee()\n        const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        const myKing = boardState.find(p => p.SuperPiece.team === team \n                                        && p.SuperPiece.subPieces.length === 1\n                                        && p.SuperPiece.subPieces[0] === PieceType.KING) \n        if (myKing){ \n            for (let i = 0; i < boardState.length; i++){\n                const p = boardState[i];\n                if (p.SuperPiece.team === enemyTeam) {\n                    const piecesThatCanTakeMyKing = ref.getPossiblePieces(p.x, p.y, myKing.x, myKing.y, p.SuperPiece, boardState,  enemyTeam)\n                    if (piecesThatCanTakeMyKing.length > 0){\n                        return true\n                    }\n                }\n            }\n        }\n        return false    \n        }\n\n\n    //Returns true if the enemy team has no legal moves\n    isCheckMate(team : TeamType, boardState : Piece []): boolean{\n        const CLICKED = CLICKED1 && CLICKED2\n        const ref = new Referee()\n        const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        for (let j = AXIS.length - 1; j >= 0; j-- ){\n            for (let i = 0; i < AXIS.length; i++ ) {\n                for (let k = 0; k < boardState.length; k ++ ){\n                    const p = boardState[k] \n                    if (p.SuperPiece.team === enemyTeam)  {               \n                        const legalMove = ref.getPossiblePieces(p.x, p.y, i, j,  p.SuperPiece, boardState, enemyTeam)\n                        if (legalMove.length > 0|| !CLICKED){\n                            fakeMove(p.x, p.y, i, j,  legalMove, enemyTeam, boardState)\n                            const inCheck = this.isMyKingInCheck(enemyTeam, boardState)\n                            this.deepCopy(boardState)\n                            if (!inCheck){\n                                return false   \n                            }                   \n                        } \n                    }\n                }\n            \n            }\n        }        \n        return true\n\n    }\n\n}"]},"metadata":{},"sourceType":"module"}