{"ast":null,"code":"import { TeamType } from '../constants';\nexport function pawnIsBlockaded(x, y, boardState) {\n  const piece = boardState.find(p => p.x === x && p.y === y);\n  const occupied = piece ? true : false;\n  return occupied;\n}\nexport function setEnPassant(px, py, boardState) {\n  boardState.forEach(p => {\n    if (p.x === px && p.y === py) {\n      p.enPassantable = true;\n    } else {\n      p.enPassantable = false;\n    }\n  });\n}\nexport function checkEnPassant(x, y, boardState) {\n  const piece = boardState.find(p => p.x === x && p.y === y);\n\n  if (piece && piece.enPassantable) {\n    return piece.enPassantable;\n  }\n\n  return false;\n}\nexport function unsetEnPassant(boardState) {\n  boardState.forEach(p => {\n    p.enPassantable = false;\n  });\n}\nexport function isFriendlyPiece(x, y, team, boardState) {\n  const piece = boardState.find(p => p.x === x && p.y === y);\n  const occupied = piece && piece.team === team ? true : false;\n  return occupied;\n}\nexport function isPawnStartingMove(px, py, x, y, team, boardState, increment) {\n  const startingRow = team === TeamType.WHITE ? 1 : 6;\n\n  if (py === startingRow && px === x && py === y - 2 * increment) {\n    if (!pawnIsBlockaded(x, y, boardState) && !pawnIsBlockaded(x, y - increment, boardState)) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function isPawnNormalMove(px, py, x, y, team, boardState, increment) {\n  const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n\n  if (py === y - increment && px === x) {\n    if (!pawnIsBlockaded(x, y, boardState)) {\n      return true;\n    }\n  }\n\n  if ((x === px + 1 || x === px - 1) && py === y - increment && isFriendlyPiece(x, y, enemyTeam, boardState)) {\n    return true;\n  }\n\n  return false;\n}\nexport function isEnPassant(px, py, x, y, team, boardState, increment) {\n  const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n\n  if ((x === px + 1 || x === px - 1) && py === y - increment && isFriendlyPiece(x, py, enemyTeam, boardState)) {\n    if (checkEnPassant(x, py, boardState)) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/pawnLogic.ts"],"names":["TeamType","pawnIsBlockaded","x","y","boardState","piece","find","p","occupied","setEnPassant","px","py","forEach","enPassantable","checkEnPassant","unsetEnPassant","isFriendlyPiece","team","isPawnStartingMove","increment","startingRow","WHITE","isPawnNormalMove","enemyTeam","BLACK","isEnPassant"],"mappings":"AAAA,SAAgBA,QAAhB,QAAgC,cAAhC;AAEA,OAAO,SAASC,eAAT,CAAyBC,CAAzB,EAAqCC,CAArC,EAAgDC,UAAhD,EAAgF;AACnF,QAAMC,KAAK,GAAGD,UAAU,CAACE,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACL,CAAF,KAAQA,CAAR,IAAaK,CAAC,CAACJ,CAAF,KAAQA,CAA1C,CAAd;AACA,QAAMK,QAAQ,GAAIH,KAAK,GAAG,IAAH,GAAU,KAAjC;AACA,SAAOG,QAAP;AACH;AAED,OAAO,SAASC,YAAT,CAAsBC,EAAtB,EAAmCC,EAAnC,EAAgDP,UAAhD,EAAsE;AACrEA,EAAAA,UAAU,CAACQ,OAAX,CAAmBL,CAAC,IAAI;AACpB,QAAIA,CAAC,CAACL,CAAF,KAAQQ,EAAR,IAAcH,CAAC,CAACJ,CAAF,KAAQQ,EAA1B,EAA6B;AACzBJ,MAAAA,CAAC,CAACM,aAAF,GAAkB,IAAlB;AACH,KAFD,MAEM;AACFN,MAAAA,CAAC,CAACM,aAAF,GAAkB,KAAlB;AACH;AACJ,GAND;AAOH;AAEL,OAAO,SAASC,cAAT,CAAyBZ,CAAzB,EAAqCC,CAArC,EAAiDC,UAAjD,EAAkF;AACrF,QAAMC,KAAK,GAAGD,UAAU,CAACE,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACL,CAAF,KAAQA,CAAR,IAAaK,CAAC,CAACJ,CAAF,KAAQA,CAA1C,CAAd;;AACA,MAAIE,KAAK,IAAIA,KAAK,CAACQ,aAAnB,EAAiC;AAC7B,WAAOR,KAAK,CAACQ,aAAb;AACH;;AAAC,SAAO,KAAP;AACL;AAED,OAAO,SAASE,cAAT,CAAyBX,UAAzB,EAA+C;AAClDA,EAAAA,UAAU,CAACQ,OAAX,CAAmBL,CAAC,IAAI;AAChBA,IAAAA,CAAC,CAACM,aAAF,GAAkB,KAAlB;AACP,GAFD;AAGH;AAED,OAAO,SAASG,eAAT,CAAyBd,CAAzB,EAAqCC,CAArC,EAAgDc,IAAhD,EAAiEb,UAAjE,EAAiG;AACpG,QAAMC,KAAK,GAAGD,UAAU,CAACE,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACL,CAAF,KAAQA,CAAR,IAAaK,CAAC,CAACJ,CAAF,KAAQA,CAA1C,CAAd;AACA,QAAMK,QAAQ,GAAIH,KAAK,IAAIA,KAAK,CAACY,IAAN,KAAeA,IAAxB,GAA+B,IAA/B,GAAsC,KAAxD;AACA,SAAOT,QAAP;AACH;AAED,OAAO,SAASU,kBAAT,CAA4BR,EAA5B,EAAyCC,EAAzC,EAAsDT,CAAtD,EAAkEC,CAAlE,EAC6Bc,IAD7B,EAC8Cb,UAD9C,EACqEe,SADrE,EACgG;AACnG,QAAMC,WAAW,GAAGH,IAAI,KAAKjB,QAAQ,CAACqB,KAAlB,GAA0B,CAA1B,GAA8B,CAAlD;;AACA,MAAKV,EAAE,KAAKS,WAAP,IAAsBV,EAAE,KAAKR,CAA9B,IAAqCS,EAAE,KAAKR,CAAC,GAAG,IAAIgB,SAAxD,EAAmE;AAC/D,QAAI,CAAClB,eAAe,CAACC,CAAD,EAAIC,CAAJ,EAAOC,UAAP,CAAhB,IAAsC,CAACH,eAAe,CAACC,CAAD,EAAIC,CAAC,GAAGgB,SAAR,EAAmBf,UAAnB,CAA1D,EAAyF;AACrF,aAAO,IAAP;AACH;AACJ;;AAAC,SAAO,KAAP;AACL;AAED,OAAO,SAASkB,gBAAT,CAA0BZ,EAA1B,EAAuCC,EAAvC,EAAoDT,CAApD,EAAgEC,CAAhE,EACyBc,IADzB,EAC0Cb,UAD1C,EACiEe,SADjE,EAC6F;AAChG,QAAMI,SAAS,GAAGN,IAAI,KAAKjB,QAAQ,CAACqB,KAAlB,GAA0BrB,QAAQ,CAACwB,KAAnC,GAA2CxB,QAAQ,CAACqB,KAAtE;;AACA,MAAIV,EAAE,KAAKR,CAAC,GAAGgB,SAAX,IAAwBT,EAAE,KAAKR,CAAnC,EAAqC;AACjC,QAAI,CAACD,eAAe,CAACC,CAAD,EAAIC,CAAJ,EAAOC,UAAP,CAApB,EAAuC;AACnC,aAAO,IAAP;AACH;AACJ;;AACD,MAAI,CAACF,CAAC,KAAKQ,EAAE,GAAG,CAAX,IAAgBR,CAAC,KAAKQ,EAAE,GAAE,CAA3B,KAAkCC,EAAE,KAAKR,CAAC,GAAGgB,SAA7C,IAA2DH,eAAe,CAACd,CAAD,EAAIC,CAAJ,EAAOoB,SAAP,EAAkBnB,UAAlB,CAA9E,EAA6G;AACzG,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH;AAGD,OAAO,SAASqB,WAAT,CAAqBf,EAArB,EAAkCC,EAAlC,EAA+CT,CAA/C,EAA2DC,CAA3D,EAC0Bc,IAD1B,EAC2Cb,UAD3C,EACkEe,SADlE,EAC8F;AACjG,QAAMI,SAAS,GAAGN,IAAI,KAAKjB,QAAQ,CAACqB,KAAlB,GAA0BrB,QAAQ,CAACwB,KAAnC,GAA2CxB,QAAQ,CAACqB,KAAtE;;AACA,MAAI,CAACnB,CAAC,KAAKQ,EAAE,GAAG,CAAX,IAAgBR,CAAC,KAAKQ,EAAE,GAAE,CAA3B,KAAkCC,EAAE,KAAKR,CAAC,GAAGgB,SAA7C,IAA2DH,eAAe,CAACd,CAAD,EAAIS,EAAJ,EAAQY,SAAR,EAAmBnB,UAAnB,CAA9E,EAA8G;AAC1G,QAAIU,cAAc,CAACZ,CAAD,EAAIS,EAAJ,EAAQP,UAAR,CAAlB,EAAsC;AAClC,aAAO,IAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH","sourcesContent":["import { Piece, TeamType } from '../constants'\n\nexport function pawnIsBlockaded(x : number, y: number, boardState : Piece []): boolean {\n    const piece = boardState.find(p => p.x === x && p.y === y) \n    const occupied =  piece ? true : false\n    return occupied\n}\n\nexport function setEnPassant(px : number, py : number, boardState : Piece []){\n        boardState.forEach(p => {\n            if (p.x === px && p.y === py){\n                p.enPassantable = true\n            } else{\n                p.enPassantable = false\n            }\n        })\n    }\n\nexport function checkEnPassant (x : number, y : number, boardState : Piece []) : boolean {\n    const piece = boardState.find(p => p.x === x && p.y === y)\n    if (piece && piece.enPassantable){\n        return piece.enPassantable  \n    } return false\n}\n\nexport function unsetEnPassant( boardState : Piece []){\n    boardState.forEach(p => {\n            p.enPassantable = false\n    })\n}\n\nexport function isFriendlyPiece(x : number, y: number, team : TeamType, boardState : Piece []): boolean {\n    const piece = boardState.find(p => p.x === x && p.y === y)\n    const occupied =  piece && piece.team === team ? true : false\n    return occupied\n}\n\nexport function isPawnStartingMove(px : number, py : number, x : number, y : number, \n                                    team : TeamType, boardState : Piece [], increment : number):boolean{\n    const startingRow = team === TeamType.WHITE ? 1 : 6\n    if ((py === startingRow && px === x) && (py === y - 2 * increment)){\n        if (!pawnIsBlockaded(x, y, boardState) && !pawnIsBlockaded(x, y - increment, boardState)){\n            return true\n        }\n    } return false\n}\n\nexport function isPawnNormalMove(px : number, py : number, x : number, y : number, \n                                team : TeamType, boardState : Piece [], increment : number): boolean{\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n    if (py === y - increment && px === x){\n        if (!pawnIsBlockaded(x, y, boardState)){\n            return true;\n        } \n    }\n    if ((x === px + 1 || x === px -1) && (py === y - increment) && isFriendlyPiece(x, y, enemyTeam, boardState)) {\n        return true\n    } \n    return false \n} \n\n\nexport function isEnPassant(px : number, py : number, x : number, y : number,\n                                 team : TeamType, boardState : Piece [], increment : number): boolean{\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n    if ((x === px + 1 || x === px -1) && (py === y - increment) && isFriendlyPiece(x, py, enemyTeam, boardState)) {\n        if (checkEnPassant(x, py, boardState)){\n            return true\n        }\n    }\n    return false\n}"]},"metadata":{},"sourceType":"module"}