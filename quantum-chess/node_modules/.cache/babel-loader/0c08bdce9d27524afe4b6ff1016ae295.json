{"ast":null,"code":"var _jsxFileName = \"/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/chessboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport Tile from '../Tile/Tile';\nimport './chessboard.css';\nimport Referee from '../../referee/Referee';\nimport { VERTICAL_AXIS, HORIZONTAL_AXIS, GRID_SIZE, TeamType, initialBoardState } from '../../constants';\nimport Checker from '../../referee/boardChecks';\nimport { PROMOTED_PIECE, IMAGE, CLICKED } from '../PopUp/PopUp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard() {\n  _s();\n\n  const [activePiece, setActivePiece] = useState(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const [pieces, setPieces] = useState(initialBoardState);\n  const [activePlayer, setActivePlayer] = useState(TeamType.WHITE);\n  const chessboardRef = useRef(null);\n  const referee = new Referee();\n  const checker = new Checker();\n  let board = [];\n\n  function deepCopy() {\n    const oldBoardState = [];\n    pieces.forEach(p => oldBoardState.push({\n      image: p.image,\n      x: p.x,\n      y: p.y,\n      team: p.team,\n      type: p.type,\n      enPassantable: p.enPassantable,\n      canCastle: p.canCastle,\n      promoted: p.promoted\n    }));\n    return oldBoardState;\n  }\n\n  function switchPlayer() {\n    const nextPlayer = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    setActivePlayer(nextPlayer);\n  }\n\n  function revert() {\n    if (activePiece) {\n      activePiece.style.position = 'relative';\n      activePiece.style.removeProperty('left');\n      activePiece.style.removeProperty('top');\n    }\n  }\n\n  function promotePieces() {\n    const promotedPiece = pieces.find(p => p.promoted === true);\n\n    if (promotedPiece) {\n      const id = pieces.indexOf(promotedPiece);\n      pieces[id] = {\n        image: IMAGE,\n        x: promotedPiece.x,\n        y: promotedPiece.y,\n        taken: false,\n        team: promotedPiece.team,\n        type: PROMOTED_PIECE,\n        enPassantable: false,\n        promoted: false\n      };\n      console.log(IMAGE, PROMOTED_PIECE, promotedPiece.team);\n      console.log(promotedPiece.x, promotedPiece.y);\n    }\n  }\n\n  function grabPiece(e) {\n    const chessboard = chessboardRef.current;\n    const element = e.target;\n\n    if (element.classList.contains('chess-piece') && chessboard) {\n      setGridX(Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE));\n      setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE) / GRID_SIZE)));\n      const x = e.clientX - GRID_SIZE / 2;\n      const y = e.clientY - GRID_SIZE / 2;\n      element.style.position = 'absolute';\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n\n    if (activePiece && chessboard) {\n      const x = e.clientX - GRID_SIZE / 2;\n      const y = e.clientY - GRID_SIZE / 2;\n      activePiece.style.position = 'absolute';\n      activePiece.style.left = `${x}px`;\n      activePiece.style.top = `${y}px`;\n    }\n  }\n\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n\n    if (activePiece && chessboard) {\n      if (CLICKED) {\n        promotePieces();\n      }\n\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE) / GRID_SIZE));\n      const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY);\n\n      if (currentPiece) {\n        const oldBoardState = deepCopy();\n        const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces, activePlayer);\n\n        if (validMove) {\n          switchPlayer();\n          setPieces(pieces);\n        } else {\n          setPieces(oldBoardState);\n          revert();\n        }\n      }\n    }\n\n    setActivePiece(null);\n  }\n\n  for (let j = VERTICAL_AXIS.length - 1; j >= 0; j--) {\n    for (let i = 0; i < HORIZONTAL_AXIS.length; i++) {\n      const number = i + j;\n      const piece = pieces.find(p => p.x === i && p.y === j);\n      let image = piece ? piece.image : undefined;\n      const promotedPiece = pieces.find(p => p.promoted === true);\n      const team = promotedPiece && promotedPiece.y === 7 ? TeamType.WHITE : TeamType.BLACK;\n\n      if (promotedPiece && promotedPiece.x === i && promotedPiece.y === j) {\n        console.log('here');\n        board.push( /*#__PURE__*/_jsxDEV(Tile, {\n          image: image,\n          number: number,\n          team: team,\n          isPromotion: true\n        }, `${i}, ${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 28\n        }, this));\n      } else {\n        board.push( /*#__PURE__*/_jsxDEV(Tile, {\n          image: image,\n          number: number,\n          team: team,\n          isPromotion: false\n        }, `${i}, ${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 28\n        }, this));\n      }\n    }\n  }\n\n  if (false) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chessboardRef,\n      onMouseUp: e => dropPiece(e),\n      onMouseMove: e => movePiece(e),\n      onMouseDown: e => grabPiece(e),\n      id: \"chessboard\",\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chessboardRef,\n        onMouseUp: e => dropPiece(e),\n        onMouseMove: e => movePiece(e),\n        onMouseDown: e => grabPiece(e),\n        className: \"chessboard grayed-out\",\n        children: board\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mate\",\n        children: \" check mate !!! \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 12\n    }, this);\n  }\n}\n\n_s(Chessboard, \"kdrAI8vopvD3bdD47ggtMzHSoI8=\");\n\n_c = Chessboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/chessboard.tsx"],"names":["React","useRef","useState","Tile","Referee","VERTICAL_AXIS","HORIZONTAL_AXIS","GRID_SIZE","TeamType","initialBoardState","Checker","PROMOTED_PIECE","IMAGE","CLICKED","Chessboard","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","pieces","setPieces","activePlayer","setActivePlayer","WHITE","chessboardRef","referee","checker","board","deepCopy","oldBoardState","forEach","p","push","image","x","y","team","type","enPassantable","canCastle","promoted","switchPlayer","nextPlayer","BLACK","revert","style","position","removeProperty","promotePieces","promotedPiece","find","id","indexOf","taken","console","log","grabPiece","e","chessboard","current","element","target","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","left","top","movePiece","dropPiece","currentPiece","validMove","isValidMove","j","length","i","number","piece","undefined"],"mappings":"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","sourcesContent":["import React, {useRef, useState, } from 'react';\nimport Tile from '../Tile/Tile';\nimport './chessboard.css';\nimport Referee from '../../referee/Referee'\nimport {VERTICAL_AXIS, HORIZONTAL_AXIS, GRID_SIZE, Piece, TeamType, initialBoardState} from '../../constants'\nimport Checker from '../../referee/boardChecks'\nimport { PROMOTED_PIECE , IMAGE, CLICKED} from '../PopUp/PopUp';\n\nexport default function Chessboard(){\n    const [activePiece, setActivePiece] = useState<HTMLElement | null>(null) \n    const [gridX, setGridX] = useState(0);\n    const [gridY, setGridY] = useState(0);\n    const [pieces, setPieces]  = useState<Piece[]>(initialBoardState);\n    const [activePlayer, setActivePlayer] = useState<TeamType>(TeamType.WHITE);\n    const chessboardRef = useRef<HTMLDivElement>(null);\n    const referee = new Referee();\n    const checker = new Checker();\n    let board = [];\n\n    function deepCopy() {\n        const oldBoardState : Piece[] = [];\n        pieces.forEach(p => oldBoardState.push({image : p.image, x : p.x,  y : p.y,\n                                                team : p.team, type : p.type, \n                                                enPassantable : p.enPassantable,\n                                                canCastle: p.canCastle,\n                                                promoted: p.promoted}))\n        return oldBoardState\n    }\n\n    function switchPlayer(){\n        const nextPlayer = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        setActivePlayer(nextPlayer) \n    }\n\n    function revert(){\n        if (activePiece){\n            activePiece.style.position = 'relative';\n            activePiece.style.removeProperty('left');\n            activePiece.style.removeProperty('top');\n        }\n    }\n\n    function promotePieces(){\n        const promotedPiece = pieces.find(p => p.promoted === true)\n        if (promotedPiece){\n            const id = pieces.indexOf(promotedPiece)\n            pieces[id] = {image : IMAGE, x : promotedPiece.x,  y: promotedPiece.y, taken : false,\n                        team : promotedPiece.team, type : PROMOTED_PIECE, enPassantable : false,\n                        promoted : false}\n            console.log(IMAGE, PROMOTED_PIECE, promotedPiece.team)\n            console.log(promotedPiece.x, promotedPiece.y)\n        }\n    }\n\n    function grabPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        const element = e.target as HTMLElement\n        if (element.classList.contains('chess-piece') && chessboard){\n            setGridX(Math.floor((e.clientX - chessboard.offsetLeft)/GRID_SIZE));\n            setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE)/GRID_SIZE)));\n            const x = e.clientX - GRID_SIZE/2;\n            const y = e.clientY - GRID_SIZE/2;\n            element.style.position = 'absolute'; \n            element.style.left = `${x}px`;\n            element.style.top = `${y}px`;\n            setActivePiece(element)    \n        }\n    \n    }\n    \n    function movePiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        if (activePiece && chessboard){\n            const x = e.clientX - GRID_SIZE/2;\n            const y = e.clientY - GRID_SIZE/2;\n            activePiece.style.position = 'absolute'; \n            activePiece.style.left = `${x}px`;\n            activePiece.style.top = `${y}px`;\n        }\n    }\n    \n    function dropPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current;\n        if (activePiece && chessboard){\n            if (CLICKED){\n                promotePieces()\n            }  \n            const x = Math.floor((e.clientX - chessboard.offsetLeft)/GRID_SIZE);\n            const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE)/GRID_SIZE))\n            const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY)\n            if (currentPiece){\n                const oldBoardState = deepCopy()\n                const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces, activePlayer);                \n                \n                if (validMove){  \n                    switchPlayer()\n                    setPieces(pieces)\n                } else {\n                    setPieces(oldBoardState)\n                    revert()\n                }\n            }\n        }\n        setActivePiece(null);\n    }\n\n    for (let j = VERTICAL_AXIS.length - 1; j >= 0; j-- ){\n        for (let i = 0; i < HORIZONTAL_AXIS.length; i++ ) {\n            const number = i + j;\n            const piece = pieces.find(p => p.x === i && p.y === j) \n            let image = piece ? piece.image : undefined\n            const promotedPiece = pieces.find(p => p.promoted === true)\n            const team = promotedPiece && promotedPiece.y === 7 ? TeamType.WHITE : TeamType.BLACK \n            if (promotedPiece && promotedPiece.x === i && promotedPiece.y === j){\n                console.log('here')\n                board.push(<Tile key = {`${i}, ${j}`} image = {image} number = {number} team = {team} isPromotion = {true}/>);\n            } else {\n                board.push(<Tile key = {`${i}, ${j}`} image = {image} number = {number} team = {team} isPromotion = {false}/>);\n            }\n        }\n    }\n    if (false){\n    return <div \n    ref = {chessboardRef} \n    onMouseUp = {e => dropPiece(e)} \n    onMouseMove = {e => movePiece(e)} \n    onMouseDown = {e => grabPiece(e)} \n    id = 'chessboard'>{board}\n    </div>;\n    } else {\n    return <div><div \n    ref = {chessboardRef} \n    onMouseUp = {e => dropPiece(e)} \n    onMouseMove = {e => movePiece(e)} \n    onMouseDown = {e => grabPiece(e)} \n    className = 'chessboard grayed-out' >{board}\n    </div> \n    <div className = 'mate' > check mate !!! </div>\n    </div>;\n    }\n}"]},"metadata":{},"sourceType":"module"}