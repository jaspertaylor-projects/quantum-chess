{"ast":null,"code":"var _jsxFileName = \"/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/chessboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport Tile from '../Tile/Tile';\nimport './chessboard.css';\nimport Referee from '../../referee/Referee';\nimport { verticalAxis, horizontalAxis, TeamType, initialBoardState } from '../../constants';\nimport Checker from './boardChecks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard() {\n  _s();\n\n  const [activePiece, setActivePiece] = useState(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessboardRef = useRef(null);\n  const referee = new Referee();\n  const checker = new Checker();\n  const [activePlayer, setActivePlayer] = useState(TeamType.WHITE);\n  const [inCheck, setInCheck] = useState(false);\n\n  function revert() {\n    if (activePiece) {\n      activePiece.style.position = 'relative';\n      activePiece.style.removeProperty('left');\n      activePiece.style.removeProperty('top');\n    }\n  }\n\n  function grabPiece(e) {\n    const chessboard = chessboardRef.current;\n    const element = e.target;\n\n    if (element.classList.contains('chess-piece') && chessboard) {\n      setGridX(Math.floor((e.clientX - chessboard.offsetLeft) / 100));\n      setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)));\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      element.style.position = 'absolute';\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      activePiece.style.position = 'absolute';\n\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY);\n\n      if (currentPiece) {\n        const oldBoardState = [];\n        pieces.forEach(p => oldBoardState.push(p));\n        const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces, activePlayer);\n\n        if (validMove) {\n          setPieces(pieces);\n          const nextPlayer = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n          setActivePlayer(nextPlayer);\n          const takenPiece = pieces.find(p => p.taken === true);\n          const id1 = pieces.indexOf(currentPiece);\n          currentPiece.x = x;\n          currentPiece.y = y;\n          pieces[id1] = currentPiece;\n\n          if (takenPiece) {\n            const id2 = pieces.indexOf(takenPiece);\n            pieces.splice(id2, 1);\n          }\n\n          setPieces(pieces);\n\n          if (checker.isMyKingInCheck(currentPiece.team, pieces)) {\n            console.log('here');\n            setPieces(oldBoardState);\n            setPieces(oldBoardState);\n            revert();\n          }\n        } else {\n          revert();\n        }\n      }\n    }\n\n    setActivePiece(null);\n  }\n\n  let board = [];\n\n  for (let j = verticalAxis.length - 1; j >= 0; j--) {\n    for (let i = 0; i < horizontalAxis.length; i++) {\n      const number = i + j;\n      let image = undefined;\n      pieces.forEach(p => {\n        if (p.x === i && p.y === j) {\n          image = p.image;\n        }\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: image,\n        number: number\n      }, `${i}, ${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 24\n      }, this));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chessboardRef,\n    onMouseUp: e => dropPiece(e),\n    onMouseMove: e => movePiece(e),\n    onMouseDown: e => grabPiece(e),\n    id: \"chessboard\",\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Chessboard, \"sd0aJzhLUQ4n4qqP5WJC/4zSQPE=\");\n\n_c = Chessboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/chessboard.tsx"],"names":["React","useRef","useState","Tile","Referee","verticalAxis","horizontalAxis","TeamType","initialBoardState","Checker","Chessboard","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","pieces","setPieces","chessboardRef","referee","checker","activePlayer","setActivePlayer","WHITE","inCheck","setInCheck","revert","style","position","removeProperty","grabPiece","e","chessboard","current","element","target","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","x","y","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","currentPiece","find","p","oldBoardState","forEach","push","validMove","isValidMove","type","team","nextPlayer","BLACK","takenPiece","taken","id1","indexOf","id2","splice","isMyKingInCheck","console","log","board","j","length","i","number","image","undefined"],"mappings":"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","sourcesContent":["import React, {useRef, useState } from 'react';\nimport Tile from '../Tile/Tile';\nimport './chessboard.css';\nimport Referee from '../../referee/Referee'\nimport {verticalAxis, horizontalAxis, Piece, TeamType, initialBoardState} from '../../constants'\nimport Checker from './boardChecks'\n\nexport default function Chessboard(){\n    const [activePiece, setActivePiece] = useState<HTMLElement | null>(null) \n    const [gridX, setGridX] = useState(0);\n    const [gridY, setGridY] = useState(0);\n    const [pieces, setPieces]  = useState<Piece[]>(initialBoardState);\n    const chessboardRef = useRef<HTMLDivElement>(null);\n    const referee = new Referee();\n    const checker = new Checker();\n    const [activePlayer, setActivePlayer] = useState<TeamType>(TeamType.WHITE);\n    const [inCheck, setInCheck] = useState<boolean>(false)\n\n    function revert(){\n        if (activePiece){\n            activePiece.style.position = 'relative';\n            activePiece.style.removeProperty('left');\n            activePiece.style.removeProperty('top');\n        }\n    }\n\n    function grabPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        const element = e.target as HTMLElement\n        if (element.classList.contains('chess-piece') && chessboard){\n            setGridX(Math.floor((e.clientX - chessboard.offsetLeft)/100));\n            setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800)/100)));\n            const x = e.clientX - 50;\n            const y = e.clientY - 50;\n            element.style.position = 'absolute'; \n            element.style.left = `${x}px`;\n            element.style.top = `${y}px`;\n            setActivePiece(element)    \n        }\n    \n    }\n    \n    function movePiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        if (activePiece && chessboard){\n            const minX = chessboard.offsetLeft - 25;\n            const minY = chessboard.offsetTop - 25;\n            const maxX = chessboard.offsetLeft + chessboard.clientWidth -75;\n            const maxY = chessboard.offsetTop + chessboard.clientHeight -75;\n            const x = e.clientX -50;\n            const y = e.clientY -50;\n            activePiece.style.position = 'absolute'; \n            if (x < minX) {\n                activePiece.style.left = `${minX}px` ;\n            } else if (x > maxX) {\n                activePiece.style.left = `${maxX}px`;\n            } else {\n                activePiece.style.left = `${x}px`;\n            }\n            if (y < minY) {\n                activePiece.style.top = `${minY}px`;\n            } else if (y > maxY) {\n                activePiece.style.top = `${maxY}px`;\n            } else {\n                activePiece.style.top = `${y}px`;\n            }\n        }\n    }\n    \n    function dropPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current;\n        if (activePiece && chessboard){\n            const x = Math.floor((e.clientX - chessboard.offsetLeft)/100);\n            const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800)/100))\n            const currentPiece = pieces.find(p => p.x === gridX && p.y ===gridY)\n            if (currentPiece){\n                const oldBoardState : Piece[] = [];\n                pieces.forEach(p => oldBoardState.push(p))\n                const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces, activePlayer);                \n                if (validMove){\n                    setPieces(pieces)\n                    const nextPlayer = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n                    setActivePlayer(nextPlayer)                    \n                    const takenPiece = pieces.find(p => p.taken === true)\n                    const id1 = pieces.indexOf(currentPiece)\n                    currentPiece.x = x\n                    currentPiece.y = y\n                    pieces[id1] = currentPiece\n                    if (takenPiece){\n                        const id2 = pieces.indexOf(takenPiece)\n                        pieces.splice(id2, 1)\n                    }\n                    setPieces(pieces)\n                    if (checker.isMyKingInCheck(currentPiece.team, pieces)){\n                        console.log('here')\n                        setPieces(oldBoardState)\n                        setPieces(oldBoardState)\n                        revert()\n                    }\n                } else {\n                revert()\n                }\n            }\n        }\n        setActivePiece(null);\n    }\n    let board = [];\n    for (let j = verticalAxis.length - 1; j >= 0; j-- ){\n        for (let i = 0; i < horizontalAxis.length; i++ ) {\n            const number = i + j;\n            let image = undefined;\n            pieces.forEach(p => {\n                if (p.x === i && p.y === j){\n                    image = p.image;\n                }\n                \n            }); \n            board.push(<Tile key = {`${i}, ${j}`} image = {image} number = {number}/>);\n        }\n    }\n    return <div \n    ref = {chessboardRef} \n    onMouseUp = {e => dropPiece(e)} \n    onMouseMove = {e => movePiece(e)} \n    onMouseDown = {e => grabPiece(e)} \n    id = 'chessboard'>{board}</div>;\n}"]},"metadata":{},"sourceType":"module"}