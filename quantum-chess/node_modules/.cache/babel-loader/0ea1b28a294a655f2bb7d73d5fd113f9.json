{"ast":null,"code":"import _classCallCheck from\"/home/jaybird/Coding Projects/Chess4/chess/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/jaybird/Coding Projects/Chess4/chess/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{PieceType,TeamType}from\"../../constants\";import{isLegalBishopMove,isLegalRookMove,isLegalQueenMove,isLegalKingMove,isLegalNightMove}from\"../../referee/pieceLogic\";var Checker=/*#__PURE__*/function(){function Checker(){_classCallCheck(this,Checker);}_createClass(Checker,[{key:\"isMyKingInCheck\",value:function isMyKingInCheck(team,boardState){var enemyTeam=team===TeamType.WHITE?TeamType.BLACK:TeamType.WHITE;var myKing=boardState.find(function(p){return p.team===team&&p.type===PieceType.KING;});boardState.forEach(function(p){if(myKing&&p.team===enemyTeam){var dx=myKing.x-p.x;var dy=myKing.y-p.y;switch(p.type){case PieceType.NIGHT:{if(isLegalNightMove(p.x,p.y,dx,dy,boardState)){return true;}break;}case PieceType.BISHOP:{console.log('im a bishop');if(isLegalBishopMove(p.x,p.y,dx,dy,boardState)){console.log('I think I can get your king');return true;}break;}case PieceType.ROOK:{if(isLegalRookMove(p.x,p.y,dx,dy,boardState)){return true;}break;}case PieceType.QUEEN:{if(isLegalQueenMove(p.x,p.y,dx,dy,boardState)){return true;}break;}case PieceType.KING:{if(isLegalKingMove(p.x,p.y,dx,dy,boardState)){return true;}break;}}}});return false;}}]);return Checker;}();export{Checker as default};","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/boardChecks.ts"],"names":["PieceType","TeamType","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","Checker","team","boardState","enemyTeam","WHITE","BLACK","myKing","find","p","type","KING","forEach","dx","x","dy","y","NIGHT","BISHOP","console","log","ROOK","QUEEN"],"mappings":"gUAAA,OAASA,SAAT,CAAoBC,QAApB,KAA2C,iBAA3C,CACA,OAASC,iBAAT,CAA4BC,eAA5B,CAA6CC,gBAA7C,CAA+DC,eAA/D,CAAgFC,gBAAhF,KAAuG,0BAAvG,C,GAEqBC,CAAAA,O,8HACjB,yBAAgBC,IAAhB,CAAiCC,UAAjC,CAAkE,CAClE,GAAMC,CAAAA,SAAS,CAAGF,IAAI,GAAKP,QAAQ,CAACU,KAAlB,CAA0BV,QAAQ,CAACW,KAAnC,CAA2CX,QAAQ,CAACU,KAAtE,CACA,GAAME,CAAAA,MAAM,CAAGJ,UAAU,CAACK,IAAX,CAAgB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACP,IAAF,GAAWA,IAAX,EAAmBO,CAAC,CAACC,IAAF,GAAWhB,SAAS,CAACiB,IAA5C,EAAjB,CAAf,CACAR,UAAU,CAACS,OAAX,CAAmB,SAAAH,CAAC,CAAI,CACpB,GAAIF,MAAM,EAAIE,CAAC,CAACP,IAAF,GAAWE,SAAzB,CAAoC,CAChC,GAAMS,CAAAA,EAAE,CAAGN,MAAM,CAACO,CAAP,CAAWL,CAAC,CAACK,CAAxB,CACA,GAAMC,CAAAA,EAAE,CAAGR,MAAM,CAACS,CAAP,CAAWP,CAAC,CAACO,CAAxB,CACA,OAAQP,CAAC,CAACC,IAAV,EACI,IAAKhB,CAAAA,SAAS,CAACuB,KAAf,CAAuB,CACnB,GAAIjB,gBAAgB,CAACS,CAAC,CAACK,CAAH,CAAML,CAAC,CAACO,CAAR,CAAWH,EAAX,CAAeE,EAAf,CAAmBZ,UAAnB,CAApB,CAAmD,CAC/C,MAAO,KAAP,CACH,CAAC,MACL,CACD,IAAKT,CAAAA,SAAS,CAACwB,MAAf,CAAwB,CACpBC,OAAO,CAACC,GAAR,CAAY,aAAZ,EACA,GAAIxB,iBAAiB,CAACa,CAAC,CAACK,CAAH,CAAML,CAAC,CAACO,CAAR,CAAWH,EAAX,CAAeE,EAAf,CAAmBZ,UAAnB,CAArB,CAAoD,CAChDgB,OAAO,CAACC,GAAR,CAAY,6BAAZ,EACA,MAAO,KAAP,CACH,CAAC,MACL,CACD,IAAK1B,CAAAA,SAAS,CAAC2B,IAAf,CAAsB,CAClB,GAAIxB,eAAe,CAACY,CAAC,CAACK,CAAH,CAAML,CAAC,CAACO,CAAR,CAAWH,EAAX,CAAeE,EAAf,CAAmBZ,UAAnB,CAAnB,CAAkD,CAC9C,MAAO,KAAP,CACH,CAAC,MACL,CACD,IAAKT,CAAAA,SAAS,CAAC4B,KAAf,CAAuB,CACnB,GAAIxB,gBAAgB,CAACW,CAAC,CAACK,CAAH,CAAML,CAAC,CAACO,CAAR,CAAWH,EAAX,CAAeE,EAAf,CAAmBZ,UAAnB,CAApB,CAAmD,CAC/C,MAAO,KAAP,CACH,CAAC,MACL,CACD,IAAKT,CAAAA,SAAS,CAACiB,IAAf,CAAsB,CAClB,GAAIZ,eAAe,CAACU,CAAC,CAACK,CAAH,CAAML,CAAC,CAACO,CAAR,CAAWH,EAAX,CAAeE,EAAf,CAAmBZ,UAAnB,CAAnB,CAAkD,CAC9C,MAAO,KAAP,CACH,CAAC,MACL,CA3BL,CA8BH,CACJ,CAnCD,EAoCA,MAAO,MAAP,CACH,C,8BAzCoBF,O","sourcesContent":["import { PieceType, TeamType, Piece } from \"../../constants\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove} from \"../../referee/pieceLogic\"\n\nexport default class Checker{\n    isMyKingInCheck(team : TeamType, boardState : Piece []) : boolean {\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n    const myKing = boardState.find(p => p.team === team && p.type === PieceType.KING) \n    boardState.forEach(p => {\n        if (myKing && p.team === enemyTeam) {\n            const dx = myKing.x - p.x\n            const dy = myKing.y - p.y\n            switch (p.type){\n                case PieceType.NIGHT : {\n                    if (isLegalNightMove(p.x, p.y, dx, dy, boardState)){\n                        return true;\n                    } break;\n                }\n                case PieceType.BISHOP : {\n                    console.log('im a bishop')\n                    if (isLegalBishopMove(p.x, p.y, dx, dy, boardState)){\n                        console.log('I think I can get your king')\n                        return true;\n                    } break;\n                }\n                case PieceType.ROOK : {\n                    if (isLegalRookMove(p.x, p.y, dx, dy, boardState)){\n                        return true;\n                    } break;\n                }\n                case PieceType.QUEEN : {\n                    if (isLegalQueenMove(p.x, p.y, dx, dy, boardState)){\n                        return true;\n                    } break;\n                }\n                case PieceType.KING : {\n                    if (isLegalKingMove(p.x, p.y, dx, dy, boardState)){\n                        return true;\n                    } break;\n                }\n            }\n\n        }\n    })\n    return false\n}\n}"]},"metadata":{},"sourceType":"module"}