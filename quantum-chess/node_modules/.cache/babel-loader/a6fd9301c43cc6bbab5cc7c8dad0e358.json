{"ast":null,"code":"var _jsxFileName = \"/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/chessboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport Tile from '../Tile/Tile';\nimport PopUp from '../PopUp/PopUp';\nimport './chessboard.css';\nimport Referee from '../../referee/Referee';\nimport { VERTICAL_AXIS, HORIZONTAL_AXIS, GRID_SIZE, TeamType, initialBoardState } from '../../constants';\nimport Checker from '../../referee/boardChecks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard() {\n  _s();\n\n  const [activePiece, setActivePiece] = useState(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const [pieces, setPieces] = useState(initialBoardState);\n  const [activePlayer, setActivePlayer] = useState(TeamType.WHITE);\n  const [promote, setPromote] = useState({\n    x: 0,\n    y: 0,\n    isPromoted: false\n  });\n  const chessboardRef = useRef(null);\n  const referee = new Referee();\n  const checker = new Checker();\n  let board = [];\n\n  function switchPlayer() {\n    const nextPlayer = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    setActivePlayer(nextPlayer);\n  }\n\n  function deepCopy() {\n    const oldBoardState = [];\n    pieces.forEach(p => oldBoardState.push({\n      image: p.image,\n      x: p.x,\n      y: p.y,\n      team: p.team,\n      type: p.type,\n      enPassantable: p.enPassantable,\n      canCastle: p.canCastle,\n      promoted: p.promoted\n    }));\n    return oldBoardState;\n  }\n\n  function revert() {\n    if (activePiece) {\n      activePiece.style.position = 'relative';\n      activePiece.style.removeProperty('left');\n      activePiece.style.removeProperty('top');\n    }\n  }\n\n  function takePiece(p) {\n    const id2 = pieces.indexOf(p);\n    pieces.splice(id2, 1);\n  }\n\n  function teleportPiece(p) {\n    let tele = 0;\n\n    if (p.x === 7) {\n      tele = -2;\n    } else {\n      tele = 3;\n    }\n\n    p.x = p.x + tele;\n    p.teleported = false;\n  }\n\n  function grabPiece(e) {\n    const chessboard = chessboardRef.current;\n    const element = e.target;\n\n    if (element.classList.contains('chess-piece') && chessboard) {\n      setGridX(Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE));\n      setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE) / GRID_SIZE)));\n      const x = e.clientX - GRID_SIZE / 2;\n      const y = e.clientY - GRID_SIZE / 2;\n      element.style.position = 'absolute';\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n\n    if (activePiece && chessboard) {\n      const x = e.clientX - GRID_SIZE / 2;\n      const y = e.clientY - GRID_SIZE / 2;\n      activePiece.style.position = 'absolute';\n      activePiece.style.left = `${x}px`;\n      activePiece.style.top = `${y}px`;\n    }\n  }\n\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE) / GRID_SIZE));\n      const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY);\n\n      if (currentPiece) {\n        const oldBoardState = deepCopy();\n        const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces, activePlayer);\n\n        if (validMove) {\n          const takenPiece = pieces.find(p => p.taken === true);\n\n          if (takenPiece) {\n            takePiece(takenPiece);\n          }\n\n          const teleportedPiece = pieces.find(p => p.teleported === true);\n\n          if (teleportedPiece) {\n            teleportPiece(teleportedPiece);\n          }\n\n          const promotedPiece = pieces.find(p => p.promoted === true);\n\n          if (promotedPiece) {\n            setPromote({\n              x: e.clientX,\n              y: e.clientY,\n              isPromoted: true\n            });\n          }\n\n          const id1 = pieces.indexOf(currentPiece);\n          currentPiece.x = x;\n          currentPiece.y = y;\n          pieces[id1] = currentPiece;\n\n          if (checker.isMyKingInCheck(currentPiece.team, pieces, 0)) {\n            setPieces(oldBoardState);\n            revert();\n          } else {\n            setPieces(pieces);\n            switchPlayer();\n          }\n        } else {\n          revert();\n        }\n      }\n    }\n\n    setActivePiece(null);\n  }\n\n  for (let j = VERTICAL_AXIS.length - 1; j >= 0; j--) {\n    for (let i = 0; i < HORIZONTAL_AXIS.length; i++) {\n      const number = i + j;\n      const piece = pieces.find(p => p.x === i && p.y === j);\n      let image = piece ? piece.image : undefined;\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: image,\n        number: number\n      }, `${i}, ${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 24\n      }, this));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chessboardRef,\n    onMouseUp: e => dropPiece(e),\n    onMouseMove: e => movePiece(e),\n    onMouseDown: e => grabPiece(e),\n    id: \"chessboard\",\n    children: [board, /*#__PURE__*/_jsxDEV(PopUp, {\n      isPromoted: promote.isPromoted,\n      x: promote.x,\n      y: promote.y\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Chessboard, \"Q9g5rUSKMUCb9lD3N45osBX0SsE=\");\n\n_c = Chessboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/chessboard.tsx"],"names":["React","useRef","useState","Tile","PopUp","Referee","VERTICAL_AXIS","HORIZONTAL_AXIS","GRID_SIZE","TeamType","initialBoardState","Checker","Chessboard","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","pieces","setPieces","activePlayer","setActivePlayer","WHITE","promote","setPromote","x","y","isPromoted","chessboardRef","referee","checker","board","switchPlayer","nextPlayer","BLACK","deepCopy","oldBoardState","forEach","p","push","image","team","type","enPassantable","canCastle","promoted","revert","style","position","removeProperty","takePiece","id2","indexOf","splice","teleportPiece","tele","teleported","grabPiece","e","chessboard","current","element","target","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","left","top","movePiece","dropPiece","currentPiece","find","validMove","isValidMove","takenPiece","taken","teleportedPiece","promotedPiece","id1","isMyKingInCheck","j","length","i","number","piece","undefined"],"mappings":"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","sourcesContent":["import React, {useRef, useState, } from 'react';\nimport Tile from '../Tile/Tile';\nimport PopUp from '../PopUp/PopUp';\nimport './chessboard.css';\nimport Referee from '../../referee/Referee'\nimport {VERTICAL_AXIS, HORIZONTAL_AXIS, GRID_SIZE, Piece, TeamType, initialBoardState, PromotionSquare} from '../../constants'\nimport Checker from '../../referee/boardChecks'\n\nexport default function Chessboard(){\n    const [activePiece, setActivePiece] = useState<HTMLElement | null>(null) \n    const [gridX, setGridX] = useState(0);\n    const [gridY, setGridY] = useState(0);\n    const [pieces, setPieces]  = useState<Piece[]>(initialBoardState);\n    const [activePlayer, setActivePlayer] = useState<TeamType>(TeamType.WHITE);\n    const [promote, setPromote] = useState<PromotionSquare>({x : 0, y : 0, isPromoted : false})\n    const chessboardRef = useRef<HTMLDivElement>(null);\n    const referee = new Referee();\n    const checker = new Checker();\n    let board = [];\n\n\n    function switchPlayer(){\n        const nextPlayer = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        setActivePlayer(nextPlayer) \n    }\n    function deepCopy() : Piece [] {\n        const oldBoardState : Piece[] = [];\n        pieces.forEach(p => oldBoardState.push({image : p.image, x : p.x,  y : p.y,\n                                                team : p.team, type : p.type, \n                                                enPassantable : p.enPassantable,\n                                                canCastle: p.canCastle,\n                                                promoted: p.promoted}))\n        return oldBoardState\n    }\n    function revert(){\n        if (activePiece){\n            activePiece.style.position = 'relative';\n            activePiece.style.removeProperty('left');\n            activePiece.style.removeProperty('top');\n        }\n    }\n\n    function takePiece(p : Piece){\n        const id2 = pieces.indexOf(p)\n        pieces.splice(id2, 1)\n    }\n    function teleportPiece(p : Piece){\n        let tele = 0;\n        if (p.x === 7){  \n            tele = -2\n        } else {\n            tele = 3\n        }\n        p.x = p.x + tele\n        p.teleported = false\n    }\n\n    function grabPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        const element = e.target as HTMLElement\n        if (element.classList.contains('chess-piece') && chessboard){\n            setGridX(Math.floor((e.clientX - chessboard.offsetLeft)/GRID_SIZE));\n            setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE)/GRID_SIZE)));\n            const x = e.clientX - GRID_SIZE/2;\n            const y = e.clientY - GRID_SIZE/2;\n            element.style.position = 'absolute'; \n            element.style.left = `${x}px`;\n            element.style.top = `${y}px`;\n            setActivePiece(element)    \n        }\n    \n    }\n    \n    function movePiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        if (activePiece && chessboard){\n            const x = e.clientX - GRID_SIZE/2;\n            const y = e.clientY - GRID_SIZE/2;\n            activePiece.style.position = 'absolute'; \n            activePiece.style.left = `${x}px`;\n            activePiece.style.top = `${y}px`;\n        }\n    }\n    \n    function dropPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current;\n        if (activePiece && chessboard){\n            const x = Math.floor((e.clientX - chessboard.offsetLeft)/GRID_SIZE);\n            const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE)/GRID_SIZE))\n            const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY)\n            if (currentPiece){\n                const oldBoardState = deepCopy()\n                const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces, activePlayer);                \n                if (validMove){  \n                    const takenPiece = pieces.find(p => p.taken === true)\n                    if (takenPiece){\n                        takePiece(takenPiece)\n                    }\n                    const teleportedPiece = pieces.find(p => p.teleported === true)\n                    if (teleportedPiece){\n                        teleportPiece(teleportedPiece)\n                    }\n                    const promotedPiece = pieces.find(p => p.promoted === true)\n                    if (promotedPiece){\n                        setPromote({x : e.clientX, y : e.clientY, isPromoted : true})\n                    }\n                    const id1 = pieces.indexOf(currentPiece)\n                    currentPiece.x = x\n                    currentPiece.y = y\n                    pieces[id1] = currentPiece\n                    if (checker.isMyKingInCheck(currentPiece.team, pieces, 0)){\n                        setPieces(oldBoardState)\n                        revert()\n                    } else {\n                        setPieces(pieces)\n                        switchPlayer()\n                    }\n                } else {\n                revert()\n                }\n            }\n        }\n        setActivePiece(null);\n    }\n\n    for (let j = VERTICAL_AXIS.length - 1; j >= 0; j-- ){\n        for (let i = 0; i < HORIZONTAL_AXIS.length; i++ ) {\n            const number = i + j;\n            const piece = pieces.find(p => p.x === i && p.y === j) \n            let image = piece ? piece.image : undefined\n            board.push(<Tile key = {`${i}, ${j}`} image = {image} number = {number}/>);\n        }\n    }\n    return <div \n    ref = {chessboardRef} \n    onMouseUp = {e => dropPiece(e)} \n    onMouseMove = {e => movePiece(e)} \n    onMouseDown = {e => grabPiece(e)} \n    id = 'chessboard'>{board}\n    <PopUp isPromoted =  {promote.isPromoted} x = {promote.x} y = {promote.y} />\n    </div>;\n}"]},"metadata":{},"sourceType":"module"}