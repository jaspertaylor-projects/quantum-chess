{"ast":null,"code":"import { PieceType, TeamType, GameState } from \"../constants\";\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove } from \"./pieceLogic\";\nexport default class Referee {\n  takePiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team);\n\n    if (piece) {\n      piece.taken = true;\n    }\n  }\n\n  endMove(x, y, team, boardState, valid, gs, gameState) {\n    if (!isFriendlyPiece(x, y, team, boardState)) {\n      gameState.push(gs);\n      this.takePiece(x, y, team, boardState);\n      unsetEnPassant(boardState);\n      valid.value = true;\n    }\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState, activePlayer, gameState) {\n    // Only the active player can move\n    if (team !== activePlayer) {\n      return [false, gameState];\n    } // A non-move is not a move\n\n\n    if (px === x && py === y) {\n      return [false, gameState];\n    } // A move off the board is not a move\n\n\n    if (x < 0 || y < 0 || x > 7 || y > 7) {\n      return [false, gameState];\n    }\n\n    var valid = {\n      value: false\n    };\n    let gs = GameState.NO_CHANGE;\n    const dx = x - px;\n    const dy = y - py;\n\n    switch (type) {\n      case PieceType.PAWN:\n        {\n          if (isPawnStartingMove(px, py, x, y, team, boardState)) {\n            setEnPassant(px, py, boardState);\n            return [true, gameState];\n          }\n\n          if (isPawnNormalMove(px, py, x, y, team, boardState)) {\n            this.endMove(x, y, team, boardState, valid, gs, gameState);\n            break;\n          }\n\n          if (isEnPassant(px, py, x, y, team, boardState)) {\n            this.endMove(x, py, team, boardState, valid, gs, gameState);\n            break;\n          }\n\n          break;\n        }\n\n      case PieceType.NIGHT:\n        {\n          if (isLegalNightMove(px, py, dx, dy, boardState)) {\n            this.endMove(x, y, team, boardState, valid, gs, gameState);\n            break;\n          }\n\n          break;\n        }\n\n      case PieceType.BISHOP:\n        {\n          if (isLegalBishopMove(px, py, dx, dy, boardState)) {\n            this.endMove(x, y, team, boardState, valid, gs, gameState);\n            break;\n          }\n\n          break;\n        }\n\n      case PieceType.ROOK:\n        {\n          if (isLegalRookMove(px, py, dx, dy, boardState)) {\n            if (activePlayer === TeamType.WHITE && px == 0) {\n              gs = GameState.WHITE_CASTLE_LEFT;\n            }\n\n            if (activePlayer === TeamType.BLACK && px == 0) {\n              gs = GameState.WHITE_CASTLE_LEFT;\n            }\n\n            if (activePlayer === TeamType.WHITE && px == 7) {\n              gs = GameState.WHITE_CASTLE_LEFT;\n            }\n\n            if (activePlayer === TeamType.BLACK && px == 7) {\n              gs = GameState.WHITE_CASTLE_LEFT;\n            }\n\n            this.endMove(x, y, team, boardState, valid, gs, gameState);\n            break;\n          }\n\n          break;\n        }\n\n      case PieceType.QUEEN:\n        {\n          if (isLegalQueenMove(px, py, dx, dy, boardState)) {\n            this.endMove(x, y, team, boardState, valid, gs, gameState);\n            break;\n          }\n\n          break;\n        }\n\n      case PieceType.KING:\n        {\n          if (isLegalKingMove(px, py, dx, dy, boardState)) {\n            this.endMove(x, y, team, boardState, valid, gs, gameState);\n            break;\n          }\n\n          break;\n        }\n    }\n\n    return [valid.value, gameState];\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","TeamType","GameState","isPawnNormalMove","isEnPassant","isPawnStartingMove","isFriendlyPiece","unsetEnPassant","setEnPassant","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","Referee","takePiece","x","y","team","boardState","piece","find","p","taken","endMove","valid","gs","gameState","push","value","isValidMove","px","py","type","activePlayer","NO_CHANGE","dx","dy","PAWN","NIGHT","BISHOP","ROOK","WHITE","WHITE_CASTLE_LEFT","BLACK","QUEEN","KING"],"mappings":"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","sourcesContent":["import { PieceType, TeamType, Piece, GameState } from \"../constants\"\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove} from \"./pieceLogic\"\n\nexport default class Referee{\n    takePiece(x : number, y: number, team : TeamType, boardState : Piece []){\n        const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team)  \n        if (piece) {\n            piece.taken = true\n        }\n    }\n    endMove(x : number, y: number, team : TeamType, boardState : Piece [], \n            valid : any, gs : GameState, gameState : GameState []){\n        if (!isFriendlyPiece(x, y, team, boardState)){\n            gameState.push(gs)\n            this.takePiece(x, y, team, boardState)\n            unsetEnPassant(boardState)\n            valid.value = true          \n        }\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, \n                team : TeamType, boardState : Piece [], activePlayer : TeamType, gameState : GameState [])\n                : [boolean, GameState []]{\n        // Only the active player can move\n        if (team !== activePlayer){\n            return [false, gameState]\n        }\n        // A non-move is not a move\n        if (px === x && py === y){\n            return [false, gameState]\n        }\n        // A move off the board is not a move\n        if (x < 0 || y < 0 || x > 7 || y > 7){\n            return [false, gameState]\n        }\n        var valid = { value: false }\n        let gs = GameState.NO_CHANGE\n        const dx = x - px\n        const dy = y - py\n\n        switch(type){\n            case PieceType.PAWN : {\n                if (isPawnStartingMove(px, py, x, y, team, boardState)){\n                    setEnPassant(px, py, boardState)\n                    return [true, gameState]\n                }\n                if (isPawnNormalMove(px, py, x, y, team, boardState)){\n                    this.endMove(x, y, team, boardState, valid, gs, gameState)\n                    break;\n                }\n                if (isEnPassant(px, py, x, y, team, boardState)){\n                    this.endMove(x, py, team, boardState, valid, gs, gameState)\n                    break;\n                }\n                break;\n            }\n            case PieceType.NIGHT : {\n                if (isLegalNightMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid, gs, gameState)\n                    break;\n                }\n                break;\n            }\n            case PieceType.BISHOP : {\n                if (isLegalBishopMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid, gs, gameState)\n                    break;\n                }\n                break;\n            }\n            case PieceType.ROOK : {\n                if (isLegalRookMove(px, py, dx, dy, boardState)){\n                    if (activePlayer === TeamType.WHITE && px == 0){\n                        gs = GameState.WHITE_CASTLE_LEFT\n                    }\n                    if (activePlayer === TeamType.BLACK && px == 0){\n                        gs = GameState.WHITE_CASTLE_LEFT\n                    }\n                    if (activePlayer === TeamType.WHITE && px == 7){\n                        gs = GameState.WHITE_CASTLE_LEFT\n                    }\n                    if (activePlayer === TeamType.BLACK && px == 7){\n                        gs = GameState.WHITE_CASTLE_LEFT\n                    }\n                    this.endMove(x, y, team, boardState, valid, gs, gameState)\n                    break;\n                }\n                break;\n            }\n            case PieceType.QUEEN : {\n                if (isLegalQueenMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid, gs, gameState)\n                    break;\n                }\n                break;\n            }\n            case PieceType.KING : {\n                if (isLegalKingMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid, gs, gameState)\n                    break;\n                }\n                break;\n            }\n        }\n    return [valid.value, gameState]\n    }\n}"]},"metadata":{},"sourceType":"module"}