{"ast":null,"code":"export function setEnPassant(px, py, boardState) {\n  boardState.forEach(p => {\n    if (p.x === px && p.y === py) {\n      p.enPassantable = true;\n    } else {\n      p.enPassantable = false;\n    }\n  });\n}\nexport function takeEnPassant(px, py, boardState) {\n  boardState.forEach(p => {\n    if (p.x === px && p.y === py) {\n      console.log('we in it now boiz');\n      const id = boardState.indexOf(p);\n      console.log(id);\n      boardState.slice(id, 1);\n    }\n  });\n}\nexport function checkEnPassant(x, y, boardState) {\n  const piece = boardState.find(p => p.x === x && p.y === y);\n\n  if (piece && piece.enPassantable) {\n    return piece.enPassantable;\n  }\n\n  return false;\n}\nexport function unsetEnPassant(boardState) {\n  boardState.forEach(p => {\n    p.enPassantable = false;\n  });\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/epRef.ts"],"names":["setEnPassant","px","py","boardState","forEach","p","x","y","enPassantable","takeEnPassant","console","log","id","indexOf","slice","checkEnPassant","piece","find","unsetEnPassant"],"mappings":"AAGA,OAAO,SAASA,YAAT,CAAsBC,EAAtB,EAAmCC,EAAnC,EAAgDC,UAAhD,EAAsE;AACrEA,EAAAA,UAAU,CAACC,OAAX,CAAmBC,CAAC,IAAI;AACpB,QAAIA,CAAC,CAACC,CAAF,KAAQL,EAAR,IAAcI,CAAC,CAACE,CAAF,KAAQL,EAA1B,EAA6B;AACzBG,MAAAA,CAAC,CAACG,aAAF,GAAkB,IAAlB;AACH,KAFD,MAEM;AACFH,MAAAA,CAAC,CAACG,aAAF,GAAkB,KAAlB;AACH;AACJ,GAND;AAOH;AAEL,OAAO,SAASC,aAAT,CAAuBR,EAAvB,EAAoCC,EAApC,EAAiDC,UAAjD,EAAuE;AAC1EA,EAAAA,UAAU,CAACC,OAAX,CAAmBC,CAAC,IAAI;AAChB,QAAIA,CAAC,CAACC,CAAF,KAAQL,EAAR,IAAcI,CAAC,CAACE,CAAF,KAAQL,EAA1B,EAA6B;AACzBQ,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,YAAMC,EAAE,GAAGT,UAAU,CAACU,OAAX,CAAmBR,CAAnB,CAAX;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYC,EAAZ;AACAT,MAAAA,UAAU,CAACW,KAAX,CAAiBF,EAAjB,EAAqB,CAArB;AACH;AACJ,GAPL;AAQC;AAEL,OAAO,SAASG,cAAT,CAAyBT,CAAzB,EAAqCC,CAArC,EAAiDJ,UAAjD,EAAkF;AACrF,QAAMa,KAAK,GAAGb,UAAU,CAACc,IAAX,CAAgBZ,CAAC,IAAIA,CAAC,CAACC,CAAF,KAAQA,CAAR,IAAaD,CAAC,CAACE,CAAF,KAAQA,CAA1C,CAAd;;AACA,MAAIS,KAAK,IAAIA,KAAK,CAACR,aAAnB,EAAiC;AAC7B,WAAOQ,KAAK,CAACR,aAAb;AACH;;AAAC,SAAO,KAAP;AACL;AAED,OAAO,SAASU,cAAT,CAAyBf,UAAzB,EAA+C;AAClDA,EAAAA,UAAU,CAACC,OAAX,CAAmBC,CAAC,IAAI;AAChBA,IAAAA,CAAC,CAACG,aAAF,GAAkB,KAAlB;AACP,GAFD;AAGH","sourcesContent":["import { Piece } from '../constants'\n\n\nexport function setEnPassant(px : number, py : number, boardState : Piece []){\n        boardState.forEach(p => {\n            if (p.x === px && p.y === py){\n                p.enPassantable = true\n            } else{\n                p.enPassantable = false\n            }\n        })\n    }\n\nexport function takeEnPassant(px : number, py : number, boardState : Piece []){\n    boardState.forEach(p => {\n            if (p.x === px && p.y === py){\n                console.log('we in it now boiz')    \n                const id = boardState.indexOf(p)\n                console.log(id)\n                boardState.slice(id, 1)\n            } \n        })\n    }\n\nexport function checkEnPassant (x : number, y : number, boardState : Piece []) : boolean {\n    const piece = boardState.find(p => p.x === x && p.y === y)\n    if (piece && piece.enPassantable){\n        return piece.enPassantable  \n    } return false\n}\n\nexport function unsetEnPassant( boardState : Piece []){\n    boardState.forEach(p => {\n            p.enPassantable = false\n    })\n}"]},"metadata":{},"sourceType":"module"}