{"ast":null,"code":"var _jsxFileName = \"/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/chessboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport Tile from '../Tile/Tile';\nimport './chessboard.css';\nimport Referee from '../../referee/Referee';\nimport { VERTICAL_AXIS, HORIZONTAL_AXIS, GRID_SIZE, TeamType, initialBoardState, initialGameState } from '../../constants';\nimport Checker from '../../referee/boardChecks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard() {\n  _s();\n\n  const [activePiece, setActivePiece] = useState(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const [pieces, setPieces] = useState(initialBoardState);\n  const [gameState, setGameState] = useState(initialGameState);\n  const [activePlayer, setActivePlayer] = useState(TeamType.WHITE);\n  const chessboardRef = useRef(null);\n  const referee = new Referee();\n  const checker = new Checker();\n\n  function switchPlayer() {\n    const nextPlayer = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    setActivePlayer(nextPlayer);\n  }\n\n  function deepCopy() {\n    const oldBoardState = [];\n    pieces.forEach(p => oldBoardState.push({\n      image: p.image,\n      x: p.x,\n      y: p.y,\n      team: p.team,\n      type: p.type,\n      enPassantable: p.enPassantable\n    }));\n    return oldBoardState;\n  }\n\n  function revert() {\n    if (activePiece) {\n      activePiece.style.position = 'relative';\n      activePiece.style.removeProperty('left');\n      activePiece.style.removeProperty('top');\n    }\n  }\n\n  function teleportPiece(p) {\n    const id = pieces.indexOf(p);\n    let tele = 0;\n\n    if (p.x == 7) {\n      tele = -2;\n    } else {\n      tele = 3;\n    }\n\n    p.x = p.x + tele;\n  }\n\n  function grabPiece(e) {\n    const chessboard = chessboardRef.current;\n    const element = e.target;\n\n    if (element.classList.contains('chess-piece') && chessboard) {\n      setGridX(Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE));\n      setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE) / GRID_SIZE)));\n      const x = e.clientX - GRID_SIZE / 2;\n      const y = e.clientY - -GRID_SIZE / 2;\n      element.style.position = 'absolute';\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n\n    if (activePiece && chessboard) {\n      const x = e.clientX - GRID_SIZE / 2;\n      const y = e.clientY - GRID_SIZE / 2;\n      activePiece.style.position = 'absolute';\n      activePiece.style.left = `${x}px`;\n      activePiece.style.top = `${y}px`;\n    }\n  }\n\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE) / GRID_SIZE));\n      console.log(x, y, e.clientX, e.clientY);\n      const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY);\n\n      if (currentPiece) {\n        const oldBoardState = deepCopy();\n        const [validMove, gameChanger] = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces, activePlayer, gameState);\n        console.log(gameChanger);\n        setGameState(gameState.concat(gameChanger));\n\n        if (validMove) {\n          setPieces(pieces);\n          const takenPiece = pieces.find(p => p.taken === true);\n          const teleportedPiece = pieces.find(p => p.teleported === true);\n\n          if (teleportedPiece) {\n            teleportPiece(teleportedPiece);\n          }\n\n          const id1 = pieces.indexOf(currentPiece);\n          currentPiece.x = x;\n          currentPiece.y = y;\n          pieces[id1] = currentPiece;\n\n          if (takenPiece) {\n            const id2 = pieces.indexOf(takenPiece);\n            pieces.splice(id2, 1);\n          }\n\n          setPieces(pieces);\n\n          if (checker.isMyKingInCheck(currentPiece.team, pieces, 0)) {\n            console.log('here');\n            setPieces(oldBoardState);\n            revert();\n          } else {\n            switchPlayer();\n          }\n        } else {\n          revert();\n        }\n      }\n    }\n\n    setActivePiece(null);\n  }\n\n  let board = [];\n\n  for (let j = VERTICAL_AXIS.length - 1; j >= 0; j--) {\n    for (let i = 0; i < HORIZONTAL_AXIS.length; i++) {\n      const number = i + j;\n      const piece = pieces.find(p => p.x === i && p.y === j);\n      let image = piece ? piece.image : undefined;\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: image,\n        number: number\n      }, `${i}, ${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 24\n      }, this));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chessboardRef,\n    onMouseUp: e => dropPiece(e),\n    onMouseMove: e => movePiece(e),\n    onMouseDown: e => grabPiece(e),\n    id: \"chessboard\",\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Chessboard, \"pX3hIOwmlHQGW+rD5cwpU44vPZk=\");\n\n_c = Chessboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/chessboard.tsx"],"names":["React","useRef","useState","Tile","Referee","VERTICAL_AXIS","HORIZONTAL_AXIS","GRID_SIZE","TeamType","initialBoardState","initialGameState","Checker","Chessboard","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","pieces","setPieces","gameState","setGameState","activePlayer","setActivePlayer","WHITE","chessboardRef","referee","checker","switchPlayer","nextPlayer","BLACK","deepCopy","oldBoardState","forEach","p","push","image","x","y","team","type","enPassantable","revert","style","position","removeProperty","teleportPiece","id","indexOf","tele","grabPiece","e","chessboard","current","element","target","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","left","top","movePiece","dropPiece","console","log","currentPiece","find","validMove","gameChanger","isValidMove","concat","takenPiece","taken","teleportedPiece","teleported","id1","id2","splice","isMyKingInCheck","board","j","length","i","number","piece","undefined"],"mappings":"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","sourcesContent":["import React, {useRef, useState } from 'react';\nimport Tile from '../Tile/Tile';\nimport './chessboard.css';\nimport Referee from '../../referee/Referee'\nimport {VERTICAL_AXIS, HORIZONTAL_AXIS, GRID_SIZE, Piece, TeamType, initialBoardState, GameState, initialGameState} from '../../constants'\nimport Checker from '../../referee/boardChecks'\n\nexport default function Chessboard(){\n    const [activePiece, setActivePiece] = useState<HTMLElement | null>(null) \n    const [gridX, setGridX] = useState(0);\n    const [gridY, setGridY] = useState(0);\n    const [pieces, setPieces]  = useState<Piece[]>(initialBoardState);\n    const [gameState, setGameState] = useState<GameState[]>(initialGameState)\n    const [activePlayer, setActivePlayer] = useState<TeamType>(TeamType.WHITE);\n    const chessboardRef = useRef<HTMLDivElement>(null);\n    const referee = new Referee();\n    const checker = new Checker();\n\n\n    function switchPlayer(){\n        const nextPlayer = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        setActivePlayer(nextPlayer) \n    }\n    function deepCopy() : Piece [] {\n        const oldBoardState : Piece[] = [];\n        pieces.forEach(p => oldBoardState.push({image : p.image, x : p.x,  y : p.y, team : p.team, type : p.type, enPassantable : p.enPassantable}))\n        return oldBoardState\n    }\n\n    function revert(){\n        if (activePiece){\n            activePiece.style.position = 'relative';\n            activePiece.style.removeProperty('left');\n            activePiece.style.removeProperty('top');\n        }\n    }\n    function teleportPiece(p : Piece){\n        const id = pieces.indexOf(p)\n        let tele = 0;\n        if (p.x == 7){  \n            tele = -2\n        } else {\n            tele = 3\n        }\n        p.x = p.x + tele\n\n    }\n\n    function grabPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        const element = e.target as HTMLElement\n        if (element.classList.contains('chess-piece') && chessboard){\n            setGridX(Math.floor((e.clientX - chessboard.offsetLeft)/GRID_SIZE));\n            setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE)/GRID_SIZE)));\n            const x = e.clientX - GRID_SIZE/2;\n            const y = e.clientY - -GRID_SIZE/2;\n            element.style.position = 'absolute'; \n            element.style.left = `${x}px`;\n            element.style.top = `${y}px`;\n            setActivePiece(element)    \n        }\n    \n    }\n    \n    function movePiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        if (activePiece && chessboard){\n            const x = e.clientX - GRID_SIZE/2;\n            const y = e.clientY - GRID_SIZE/2;\n            activePiece.style.position = 'absolute'; \n            activePiece.style.left = `${x}px`;\n            activePiece.style.top = `${y}px`;\n        }\n    }\n    \n    function dropPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current;\n        if (activePiece && chessboard){\n            const x = Math.floor((e.clientX - chessboard.offsetLeft)/GRID_SIZE);\n            const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE)/GRID_SIZE))\n            console.log(x, y, e.clientX, e.clientY)\n            const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY)\n            if (currentPiece){\n                const oldBoardState = deepCopy()\n                const [validMove, gameChanger] = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces, activePlayer, gameState);                \n                console.log(gameChanger)\n                setGameState(gameState.concat(gameChanger))\n                if (validMove){\n                    setPieces(pieces)\n                    const takenPiece = pieces.find(p => p.taken === true)\n                    const teleportedPiece = pieces.find(p => p.teleported === true)\n                    if (teleportedPiece){\n                        teleportPiece(teleportedPiece)\n                    }\n                    const id1 = pieces.indexOf(currentPiece)\n                    currentPiece.x = x\n                    currentPiece.y = y\n                    pieces[id1] = currentPiece\n                    if (takenPiece){\n                        const id2 = pieces.indexOf(takenPiece)\n                        pieces.splice(id2, 1)\n                    }\n                    setPieces(pieces)\n                    if (checker.isMyKingInCheck(currentPiece.team, pieces, 0)){\n                        console.log('here')\n                        setPieces(oldBoardState)\n                        revert()\n                    } else {\n                        switchPlayer()\n                    }\n                } else {\n                revert()\n                }\n            }\n        }\n        setActivePiece(null);\n    }\n\n\n    let board = [];\n    for (let j = VERTICAL_AXIS.length - 1; j >= 0; j-- ){\n        for (let i = 0; i < HORIZONTAL_AXIS.length; i++ ) {\n            const number = i + j;\n            const piece = pieces.find(p => p.x === i && p.y === j) \n            let image = piece ? piece.image : undefined\n            board.push(<Tile key = {`${i}, ${j}`} image = {image} number = {number}/>);\n        }\n    }\n    return <div \n    ref = {chessboardRef} \n    onMouseUp = {e => dropPiece(e)} \n    onMouseMove = {e => movePiece(e)} \n    onMouseDown = {e => grabPiece(e)} \n    id = 'chessboard'>{board}</div>;\n}"]},"metadata":{},"sourceType":"module"}