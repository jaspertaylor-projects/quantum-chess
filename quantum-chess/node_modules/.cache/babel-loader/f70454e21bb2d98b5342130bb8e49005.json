{"ast":null,"code":"import { PieceType, TeamType } from \"../constants\";\nimport { setEnPassant, checkEnPassant, unsetEnPassant, pawnIsBlockaded } from \"./pawnHelper\";\nexport default class Referee {\n  pathClear(px, py, dx, dy) {}\n\n  takePiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team);\n\n    if (piece) {\n      piece.taken = true;\n    }\n  }\n\n  isFriendlyPiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y);\n    const occupied = piece && piece.team === team ? true : false;\n    return occupied;\n  }\n\n  endMove(x, y, team, boardState, valid) {\n    if (!this.isFriendlyPiece(x, y, team, boardState)) {\n      this.takePiece(x, y, team, boardState);\n      unsetEnPassant(boardState);\n      valid.value = true;\n    }\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState, activePlayer) {\n    if (team !== activePlayer) {\n      return false;\n    }\n\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    var valid = {\n      value: false\n    }; //PAWN LOGIC \n    //May want to put each piece in different function\n\n    if (type === PieceType.PAWN) {\n      const startingRow = team === TeamType.WHITE ? 1 : 6;\n      const increment = team === TeamType.WHITE ? 1 : -1;\n      console.log(px, py, x, y, increment); // Moving Logic\n\n      if (py === startingRow && px === x && py === y - 2 * increment) {\n        if (!pawnIsBlockaded(x, y, boardState) && !pawnIsBlockaded(x, y - increment, boardState)) {\n          setEnPassant(px, py, boardState);\n          return true;\n        }\n      }\n\n      if (py === y - increment && px === x) {\n        if (!pawnIsBlockaded(x, y, boardState)) {\n          unsetEnPassant(boardState);\n          return true;\n        }\n      } // ATTACK LOGIC\n\n\n      if ((x === px + 1 || x === px - 1) && py === y - increment && this.isFriendlyPiece(x, y, enemyTeam, boardState)) {\n        this.endMove(x, y, team, boardState, valid);\n      }\n\n      if ((x === px + 1 || x === px - 1) && py === y - increment && this.isFriendlyPiece(x, py, enemyTeam, boardState)) {\n        if (checkEnPassant(x, py, boardState)) {\n          this.endMove(x, py, team, boardState, valid);\n        }\n      }\n    } // NIGHT LOGIC \n\n\n    if (type === PieceType.NIGHT) {\n      if ((px === x + 1 || px === x - 1) && (py === y + 2 || py === y - 2) || (py === y + 1 || py === y - 1) && (px === x + 2 || px === x - 2)) {\n        this.endMove(x, y, team, boardState, valid);\n      }\n    } // BISHOP LOGIC\n\n\n    if (type === PieceType.BISHOP) {\n      const dx = x - px;\n      const dy = x - py;\n\n      if (Math.abs(dx) === Math.abs(dy)) {\n        this.pathClear(px, py, dx, dy, boardState);\n        this.endMove(x, y, team, boardState, valid);\n      }\n    }\n\n    return valid.value;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","TeamType","setEnPassant","checkEnPassant","unsetEnPassant","pawnIsBlockaded","Referee","pathClear","px","py","dx","dy","takePiece","x","y","team","boardState","piece","find","p","taken","isFriendlyPiece","occupied","endMove","valid","value","isValidMove","type","activePlayer","enemyTeam","WHITE","BLACK","PAWN","startingRow","increment","console","log","NIGHT","BISHOP","Math","abs"],"mappings":"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","sourcesContent":["import { PieceType, TeamType, Piece } from \"../constants\"\nimport { setEnPassant , checkEnPassant, unsetEnPassant, pawnIsBlockaded} from \"./pawnHelper\"\n\nexport default class Referee{\n    pathClear(px : number, py : number, dx : number, dy : number){\n        \n    }\n    takePiece(x : number, y: number, team : TeamType, boardState : Piece []){\n        const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team)  \n        if (piece) {\n            piece.taken = true\n        }\n    }\n    isFriendlyPiece(x : number, y: number, team : TeamType, boardState : Piece []): boolean {\n        const piece = boardState.find(p => p.x === x && p.y === y)\n        const occupied =  piece && piece.team === team ? true : false\n        return occupied\n    }\n\n    endMove(x : number, y: number, team : TeamType, boardState : Piece [], valid : any){\n        if (!this.isFriendlyPiece(x, y, team, boardState)){\n            this.takePiece(x, y, team, boardState)\n            unsetEnPassant(boardState)\n            valid.value = true          \n        }\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, \n                team : TeamType, boardState : Piece [], activePlayer : TeamType){\n        if (team !== activePlayer){\n            return false\n        }\n        const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        var valid = { value: false }\n        //PAWN LOGIC \n        //May want to put each piece in different function\n        if (type === PieceType.PAWN){\n            const startingRow = team === TeamType.WHITE ? 1 : 6\n            const increment = team === TeamType.WHITE ? 1 : - 1\n            console.log(px, py, x, y, increment)\n            // Moving Logic\n            if ((py === startingRow && px === x) && (py === y - 2 * increment)){\n                if (!pawnIsBlockaded(x, y, boardState) && !pawnIsBlockaded(x, y - increment, boardState)){\n                    setEnPassant(px, py, boardState)\n                    return true\n                }\n            } \n            if (py === y - increment && px === x){\n                if (!pawnIsBlockaded(x, y, boardState)){\n                    unsetEnPassant(boardState)\n                    return true;\n                }\n            } \n            // ATTACK LOGIC\n            if ((x === px + 1 || x === px -1) && (py === y - increment) && this.isFriendlyPiece(x, y, enemyTeam, boardState)) {\n                this.endMove(x, y, team, boardState, valid)\n            }\n            if ((x === px + 1 || x === px -1) && (py === y - increment) && this.isFriendlyPiece(x, py, enemyTeam, boardState)) {\n                if (checkEnPassant(x, py, boardState)){\n                    this.endMove(x, py, team, boardState, valid)\n                }\n            }\n        }\n        // NIGHT LOGIC \n        if (type === PieceType.NIGHT){\n            if (((px === x + 1 || px === x - 1) &&  (py === y + 2 || py === y - 2)) ||\n                ((py === y + 1 || py === y - 1) &&  (px === x + 2 || px === x - 2))){\n                    this.endMove(x, y, team, boardState, valid)\n            }\n        }\n        // BISHOP LOGIC\n        if (type === PieceType.BISHOP){\n            const dx = x - px\n            const dy = x - py\n            if (Math.abs(dx) === Math.abs(dy)){\n                this.pathClear(px, py, dx, dy, boardState)\n                this.endMove(x, y, team, boardState, valid)\n            }\n        }\n\n        return valid.value\n    }\n}"]},"metadata":{},"sourceType":"module"}