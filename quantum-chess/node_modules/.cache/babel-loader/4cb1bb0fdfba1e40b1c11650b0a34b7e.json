{"ast":null,"code":"import _slicedToArray from\"/home/jaybird/Coding Projects/Chess4/chess/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useRef,useState}from'react';import Tile from'../Tile/Tile';import'./chessboard.css';import Referee from'../../referee/Referee';import{VERTICAL_AXIS,HORIZONTAL_AXIS,GRID_SIZE,TeamType,initialBoardState}from'../../constants';import Checker from'../../referee/boardChecks';import{jsx as _jsx}from\"react/jsx-runtime\";export default function Chessboard(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),activePiece=_useState2[0],setActivePiece=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),gridX=_useState4[0],setGridX=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),gridY=_useState6[0],setGridY=_useState6[1];var _useState7=useState(initialBoardState),_useState8=_slicedToArray(_useState7,2),pieces=_useState8[0],setPieces=_useState8[1];var _useState9=useState(TeamType.WHITE),_useState10=_slicedToArray(_useState9,2),activePlayer=_useState10[0],setActivePlayer=_useState10[1];var chessboardRef=useRef(null);var referee=new Referee();var checker=new Checker();function switchPlayer(){var nextPlayer=activePlayer===TeamType.WHITE?TeamType.BLACK:TeamType.WHITE;setActivePlayer(nextPlayer);}function deepCopy(){var oldBoardState=[];pieces.forEach(function(p){return oldBoardState.push({image:p.image,x:p.x,y:p.y,team:p.team,type:p.type,enPassantable:p.enPassantable});});return oldBoardState;}function revert(){if(activePiece){activePiece.style.position='relative';activePiece.style.removeProperty('left');activePiece.style.removeProperty('top');}}function takePiece(p){var id2=pieces.indexOf(p);pieces.splice(id2,1);}function teleportPiece(p){var tele=0;if(p.x===7){tele=-2;}else{tele=3;}p.x=p.x+tele;p.teleported=false;}function grabPiece(e){var chessboard=chessboardRef.current;var element=e.target;if(element.classList.contains('chess-piece')&&chessboard){setGridX(Math.floor((e.clientX-chessboard.offsetLeft)/GRID_SIZE));setGridY(Math.abs(Math.ceil((e.clientY-chessboard.offsetTop-8*GRID_SIZE)/GRID_SIZE)));var x=e.clientX-GRID_SIZE/2;var y=e.clientY- -GRID_SIZE/2;element.style.position='absolute';element.style.left=\"\".concat(x,\"px\");element.style.top=\"\".concat(y,\"px\");setActivePiece(element);}}function movePiece(e){var chessboard=chessboardRef.current;if(activePiece&&chessboard){var x=e.clientX-GRID_SIZE/2;var y=e.clientY-GRID_SIZE/2;activePiece.style.position='absolute';activePiece.style.left=\"\".concat(x,\"px\");activePiece.style.top=\"\".concat(y,\"px\");}}function dropPiece(e){var chessboard=chessboardRef.current;if(activePiece&&chessboard){var x=Math.floor((e.clientX-chessboard.offsetLeft)/GRID_SIZE);var y=Math.abs(Math.ceil((e.clientY-chessboard.offsetTop-8*GRID_SIZE)/GRID_SIZE));var currentPiece=pieces.find(function(p){return p.x===gridX&&p.y===gridY;});if(currentPiece){var oldBoardState=deepCopy();var validMove=referee.isValidMove(gridX,gridY,x,y,currentPiece.type,currentPiece.team,pieces,activePlayer);if(validMove){// leave this here in case I find a bug setPieces(pieces)\nvar takenPiece=pieces.find(function(p){return p.taken===true;});if(takenPiece){takePiece(takenPiece);}var teleportedPiece=pieces.find(function(p){return p.teleported===true;});if(teleportedPiece){teleportPiece(teleportedPiece);}var id1=pieces.indexOf(currentPiece);currentPiece.x=x;currentPiece.y=y;pieces[id1]=currentPiece;if(checker.isMyKingInCheck(currentPiece.team,pieces,0)){setPieces(oldBoardState);revert();}else{setPieces(pieces);switchPlayer();}}else{revert();}}}setActivePiece(null);}var board=[];var _loop=function _loop(j){var _loop2=function _loop2(i){var number=i+j;var piece=pieces.find(function(p){return p.x===i&&p.y===j;});var image=piece?piece.image:undefined;board.push(/*#__PURE__*/_jsx(Tile,{image:image,number:number},\"\".concat(i,\", \").concat(j)));};for(var i=0;i<HORIZONTAL_AXIS.length;i++){_loop2(i);}};for(var j=VERTICAL_AXIS.length-1;j>=0;j--){_loop(j);}return/*#__PURE__*/_jsx(\"div\",{ref:chessboardRef,onMouseUp:function onMouseUp(e){return dropPiece(e);},onMouseMove:function onMouseMove(e){return movePiece(e);},onMouseDown:function onMouseDown(e){return grabPiece(e);},id:\"chessboard\",children:board});}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/chessboard.tsx"],"names":["React","useRef","useState","Tile","Referee","VERTICAL_AXIS","HORIZONTAL_AXIS","GRID_SIZE","TeamType","initialBoardState","Checker","Chessboard","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","pieces","setPieces","WHITE","activePlayer","setActivePlayer","chessboardRef","referee","checker","switchPlayer","nextPlayer","BLACK","deepCopy","oldBoardState","forEach","p","push","image","x","y","team","type","enPassantable","revert","style","position","removeProperty","takePiece","id2","indexOf","splice","teleportPiece","tele","teleported","grabPiece","e","chessboard","current","element","target","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","left","top","movePiece","dropPiece","currentPiece","find","validMove","isValidMove","takenPiece","taken","teleportedPiece","id1","isMyKingInCheck","board","j","i","number","piece","undefined","length"],"mappings":"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","sourcesContent":["import React, {useRef, useState } from 'react';\nimport Tile from '../Tile/Tile';\nimport './chessboard.css';\nimport Referee from '../../referee/Referee'\nimport {VERTICAL_AXIS, HORIZONTAL_AXIS, GRID_SIZE, Piece, TeamType, initialBoardState} from '../../constants'\nimport Checker from '../../referee/boardChecks'\n\nexport default function Chessboard(){\n    const [activePiece, setActivePiece] = useState<HTMLElement | null>(null) \n    const [gridX, setGridX] = useState(0);\n    const [gridY, setGridY] = useState(0);\n    const [pieces, setPieces]  = useState<Piece[]>(initialBoardState);\n    const [activePlayer, setActivePlayer] = useState<TeamType>(TeamType.WHITE);\n    const chessboardRef = useRef<HTMLDivElement>(null);\n    const referee = new Referee();\n    const checker = new Checker();\n\n\n    function switchPlayer(){\n        const nextPlayer = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        setActivePlayer(nextPlayer) \n    }\n    function deepCopy() : Piece [] {\n        const oldBoardState : Piece[] = [];\n        pieces.forEach(p => oldBoardState.push({image : p.image, x : p.x,  y : p.y, team : p.team, type : p.type, enPassantable : p.enPassantable}))\n        return oldBoardState\n    }\n\n    function revert(){\n        if (activePiece){\n            activePiece.style.position = 'relative';\n            activePiece.style.removeProperty('left');\n            activePiece.style.removeProperty('top');\n        }\n    }\n\n    function takePiece(p : Piece){\n        const id2 = pieces.indexOf(p)\n        pieces.splice(id2, 1)\n    }\n    function teleportPiece(p : Piece){\n        let tele = 0;\n        if (p.x === 7){  \n            tele = -2\n        } else {\n            tele = 3\n        }\n        p.x = p.x + tele\n        p.teleported = false\n    }\n\n    function grabPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        const element = e.target as HTMLElement\n        if (element.classList.contains('chess-piece') && chessboard){\n            setGridX(Math.floor((e.clientX - chessboard.offsetLeft)/GRID_SIZE));\n            setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE)/GRID_SIZE)));\n            const x = e.clientX - GRID_SIZE/2;\n            const y = e.clientY - -GRID_SIZE/2;\n            element.style.position = 'absolute'; \n            element.style.left = `${x}px`;\n            element.style.top = `${y}px`;\n            setActivePiece(element)    \n        }\n    \n    }\n    \n    function movePiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        if (activePiece && chessboard){\n            const x = e.clientX - GRID_SIZE/2;\n            const y = e.clientY - GRID_SIZE/2;\n            activePiece.style.position = 'absolute'; \n            activePiece.style.left = `${x}px`;\n            activePiece.style.top = `${y}px`;\n        }\n    }\n    \n    function dropPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current;\n        if (activePiece && chessboard){\n            const x = Math.floor((e.clientX - chessboard.offsetLeft)/GRID_SIZE);\n            const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE)/GRID_SIZE))\n            const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY)\n            if (currentPiece){\n                const oldBoardState = deepCopy()\n                const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces, activePlayer);                \n                if (validMove){\n                    // leave this here in case I find a bug setPieces(pieces)\n                    const takenPiece = pieces.find(p => p.taken === true)\n                    if (takenPiece){\n                        takePiece(takenPiece)\n                    }\n                    const teleportedPiece = pieces.find(p => p.teleported === true)\n                    if (teleportedPiece){\n                        teleportPiece(teleportedPiece)\n                    }\n                    const id1 = pieces.indexOf(currentPiece)\n                    currentPiece.x = x\n                    currentPiece.y = y\n                    pieces[id1] = currentPiece\n                    if (checker.isMyKingInCheck(currentPiece.team, pieces, 0)){\n                        setPieces(oldBoardState)\n                        revert()\n                    } else {\n                        setPieces(pieces)\n                        switchPlayer()\n                    }\n                } else {\n                revert()\n                }\n            }\n        }\n        setActivePiece(null);\n    }\n\n\n    let board = [];\n    for (let j = VERTICAL_AXIS.length - 1; j >= 0; j-- ){\n        for (let i = 0; i < HORIZONTAL_AXIS.length; i++ ) {\n            const number = i + j;\n            const piece = pieces.find(p => p.x === i && p.y === j) \n            let image = piece ? piece.image : undefined\n            board.push(<Tile key = {`${i}, ${j}`} image = {image} number = {number}/>);\n        }\n    }\n    return <div \n    ref = {chessboardRef} \n    onMouseUp = {e => dropPiece(e)} \n    onMouseMove = {e => movePiece(e)} \n    onMouseDown = {e => grabPiece(e)} \n    id = 'chessboard'>{board}</div>;\n}"]},"metadata":{},"sourceType":"module"}