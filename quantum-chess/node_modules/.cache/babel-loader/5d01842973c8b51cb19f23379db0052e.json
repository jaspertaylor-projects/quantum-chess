{"ast":null,"code":"export function isLegalRookMove(px, py, dx, dy, boardState) {\n  if (dx === 0 || dy === 0) {\n    if (dx === 0) {\n      const y_dir = Math.sign(dy);\n\n      for (let i = 1; i < Math.abs(dy); i++) {\n        const obstructingPiece = boardState.find(p => p.x === px && p.y === py + i * y_dir);\n\n        if (obstructingPiece) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    if (dy === 0) {\n      const x_dir = Math.sign(dx);\n\n      for (let i = 1; i < Math.abs(dx); i++) {\n        const obstructingPiece = boardState.find(p => p.x === px + i * x_dir && p.y === py);\n\n        if (obstructingPiece) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function isLegalBishopMove(px, py, dx, dy, boardState) {\n  if (Math.abs(dx) === Math.abs(dy)) {\n    const x_dir = Math.sign(dx);\n    const y_dir = Math.sign(dy);\n\n    for (let i = 1; i < Math.abs(dx); i++) {\n      const obstructingPiece = boardState.find(p => p.x === px + i * x_dir && p.y === py + i * y_dir);\n\n      if (obstructingPiece) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/pathChecker.ts"],"names":["isLegalRookMove","px","py","dx","dy","boardState","y_dir","Math","sign","i","abs","obstructingPiece","find","p","x","y","x_dir","isLegalBishopMove"],"mappings":"AAEA,OAAO,SAASA,eAAT,CAAyBC,EAAzB,EAAsCC,EAAtC,EAAmDC,EAAnD,EAAgEC,EAAhE,EAA6EC,UAA7E,EAA6G;AAChH,MAAIF,EAAE,KAAK,CAAP,IAAYC,EAAE,KAAK,CAAvB,EAAyB;AACrB,QAAID,EAAE,KAAK,CAAX,EAAa;AACT,YAAMG,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUJ,EAAV,CAAd;;AACA,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,GAAL,CAASN,EAAT,CAApB,EAAkCK,CAAC,EAAnC,EAAuC;AACnC,cAAME,gBAAgB,GAAGN,UAAU,CAACO,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,CAAF,KAAQb,EAAR,IAAcY,CAAC,CAACE,CAAF,KAAQb,EAAE,GAAGO,CAAC,GAACH,KAAlD,CAAzB;;AACA,YAAIK,gBAAJ,EAAqB;AACjB,iBAAO,KAAP;AACH;AACJ;;AAAC,aAAO,IAAP;AACL;;AACD,QAAIP,EAAE,KAAK,CAAX,EAAa;AACT,YAAMY,KAAK,GAAGT,IAAI,CAACC,IAAL,CAAUL,EAAV,CAAd;;AACA,WAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,GAAL,CAASP,EAAT,CAApB,EAAkCM,CAAC,EAAnC,EAAuC;AACnC,cAAME,gBAAgB,GAAGN,UAAU,CAACO,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,CAAF,KAAQb,EAAE,GAAGQ,CAAC,GAACO,KAAf,IAAwBH,CAAC,CAACE,CAAF,KAAQb,EAArD,CAAzB;;AACA,YAAIS,gBAAJ,EAAqB;AACjB,iBAAO,KAAP;AACH;AACJ;;AAAC,aAAO,IAAP;AACL;AACJ;;AAAC,SAAO,KAAP;AACL;AAED,OAAO,SAASM,iBAAT,CAA2BhB,EAA3B,EAAwCC,EAAxC,EAAqDC,EAArD,EAAkEC,EAAlE,EAA+EC,UAA/E,EAA8G;AACjH,MAAIE,IAAI,CAACG,GAAL,CAASP,EAAT,MAAiBI,IAAI,CAACG,GAAL,CAASN,EAAT,CAArB,EAAkC;AAC9B,UAAMY,KAAK,GAAGT,IAAI,CAACC,IAAL,CAAUL,EAAV,CAAd;AACA,UAAMG,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUJ,EAAV,CAAd;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,GAAL,CAASP,EAAT,CAApB,EAAkCM,CAAC,EAAnC,EAAuC;AACnC,YAAME,gBAAgB,GAAGN,UAAU,CAACO,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,CAAF,KAAQb,EAAE,GAAGQ,CAAC,GAACO,KAAf,IAAwBH,CAAC,CAACE,CAAF,KAAQb,EAAE,GAAGO,CAAC,GAACH,KAA5D,CAAzB;;AACA,UAAIK,gBAAJ,EAAqB;AACjB,eAAO,KAAP;AACH;AACJ;;AAAC,WAAO,IAAP;AACL;;AAAC,SAAO,KAAP;AACL","sourcesContent":["import { Piece } from '../constants'\n\nexport function isLegalRookMove(px : number, py : number, dx : number, dy : number, boardState : Piece[]) : boolean {\n    if (dx === 0 || dy === 0){\n        if (dx === 0){\n            const y_dir = Math.sign(dy)\n            for (let i = 1; i < Math.abs(dy); i ++){\n                const obstructingPiece = boardState.find(p => p.x === px && p.y === py + i*y_dir) \n                if (obstructingPiece){\n                    return false\n                }\n            } return true\n        }\n        if (dy === 0){\n            const x_dir = Math.sign(dx)\n            for (let i = 1; i < Math.abs(dx); i ++){\n                const obstructingPiece = boardState.find(p => p.x === px + i*x_dir && p.y === py) \n                if (obstructingPiece){\n                    return false\n                }\n            } return true\n        }\n    } return false;\n}\n\nexport function isLegalBishopMove(px : number, py : number, dx : number, dy : number, boardState : Piece[]) : boolean{\n    if (Math.abs(dx) === Math.abs(dy)){\n        const x_dir = Math.sign(dx)\n        const y_dir = Math.sign(dy)\n        for (let i = 1; i < Math.abs(dx); i ++){\n            const obstructingPiece = boardState.find(p => p.x === px + i*x_dir && p.y === py + i*y_dir) \n            if (obstructingPiece){\n                return false\n            }\n        } return true\n    } return false\n}"]},"metadata":{},"sourceType":"module"}