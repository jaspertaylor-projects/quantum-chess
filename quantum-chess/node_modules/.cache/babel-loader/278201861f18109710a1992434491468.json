{"ast":null,"code":"var _jsxFileName = \"/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/chessboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport Tile from '../Tile/Tile';\nimport './chessboard.css';\nimport Referee from '../../referee/Referee';\nimport { verticalAxis, horizontalAxis, TeamType, PieceType } from '../../constants'; // Setting Up board starting position\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBoardState = [];\n\nfor (let p = 0; p < 2; p++) {\n  const type = p === 0 ? 'b' : 'w';\n  const team = p === 0 ? TeamType.BLACK : TeamType.WHITE;\n  const y = p === 0 ? 7 : 0; // Rooks\n\n  initialBoardState.push({\n    image: `assets/images/rook_${type}.png`,\n    x: 0,\n    y,\n    team,\n    type: PieceType.ROOK,\n    enPassantable: false\n  });\n  initialBoardState.push({\n    image: `assets/images/rook_${type}.png`,\n    x: 7,\n    y,\n    team,\n    type: PieceType.ROOK,\n    enPassantable: false\n  }); // Nights\n\n  initialBoardState.push({\n    image: `assets/images/night_${type}.png`,\n    x: 1,\n    y,\n    team,\n    type: PieceType.NIGHT,\n    enPassantable: false\n  });\n  initialBoardState.push({\n    image: `assets/images/night_${type}.png`,\n    x: 6,\n    y,\n    team,\n    type: PieceType.NIGHT,\n    enPassantable: false\n  }); // Bishops\n\n  initialBoardState.push({\n    image: `assets/images/bishop_${type}.png`,\n    x: 2,\n    y,\n    team,\n    type: PieceType.BISHOP,\n    enPassantable: false\n  });\n  initialBoardState.push({\n    image: `assets/images/bishop_${type}.png`,\n    x: 5,\n    y,\n    team,\n    type: PieceType.BISHOP,\n    enPassantable: false\n  }); // Queens\n\n  initialBoardState.push({\n    image: `assets/images/queen_${type}.png`,\n    x: 3,\n    y,\n    team,\n    type: PieceType.QUEEN,\n    enPassantable: false\n  }); // Kings\n\n  initialBoardState.push({\n    image: `assets/images/king_${type}.png`,\n    x: 4,\n    y,\n    team,\n    type: PieceType.KING,\n    enPassantable: false\n  });\n} // Pawns\n\n\nfor (let i = 0; i < horizontalAxis.length; i++) {\n  initialBoardState.push({\n    image: 'assets/images/pawn_b.png',\n    x: i,\n    y: 6,\n    team: TeamType.BLACK,\n    type: PieceType.PAWN,\n    enPassantable: false\n  });\n}\n\nfor (let i = 0; i < horizontalAxis.length; i++) {\n  initialBoardState.push({\n    image: 'assets/images/pawn_w.png',\n    x: i,\n    y: 1,\n    team: TeamType.WHITE,\n    type: PieceType.PAWN,\n    enPassantable: false\n  });\n}\n\nexport default function Chessboard() {\n  _s();\n\n  const [activePiece, setActivePiece] = useState(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessboardRef = useRef(null);\n  const referee = new Referee();\n  const activePlayer = TeamType.WHITE;\n\n  function grabPiece(e) {\n    const chessboard = chessboardRef.current;\n    const element = e.target;\n\n    if (element.classList.contains('chess-piece') && chessboard) {\n      setGridX(Math.floor((e.clientX - chessboard.offsetLeft) / 100));\n      setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100)));\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      element.style.position = 'absolute';\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      activePiece.style.position = 'absolute';\n\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / 100);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800) / 100));\n      const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY);\n\n      if (currentPiece) {\n        const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces, activePlayer);\n\n        if (validMove) {\n          activePlayer = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n          setPieces(pieces);\n          const takenPiece = pieces.find(p => p.taken === true);\n          const id1 = pieces.indexOf(currentPiece);\n          currentPiece.x = x;\n          currentPiece.y = y;\n          pieces[id1] = currentPiece;\n\n          if (takenPiece) {\n            const id2 = pieces.indexOf(takenPiece);\n            pieces.splice(id2, 1);\n          }\n\n          setPieces(pieces);\n        } else {\n          activePiece.style.position = 'relative';\n          activePiece.style.removeProperty('left');\n          activePiece.style.removeProperty('top');\n        }\n      }\n    }\n\n    setActivePiece(null);\n  }\n\n  let board = [];\n\n  for (let j = verticalAxis.length - 1; j >= 0; j--) {\n    for (let i = 0; i < horizontalAxis.length; i++) {\n      const number = i + j;\n      let image = undefined;\n      pieces.forEach(p => {\n        if (p.x === i && p.y === j) {\n          image = p.image;\n        }\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: image,\n        number: number\n      }, `${i}, ${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 24\n      }, this));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chessboardRef,\n    onMouseUp: e => dropPiece(e),\n    onMouseMove: e => movePiece(e),\n    onMouseDown: e => grabPiece(e),\n    id: \"chessboard\",\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Chessboard, \"WOplL0Qus13CGpIISUgYsfu+x4I=\");\n\n_c = Chessboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/chessboard.tsx"],"names":["React","useRef","useState","Tile","Referee","verticalAxis","horizontalAxis","TeamType","PieceType","initialBoardState","p","type","team","BLACK","WHITE","y","push","image","x","ROOK","enPassantable","NIGHT","BISHOP","QUEEN","KING","i","length","PAWN","Chessboard","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","pieces","setPieces","chessboardRef","referee","activePlayer","grabPiece","e","chessboard","current","element","target","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","style","position","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","currentPiece","find","validMove","isValidMove","takenPiece","taken","id1","indexOf","id2","splice","removeProperty","board","j","number","undefined","forEach"],"mappings":"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","sourcesContent":["import React, {useRef, useState } from 'react';\nimport Tile from '../Tile/Tile';\nimport './chessboard.css';\nimport Referee from '../../referee/Referee'\nimport {verticalAxis, horizontalAxis, Piece, TeamType, PieceType} from '../../constants'\n\n\n\n\n// Setting Up board starting position\nconst initialBoardState : Piece[] = [];\n\nfor (let p = 0; p < 2; p ++){\n    const type = p === 0 ? 'b': 'w';\n    const team = p === 0 ? TeamType.BLACK : TeamType.WHITE;\n    const y = p === 0 ?  7 : 0;\n    // Rooks\n    initialBoardState.push({image : `assets/images/rook_${type}.png`, x : 0,  y, team, type : PieceType.ROOK, enPassantable : false})\n    initialBoardState.push({image : `assets/images/rook_${type}.png`, x : 7,  y, team, type : PieceType.ROOK, enPassantable : false})\n\n    // Nights\n    initialBoardState.push({image : `assets/images/night_${type}.png`, x : 1,  y, team, type : PieceType.NIGHT, enPassantable : false})\n    initialBoardState.push({image : `assets/images/night_${type}.png`, x : 6,  y, team, type : PieceType.NIGHT, enPassantable : false})\n\n    // Bishops\n    initialBoardState.push({image : `assets/images/bishop_${type}.png`, x : 2,  y, team, type : PieceType.BISHOP, enPassantable : false})\n    initialBoardState.push({image : `assets/images/bishop_${type}.png`, x : 5,  y, team, type : PieceType.BISHOP, enPassantable : false})\n\n    // Queens\n    initialBoardState.push({image : `assets/images/queen_${type}.png`, x : 3,  y, team, type : PieceType.QUEEN, enPassantable : false})\n    // Kings\n    initialBoardState.push({image : `assets/images/king_${type}.png`, x : 4,  y, team, type : PieceType.KING, enPassantable : false})\n\n}\n\n// Pawns\nfor (let i = 0; i < horizontalAxis.length; i++){\n    initialBoardState.push({image : 'assets/images/pawn_b.png', x : i, y : 6, team : TeamType.BLACK, type : PieceType.PAWN, enPassantable : false})\n}\nfor (let i = 0; i < horizontalAxis.length; i++){\n    initialBoardState.push({image : 'assets/images/pawn_w.png', x : i, y : 1, team : TeamType.WHITE, type : PieceType.PAWN, enPassantable : false})\n}\n\n\n\nexport default function Chessboard(){\n    const [activePiece, setActivePiece] = useState<HTMLElement | null>(null) \n    const [gridX, setGridX] = useState(0);\n    const [gridY, setGridY] = useState(0);\n    const [pieces, setPieces]  = useState<Piece[]>(initialBoardState);\n    const chessboardRef = useRef<HTMLDivElement>(null);\n    const referee = new Referee();\n    const activePlayer = TeamType.WHITE;\n\n    function grabPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        const element = e.target as HTMLElement\n        if (element.classList.contains('chess-piece') && chessboard){\n            setGridX(Math.floor((e.clientX - chessboard.offsetLeft)/100));\n            setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800)/100)));\n            const x = e.clientX - 50;\n            const y = e.clientY - 50;\n            element.style.position = 'absolute'; \n            element.style.left = `${x}px`;\n            element.style.top = `${y}px`;\n            setActivePiece(element)    \n        }\n    \n    }\n    \n    function movePiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        if (activePiece && chessboard){\n            const minX = chessboard.offsetLeft - 25;\n            const minY = chessboard.offsetTop - 25;\n            const maxX = chessboard.offsetLeft + chessboard.clientWidth -75;\n            const maxY = chessboard.offsetTop + chessboard.clientHeight -75;\n            const x = e.clientX -50;\n            const y = e.clientY -50;\n            activePiece.style.position = 'absolute'; \n            if (x < minX) {\n                activePiece.style.left = `${minX}px` ;\n            } else if (x > maxX) {\n                activePiece.style.left = `${maxX}px`;\n            } else {\n                activePiece.style.left = `${x}px`;\n            }\n            if (y < minY) {\n                activePiece.style.top = `${minY}px`;\n            } else if (y > maxY) {\n                activePiece.style.top = `${maxY}px`;\n            } else {\n                activePiece.style.top = `${y}px`;\n            }\n        }\n    }\n    \n    function dropPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current;\n        if (activePiece && chessboard){\n            const x = Math.floor((e.clientX - chessboard.offsetLeft)/100);\n            const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 800)/100))\n            const currentPiece = pieces.find(p => p.x === gridX && p.y ===gridY)\n            if (currentPiece){\n                const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces, activePlayer);\n                if (validMove){\n                    activePlayer = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n                    setPieces(pieces)\n                    const takenPiece = pieces.find(p => p.taken === true)\n                    const id1 = pieces.indexOf(currentPiece)\n                    currentPiece.x = x\n                    currentPiece.y = y\n                    pieces[id1] = currentPiece\n                    if (takenPiece){\n                        const id2 = pieces.indexOf(takenPiece)\n                        pieces.splice(id2, 1)\n                    }\n                setPieces(pieces)\n                } else {\n                    activePiece.style.position = 'relative';\n                    activePiece.style.removeProperty('left');\n                    activePiece.style.removeProperty('top');\n                }\n            }\n        }\n        setActivePiece(null);\n    }\n\n\n\n\n\n    let board = [];\n    for (let j = verticalAxis.length - 1; j >= 0; j-- ){\n        for (let i = 0; i < horizontalAxis.length; i++ ) {\n            const number = i + j;\n            let image = undefined;\n            pieces.forEach(p => {\n                if (p.x === i && p.y === j){\n                    image = p.image;\n                }\n                \n            }); \n            board.push(<Tile key = {`${i}, ${j}`} image = {image} number = {number}/>);\n        }\n    }\n    return <div \n    ref = {chessboardRef} \n    onMouseUp = {e => dropPiece(e)} \n    onMouseMove = {e => movePiece(e)} \n    onMouseDown = {e => grabPiece(e)} \n    id = 'chessboard'>{board}</div>;\n}"]},"metadata":{},"sourceType":"module"}