{"ast":null,"code":"import { TAKEN_PIECES_BLACK, TAKEN_PIECES_WHITE } from \"../components/TakePiece/TakePiece\";\nimport { index_converter, PieceType, TeamType } from \"../constants\";\nconst all_pieces = [PieceType.KING, PieceType.QUEEN, PieceType.ROOK, PieceType.BISHOP, PieceType.NIGHT, PieceType.PAWN];\nlet whiteNumPiece = [1, 1, 2, 2, 2, 8];\nlet blackNumPiece = [1, 1, 2, 2, 2, 8];\nlet collapsedPiecesWhite = [0, 0, 0, 0, 0, 0];\nlet collapsedPiecesBlack = [0, 0, 0, 0, 0, 0];\nlet count = 0;\nexport function change_piece_count(new_piece, team) {\n  const piece_index = index_converter(new_piece);\n\n  if (team === TeamType.WHITE) {\n    whiteNumPiece[piece_index]++;\n    whiteNumPiece[5]--;\n  } else {\n    blackNumPiece[piece_index]++;\n    blackNumPiece[5]--;\n  }\n}\n\nfunction updateCollapsedPieces(boardState, team) {\n  let arr = team === TeamType.WHITE ? collapsedPiecesWhite : collapsedPiecesBlack;\n\n  for (let i = 0; i < all_pieces.length; i++) {\n    const ids = collapsed([all_pieces[i]], boardState, team);\n    arr[i] = ids.length;\n  }\n}\n\nfunction uncollapsed(piece, boardState, team) {\n  let ids = [];\n\n  for (let i = 0; i < boardState.length; i++) {\n    if (boardState[i].SuperPiece.subPieces.length > 1 && boardState[i].SuperPiece.subPieces.includes(piece) && boardState[i].SuperPiece.team === team) {\n      ids.push(i);\n    }\n  }\n\n  return ids;\n}\n\nfunction collapsed(piece, boardState, team) {\n  let ids = [];\n\n  for (let i = 0; i < boardState.length; i++) {\n    if (boardState[i].SuperPiece.equals([...piece]) && boardState[i].SuperPiece.team === team) {\n      ids.push(i);\n    }\n  }\n\n  return ids;\n}\n\nfunction remove(piece, boardState, team, ids) {\n  for (let p = 0; p < piece.length; p++) for (let i = 0; i < boardState.length; i++) {\n    if (!ids.includes(i) && boardState[i].SuperPiece.subPieces.includes(piece[p]) && boardState[i].SuperPiece.team === team) {\n      const id = boardState[i].SuperPiece.subPieces.indexOf(piece[p]);\n      boardState[i].SuperPiece.subPieces.splice(id, 1);\n      count = count + 1;\n    }\n  }\n}\n\nfunction removeAll(piece, boardState, ids) {\n  for (let i = 0; i < ids.length; i++) {\n    boardState[ids[i]].SuperPiece.subPieces = [piece];\n    count = count + 1;\n  }\n}\n\nfunction inductiveCollapse(boardState, team) {\n  const arr1 = team === TeamType.WHITE ? collapsedPiecesWhite : collapsedPiecesBlack;\n  const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK;\n\n  for (let i = 0; i < all_pieces.length; i++) {\n    const ids = uncollapsed(all_pieces[i], boardState, team);\n\n    if (ids.length + arr1[i] + arr2[i] === arr1[i]) {\n      removeAll(all_pieces[i], boardState, ids);\n    }\n  }\n}\n\nfunction first_level_collapse(boardState, team) {\n  const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece;\n  const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK;\n  const arr3 = team === TeamType.WHITE ? collapsedPiecesWhite : collapsedPiecesBlack;\n\n  for (let i = 0; i < all_pieces.length; i++) {\n    const ids = collapsed([all_pieces[i]], boardState, team);\n\n    if (ids.length + arr2[i] === arr1[i]) {\n      remove([all_pieces[i]], boardState, team, ids);\n    }\n  }\n}\n\nfunction second_level_collapse(boardState, team) {\n  const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece;\n  const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK;\n  const arr3 = team === TeamType.WHITE ? collapsedPiecesWhite : collapsedPiecesBlack;\n\n  for (let i = 0; i < all_pieces.length; i++) {\n    for (let j = i + 1; j < all_pieces.length; j++) {\n      const piece_combo = [all_pieces[i], all_pieces[j]];\n      const taken_sum = arr2[i] + arr2[j];\n      const collapsed_sum = arr3[i] + arr3[j];\n      const ids = collapsed(piece_combo, boardState, team);\n\n      if (ids.length + taken_sum + collapsed_sum === arr1[i] + arr1[j]) {\n        remove(piece_combo, boardState, team, ids);\n      }\n    }\n  }\n}\n\nfunction third_level_collapse(boardState, team) {\n  const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece;\n  const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK;\n  const arr3 = team === TeamType.WHITE ? collapsedPiecesWhite : collapsedPiecesBlack;\n\n  for (let i = 0; i < all_pieces.length; i++) {\n    for (let j = i + 1; j < all_pieces.length; j++) {\n      for (let k = j + 1; k < all_pieces.length; k++) {\n        const piece_combo = [all_pieces[i], all_pieces[j], all_pieces[k]];\n        const taken_sum = arr2[i] + arr2[j] + arr2[k];\n        const collapsed_sum = arr3[i] + arr3[j] + arr3[k];\n        const ids = collapsed(piece_combo, boardState, team);\n\n        if (ids.length + taken_sum + collapsed_sum === arr1[i] + arr1[j] + arr1[k]) {\n          remove(piece_combo, boardState, team, ids);\n        }\n      }\n    }\n  }\n}\n\nfunction fourth_level_collapse(boardState, team) {\n  const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece;\n  const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK;\n  const arr3 = team === TeamType.WHITE ? collapsedPiecesWhite : collapsedPiecesBlack;\n\n  for (let i = 0; i < all_pieces.length; i++) {\n    for (let j = i + 1; j < all_pieces.length; j++) {\n      for (let k = j + 1; k < all_pieces.length; k++) {\n        for (let l = k + 1; l < all_pieces.length; l++) {\n          const piece_combo = [all_pieces[i], all_pieces[j], all_pieces[k], all_pieces[l]];\n          const taken_sum = arr2[i] + arr2[j] + arr2[k] + arr2[l];\n          const collapsed_sum = arr3[i] + arr3[j] + arr3[k] + arr3[l];\n          const ids = collapsed(piece_combo, boardState, team);\n\n          if (ids.length + taken_sum + collapsed_sum === arr1[i] + arr1[j] + arr1[k] + arr1[l]) {\n            remove(piece_combo, boardState, team, ids);\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction fifth_level_collapse(boardState, team) {\n  const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece;\n  const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK;\n  const arr3 = team === TeamType.WHITE ? collapsedPiecesWhite : collapsedPiecesBlack;\n\n  for (let i = 0; i < all_pieces.length; i++) {\n    for (let j = i + 1; j < all_pieces.length; j++) {\n      for (let k = j + 1; k < all_pieces.length; k++) {\n        for (let l = k + 1; l < all_pieces.length; l++) {\n          for (let m = l + 1; l < all_pieces.length; l++) {\n            const piece_combo = [all_pieces[i], all_pieces[j], all_pieces[k], all_pieces[l], all_pieces[m]];\n            const taken_sum = arr2[i] + arr2[j] + arr2[k] + arr2[l] + arr2[m];\n            const collapsed_sum = arr3[i] + arr3[j] + arr3[k] + arr3[l] + arr3[m];\n            const ids = collapsed(piece_combo, boardState, team);\n\n            if (ids.length + taken_sum + collapsed_sum === arr1[i] + arr1[j] + arr1[k] + arr1[l] + arr1[m]) {\n              remove(piece_combo, boardState, team, ids);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function fullReduction(boardState) {\n  let somethingChanged = true;\n\n  while (somethingChanged === true) {\n    updateCollapsedPieces(boardState, TeamType.WHITE);\n    updateCollapsedPieces(boardState, TeamType.BLACK);\n    inductiveCollapse(boardState, TeamType.WHITE);\n    inductiveCollapse(boardState, TeamType.BLACK);\n    first_level_collapse(boardState, TeamType.WHITE);\n    first_level_collapse(boardState, TeamType.BLACK);\n    second_level_collapse(boardState, TeamType.WHITE);\n    second_level_collapse(boardState, TeamType.BLACK);\n    third_level_collapse(boardState, TeamType.WHITE);\n    third_level_collapse(boardState, TeamType.BLACK);\n    fourth_level_collapse(boardState, TeamType.WHITE);\n    fourth_level_collapse(boardState, TeamType.BLACK);\n    fifth_level_collapse(boardState, TeamType.WHITE);\n    fifth_level_collapse(boardState, TeamType.BLACK);\n    somethingChanged = count !== 0;\n    count = 0;\n  }\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/QuantumChess/quantum-chess/src/Referee/stateReducer.ts"],"names":["TAKEN_PIECES_BLACK","TAKEN_PIECES_WHITE","index_converter","PieceType","TeamType","all_pieces","KING","QUEEN","ROOK","BISHOP","NIGHT","PAWN","whiteNumPiece","blackNumPiece","collapsedPiecesWhite","collapsedPiecesBlack","count","change_piece_count","new_piece","team","piece_index","WHITE","updateCollapsedPieces","boardState","arr","i","length","ids","collapsed","uncollapsed","piece","SuperPiece","subPieces","includes","push","equals","remove","p","id","indexOf","splice","removeAll","inductiveCollapse","arr1","arr2","first_level_collapse","arr3","second_level_collapse","j","piece_combo","taken_sum","collapsed_sum","third_level_collapse","k","fourth_level_collapse","l","fifth_level_collapse","m","fullReduction","somethingChanged","BLACK"],"mappings":"AACA,SAASA,kBAAT,EAA6BC,kBAA7B,QAAuD,mCAAvD;AACA,SAASC,eAAT,EAAiCC,SAAjC,EAA4CC,QAA5C,QAA4D,cAA5D;AAGA,MAAMC,UAAU,GAAG,CAACF,SAAS,CAACG,IAAX,EAAiBH,SAAS,CAACI,KAA3B,EAAkCJ,SAAS,CAACK,IAA5C,EAAkDL,SAAS,CAACM,MAA5D,EAAoEN,SAAS,CAACO,KAA9E,EAAqFP,SAAS,CAACQ,IAA/F,CAAnB;AAGA,IAAIC,aAAyB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAhC;AACA,IAAIC,aAAyB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAhC;AACA,IAAIC,oBAAgC,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAvC;AACA,IAAIC,oBAAgC,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAvC;AACA,IAAIC,KAAc,GAAG,CAArB;AAGA,OAAO,SAASC,kBAAT,CAA4BC,SAA5B,EAAmDC,IAAnD,EAAmE;AACtE,QAAMC,WAAW,GAAGlB,eAAe,CAACgB,SAAD,CAAnC;;AACA,MAAIC,IAAI,KAAKf,QAAQ,CAACiB,KAAtB,EAA4B;AACxBT,IAAAA,aAAa,CAACQ,WAAD,CAAb;AACAR,IAAAA,aAAa,CAAC,CAAD,CAAb;AACH,GAHD,MAII;AACAC,IAAAA,aAAa,CAACO,WAAD,CAAb;AACAP,IAAAA,aAAa,CAAC,CAAD,CAAb;AACH;AAGJ;;AAED,SAASS,qBAAT,CAA+BC,UAA/B,EAAsDJ,IAAtD,EAAsE;AAClE,MAAIK,GAAG,GAAGL,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BP,oBAA1B,GAAiDC,oBAA3D;;AACA,OAAK,IAAIU,CAAC,GAAI,CAAd,EAAiBA,CAAC,GAAGpB,UAAU,CAACqB,MAAhC,EAAwCD,CAAC,EAAzC,EAA4C;AACxC,UAAME,GAAG,GAAGC,SAAS,CAAC,CAACvB,UAAU,CAACoB,CAAD,CAAX,CAAD,EAAkBF,UAAlB,EAA8BJ,IAA9B,CAArB;AACIK,IAAAA,GAAG,CAACC,CAAD,CAAH,GAASE,GAAG,CAACD,MAAb;AACH;AACJ;;AAIL,SAASG,WAAT,CAAqBC,KAArB,EAAwCP,UAAxC,EAA+DJ,IAA/D,EAA4F;AACxF,MAAIQ,GAAe,GAAG,EAAtB;;AACA,OAAI,IAAIF,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,UAAU,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,QAAIF,UAAU,CAACE,CAAD,CAAV,CAAcM,UAAd,CAAyBC,SAAzB,CAAmCN,MAAnC,GAA4C,CAA5C,IACAH,UAAU,CAACE,CAAD,CAAV,CAAcM,UAAd,CAAyBC,SAAzB,CAAmCC,QAAnC,CAA4CH,KAA5C,CADA,IAEAP,UAAU,CAACE,CAAD,CAAV,CAAcM,UAAd,CAAyBZ,IAAzB,KAAkCA,IAFtC,EAE2C;AACvCQ,MAAAA,GAAG,CAACO,IAAJ,CAAST,CAAT;AACH;AACJ;;AACD,SAAOE,GAAP;AACH;;AAED,SAASC,SAAT,CAAmBE,KAAnB,EAAyCP,UAAzC,EAAgEJ,IAAhE,EAA6F;AACzF,MAAIQ,GAAe,GAAG,EAAtB;;AACA,OAAI,IAAIF,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,UAAU,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,QAAKF,UAAU,CAACE,CAAD,CAAV,CAAcM,UAAd,CAAyBI,MAAzB,CAAgC,CAAC,GAAGL,KAAJ,CAAhC,KACDP,UAAU,CAACE,CAAD,CAAV,CAAcM,UAAd,CAAyBZ,IAAzB,KAAkCA,IADtC,EAC2C;AACvCQ,MAAAA,GAAG,CAACO,IAAJ,CAAST,CAAT;AACH;AACJ;;AACD,SAAOE,GAAP;AACH;;AAED,SAASS,MAAT,CAAgBN,KAAhB,EAAsCP,UAAtC,EAA6DJ,IAA7D,EAA8EQ,GAA9E,EAA8F;AAC1F,OAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACJ,MAA1B,EAAkCW,CAAC,EAAnC,EACI,KAAI,IAAIZ,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,UAAU,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,QAAI,CAACE,GAAG,CAACM,QAAJ,CAAaR,CAAb,CAAD,IACAF,UAAU,CAACE,CAAD,CAAV,CAAcM,UAAd,CAAyBC,SAAzB,CAAmCC,QAAnC,CAA4CH,KAAK,CAACO,CAAD,CAAjD,CADA,IAEAd,UAAU,CAACE,CAAD,CAAV,CAAcM,UAAd,CAAyBZ,IAAzB,KAAkCA,IAFtC,EAE2C;AACvC,YAAMmB,EAAE,GAAGf,UAAU,CAACE,CAAD,CAAV,CAAcM,UAAd,CAAyBC,SAAzB,CAAmCO,OAAnC,CAA2CT,KAAK,CAACO,CAAD,CAAhD,CAAX;AACAd,MAAAA,UAAU,CAACE,CAAD,CAAV,CAAcM,UAAd,CAAyBC,SAAzB,CAAmCQ,MAAnC,CAA0CF,EAA1C,EAA8C,CAA9C;AACAtB,MAAAA,KAAK,GAAGA,KAAK,GAAG,CAAhB;AACH;AACJ;AACJ;;AAEL,SAASyB,SAAT,CAAmBX,KAAnB,EAAsCP,UAAtC,EAA6DI,GAA7D,EAA6E;AACzE,OAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGE,GAAG,CAACD,MAAxB,EAAgCD,CAAC,EAAjC,EAAoC;AAChCF,IAAAA,UAAU,CAACI,GAAG,CAACF,CAAD,CAAJ,CAAV,CAAmBM,UAAnB,CAA8BC,SAA9B,GAA0C,CAACF,KAAD,CAA1C;AACAd,IAAAA,KAAK,GAAGA,KAAK,GAAG,CAAhB;AACH;AACJ;;AAKD,SAAS0B,iBAAT,CAA2BnB,UAA3B,EAAkDJ,IAAlD,EAAkE;AAC1D,QAAMwB,IAAI,GAAGxB,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BP,oBAA1B,GAAiDC,oBAA9D;AACA,QAAM6B,IAAI,GAAGzB,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BpB,kBAA1B,GAA+CD,kBAA5D;;AACA,OAAK,IAAIyB,CAAC,GAAI,CAAd,EAAiBA,CAAC,GAAGpB,UAAU,CAACqB,MAAhC,EAAwCD,CAAC,EAAzC,EAA4C;AACxC,UAAME,GAAG,GAAGE,WAAW,CAACxB,UAAU,CAACoB,CAAD,CAAX,EAAgBF,UAAhB,EAA4BJ,IAA5B,CAAvB;;AACA,QAAIQ,GAAG,CAACD,MAAJ,GAAaiB,IAAI,CAAClB,CAAD,CAAjB,GAAuBmB,IAAI,CAACnB,CAAD,CAA3B,KAAmCkB,IAAI,CAAClB,CAAD,CAA3C,EAA+C;AAC3CgB,MAAAA,SAAS,CAACpC,UAAU,CAACoB,CAAD,CAAX,EAAgBF,UAAhB,EAA4BI,GAA5B,CAAT;AACH;AACJ;AACJ;;AAEL,SAASkB,oBAAT,CAA8BtB,UAA9B,EAAqDJ,IAArD,EAAsE;AAClE,QAAMwB,IAAI,GAAGxB,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BT,aAA1B,GAA0CC,aAAvD;AACA,QAAM+B,IAAI,GAAGzB,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BpB,kBAA1B,GAA+CD,kBAA5D;AACA,QAAM8C,IAAI,GAAG3B,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BP,oBAA1B,GAAiDC,oBAA9D;;AACA,OAAK,IAAIU,CAAC,GAAI,CAAd,EAAiBA,CAAC,GAAGpB,UAAU,CAACqB,MAAhC,EAAwCD,CAAC,EAAzC,EAA4C;AACxC,UAAME,GAAG,GAAGC,SAAS,CAAC,CAACvB,UAAU,CAACoB,CAAD,CAAX,CAAD,EAAkBF,UAAlB,EAA8BJ,IAA9B,CAArB;;AACA,QAAIQ,GAAG,CAACD,MAAJ,GAAakB,IAAI,CAACnB,CAAD,CAAjB,KAAyBkB,IAAI,CAAClB,CAAD,CAAjC,EAAqC;AACjCW,MAAAA,MAAM,CAAC,CAAC/B,UAAU,CAACoB,CAAD,CAAX,CAAD,EAAkBF,UAAlB,EAA8BJ,IAA9B,EAAoCQ,GAApC,CAAN;AACH;AACJ;AACJ;;AAED,SAASoB,qBAAT,CAA+BxB,UAA/B,EAAsDJ,IAAtD,EAAuE;AACnE,QAAMwB,IAAI,GAAGxB,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BT,aAA1B,GAA0CC,aAAvD;AACA,QAAM+B,IAAI,GAAGzB,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BpB,kBAA1B,GAA+CD,kBAA5D;AACA,QAAM8C,IAAI,GAAG3B,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BP,oBAA1B,GAAiDC,oBAA9D;;AACA,OAAK,IAAIU,CAAC,GAAI,CAAd,EAAiBA,CAAC,GAAGpB,UAAU,CAACqB,MAAhC,EAAwCD,CAAC,EAAzC,EAA4C;AACxC,SAAI,IAAIuB,CAAC,GAAGvB,CAAC,GAAG,CAAhB,EAAmBuB,CAAC,GAAG3C,UAAU,CAACqB,MAAlC,EAA0CsB,CAAC,EAA3C,EAA+C;AAC3C,YAAMC,WAAW,GAAG,CAAC5C,UAAU,CAACoB,CAAD,CAAX,EAAgBpB,UAAU,CAAC2C,CAAD,CAA1B,CAApB;AACA,YAAME,SAAS,GAAIN,IAAI,CAACnB,CAAD,CAAJ,GAAUmB,IAAI,CAACI,CAAD,CAAjC;AACA,YAAMG,aAAa,GAAGL,IAAI,CAACrB,CAAD,CAAJ,GAAUqB,IAAI,CAACE,CAAD,CAApC;AACA,YAAMrB,GAAG,GAAGC,SAAS,CAACqB,WAAD,EAAc1B,UAAd,EAA0BJ,IAA1B,CAArB;;AACA,UAAIQ,GAAG,CAACD,MAAJ,GAAawB,SAAb,GAAyBC,aAAzB,KAA2CR,IAAI,CAAClB,CAAD,CAAJ,GAAUkB,IAAI,CAACK,CAAD,CAA7D,EAAiE;AAC7DZ,QAAAA,MAAM,CAACa,WAAD,EAAc1B,UAAd,EAA0BJ,IAA1B,EAAgCQ,GAAhC,CAAN;AACH;AACJ;AACJ;AACJ;;AAGD,SAASyB,oBAAT,CAA8B7B,UAA9B,EAAqDJ,IAArD,EAAsE;AAClE,QAAMwB,IAAI,GAAGxB,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BT,aAA1B,GAA0CC,aAAvD;AACA,QAAM+B,IAAI,GAAGzB,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BpB,kBAA1B,GAA+CD,kBAA5D;AACA,QAAM8C,IAAI,GAAG3B,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BP,oBAA1B,GAAiDC,oBAA9D;;AACA,OAAK,IAAIU,CAAC,GAAI,CAAd,EAAiBA,CAAC,GAAGpB,UAAU,CAACqB,MAAhC,EAAwCD,CAAC,EAAzC,EAA4C;AACxC,SAAI,IAAIuB,CAAC,GAAGvB,CAAC,GAAG,CAAhB,EAAmBuB,CAAC,GAAG3C,UAAU,CAACqB,MAAlC,EAA0CsB,CAAC,EAA3C,EAA+C;AAC3C,WAAI,IAAIK,CAAC,GAAGL,CAAC,GAAG,CAAhB,EAAmBK,CAAC,GAAGhD,UAAU,CAACqB,MAAlC,EAA0C2B,CAAC,EAA3C,EAA+C;AAC3C,cAAMJ,WAAW,GAAG,CAAC5C,UAAU,CAACoB,CAAD,CAAX,EAAgBpB,UAAU,CAAC2C,CAAD,CAA1B,EAA+B3C,UAAU,CAACgD,CAAD,CAAzC,CAApB;AACA,cAAMH,SAAS,GAAIN,IAAI,CAACnB,CAAD,CAAJ,GAAUmB,IAAI,CAACI,CAAD,CAAd,GAAoBJ,IAAI,CAACS,CAAD,CAA3C;AACA,cAAMF,aAAa,GAAGL,IAAI,CAACrB,CAAD,CAAJ,GAAUqB,IAAI,CAACE,CAAD,CAAd,GAAoBF,IAAI,CAACO,CAAD,CAA9C;AACA,cAAM1B,GAAG,GAAGC,SAAS,CAACqB,WAAD,EAAc1B,UAAd,EAA0BJ,IAA1B,CAArB;;AACA,YAAIQ,GAAG,CAACD,MAAJ,GAAawB,SAAb,GAAyBC,aAAzB,KAA2CR,IAAI,CAAClB,CAAD,CAAJ,GAAUkB,IAAI,CAACK,CAAD,CAAd,GAAoBL,IAAI,CAACU,CAAD,CAAvE,EAA2E;AACvEjB,UAAAA,MAAM,CAACa,WAAD,EAAc1B,UAAd,EAA0BJ,IAA1B,EAAgCQ,GAAhC,CAAN;AACH;AACJ;AACJ;AACJ;AACJ;;AAKD,SAAS2B,qBAAT,CAA+B/B,UAA/B,EAAsDJ,IAAtD,EAAuE;AACnE,QAAMwB,IAAI,GAAGxB,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BT,aAA1B,GAA0CC,aAAvD;AACA,QAAM+B,IAAI,GAAGzB,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BpB,kBAA1B,GAA+CD,kBAA5D;AACA,QAAM8C,IAAI,GAAG3B,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BP,oBAA1B,GAAiDC,oBAA9D;;AACA,OAAK,IAAIU,CAAC,GAAI,CAAd,EAAiBA,CAAC,GAAGpB,UAAU,CAACqB,MAAhC,EAAwCD,CAAC,EAAzC,EAA4C;AACxC,SAAI,IAAIuB,CAAC,GAAGvB,CAAC,GAAG,CAAhB,EAAmBuB,CAAC,GAAG3C,UAAU,CAACqB,MAAlC,EAA0CsB,CAAC,EAA3C,EAA+C;AAC3C,WAAI,IAAIK,CAAC,GAAGL,CAAC,GAAG,CAAhB,EAAmBK,CAAC,GAAGhD,UAAU,CAACqB,MAAlC,EAA0C2B,CAAC,EAA3C,EAA+C;AAC3C,aAAI,IAAIE,CAAC,GAAGF,CAAC,GAAG,CAAhB,EAAmBE,CAAC,GAAGlD,UAAU,CAACqB,MAAlC,EAA0C6B,CAAC,EAA3C,EAA+C;AAC3C,gBAAMN,WAAW,GAAG,CAAC5C,UAAU,CAACoB,CAAD,CAAX,EAAgBpB,UAAU,CAAC2C,CAAD,CAA1B,EAA+B3C,UAAU,CAACgD,CAAD,CAAzC,EAA8ChD,UAAU,CAACkD,CAAD,CAAxD,CAApB;AACA,gBAAML,SAAS,GAAIN,IAAI,CAACnB,CAAD,CAAJ,GAAUmB,IAAI,CAACI,CAAD,CAAd,GAAoBJ,IAAI,CAACS,CAAD,CAAxB,GAA8BT,IAAI,CAACW,CAAD,CAArD;AACA,gBAAMJ,aAAa,GAAGL,IAAI,CAACrB,CAAD,CAAJ,GAAUqB,IAAI,CAACE,CAAD,CAAd,GAAoBF,IAAI,CAACO,CAAD,CAAxB,GAA8BP,IAAI,CAACS,CAAD,CAAxD;AACA,gBAAM5B,GAAG,GAAGC,SAAS,CAACqB,WAAD,EAAc1B,UAAd,EAA0BJ,IAA1B,CAArB;;AACA,cAAIQ,GAAG,CAACD,MAAJ,GAAawB,SAAb,GAAyBC,aAAzB,KAA2CR,IAAI,CAAClB,CAAD,CAAJ,GAAUkB,IAAI,CAACK,CAAD,CAAd,GAAoBL,IAAI,CAACU,CAAD,CAAxB,GAA8BV,IAAI,CAACY,CAAD,CAAjF,EAAqF;AACjFnB,YAAAA,MAAM,CAACa,WAAD,EAAc1B,UAAd,EAA0BJ,IAA1B,EAAgCQ,GAAhC,CAAN;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;;AAED,SAAS6B,oBAAT,CAA8BjC,UAA9B,EAAqDJ,IAArD,EAAsE;AAClE,QAAMwB,IAAI,GAAGxB,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BT,aAA1B,GAA0CC,aAAvD;AACA,QAAM+B,IAAI,GAAGzB,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BpB,kBAA1B,GAA+CD,kBAA5D;AACA,QAAM8C,IAAI,GAAG3B,IAAI,KAAKf,QAAQ,CAACiB,KAAlB,GAA0BP,oBAA1B,GAAiDC,oBAA9D;;AACA,OAAK,IAAIU,CAAC,GAAI,CAAd,EAAiBA,CAAC,GAAGpB,UAAU,CAACqB,MAAhC,EAAwCD,CAAC,EAAzC,EAA4C;AACxC,SAAI,IAAIuB,CAAC,GAAGvB,CAAC,GAAG,CAAhB,EAAmBuB,CAAC,GAAG3C,UAAU,CAACqB,MAAlC,EAA0CsB,CAAC,EAA3C,EAA+C;AAC3C,WAAI,IAAIK,CAAC,GAAGL,CAAC,GAAG,CAAhB,EAAmBK,CAAC,GAAGhD,UAAU,CAACqB,MAAlC,EAA0C2B,CAAC,EAA3C,EAA+C;AAC3C,aAAI,IAAIE,CAAC,GAAGF,CAAC,GAAG,CAAhB,EAAmBE,CAAC,GAAGlD,UAAU,CAACqB,MAAlC,EAA0C6B,CAAC,EAA3C,EAA+C;AAC3C,eAAI,IAAIE,CAAC,GAAGF,CAAC,GAAG,CAAhB,EAAmBA,CAAC,GAAGlD,UAAU,CAACqB,MAAlC,EAA0C6B,CAAC,EAA3C,EAA+C;AAC3C,kBAAMN,WAAW,GAAG,CAAC5C,UAAU,CAACoB,CAAD,CAAX,EAAgBpB,UAAU,CAAC2C,CAAD,CAA1B,EAA+B3C,UAAU,CAACgD,CAAD,CAAzC,EAA8ChD,UAAU,CAACkD,CAAD,CAAxD,EAA6DlD,UAAU,CAACoD,CAAD,CAAvE,CAApB;AACA,kBAAMP,SAAS,GAAIN,IAAI,CAACnB,CAAD,CAAJ,GAAUmB,IAAI,CAACI,CAAD,CAAd,GAAoBJ,IAAI,CAACS,CAAD,CAAxB,GAA8BT,IAAI,CAACW,CAAD,CAAlC,GAAwCX,IAAI,CAACa,CAAD,CAA/D;AACA,kBAAMN,aAAa,GAAGL,IAAI,CAACrB,CAAD,CAAJ,GAAUqB,IAAI,CAACE,CAAD,CAAd,GAAoBF,IAAI,CAACO,CAAD,CAAxB,GAA8BP,IAAI,CAACS,CAAD,CAAlC,GAAwCT,IAAI,CAACW,CAAD,CAAlE;AACA,kBAAM9B,GAAG,GAAGC,SAAS,CAACqB,WAAD,EAAc1B,UAAd,EAA0BJ,IAA1B,CAArB;;AACA,gBAAIQ,GAAG,CAACD,MAAJ,GAAawB,SAAb,GAAyBC,aAAzB,KAA2CR,IAAI,CAAClB,CAAD,CAAJ,GAAUkB,IAAI,CAACK,CAAD,CAAd,GAAoBL,IAAI,CAACU,CAAD,CAAxB,GAA8BV,IAAI,CAACY,CAAD,CAAlC,GAAwCZ,IAAI,CAACc,CAAD,CAA3F,EAA+F;AAC3FrB,cAAAA,MAAM,CAACa,WAAD,EAAc1B,UAAd,EAA0BJ,IAA1B,EAAgCQ,GAAhC,CAAN;AACH;AACJ;AACJ;AACJ;AACJ;AACJ;AACJ;;AAID,OAAO,SAAS+B,aAAT,CAAuBnC,UAAvB,EAA6C;AAChD,MAAIoC,gBAAgB,GAAG,IAAvB;;AACA,SAAOA,gBAAgB,KAAK,IAA5B,EAAiC;AAC7BrC,IAAAA,qBAAqB,CAACC,UAAD,EAAanB,QAAQ,CAACiB,KAAtB,CAArB;AACAC,IAAAA,qBAAqB,CAACC,UAAD,EAAanB,QAAQ,CAACwD,KAAtB,CAArB;AACAlB,IAAAA,iBAAiB,CAACnB,UAAD,EAAanB,QAAQ,CAACiB,KAAtB,CAAjB;AACAqB,IAAAA,iBAAiB,CAACnB,UAAD,EAAanB,QAAQ,CAACwD,KAAtB,CAAjB;AACAf,IAAAA,oBAAoB,CAACtB,UAAD,EAAanB,QAAQ,CAACiB,KAAtB,CAApB;AACAwB,IAAAA,oBAAoB,CAACtB,UAAD,EAAanB,QAAQ,CAACwD,KAAtB,CAApB;AACAb,IAAAA,qBAAqB,CAACxB,UAAD,EAAanB,QAAQ,CAACiB,KAAtB,CAArB;AACA0B,IAAAA,qBAAqB,CAACxB,UAAD,EAAanB,QAAQ,CAACwD,KAAtB,CAArB;AACAR,IAAAA,oBAAoB,CAAC7B,UAAD,EAAanB,QAAQ,CAACiB,KAAtB,CAApB;AACA+B,IAAAA,oBAAoB,CAAC7B,UAAD,EAAanB,QAAQ,CAACwD,KAAtB,CAApB;AACAN,IAAAA,qBAAqB,CAAC/B,UAAD,EAAanB,QAAQ,CAACiB,KAAtB,CAArB;AACAiC,IAAAA,qBAAqB,CAAC/B,UAAD,EAAanB,QAAQ,CAACwD,KAAtB,CAArB;AACAJ,IAAAA,oBAAoB,CAACjC,UAAD,EAAanB,QAAQ,CAACiB,KAAtB,CAApB;AACAmC,IAAAA,oBAAoB,CAACjC,UAAD,EAAanB,QAAQ,CAACwD,KAAtB,CAApB;AACAD,IAAAA,gBAAgB,GAAG3C,KAAK,KAAK,CAA7B;AACAA,IAAAA,KAAK,GAAG,CAAR;AACH;AACJ","sourcesContent":["import { updateLanguageServiceSourceFile } from \"typescript\";\nimport { TAKEN_PIECES_BLACK, TAKEN_PIECES_WHITE } from \"../components/TakePiece/TakePiece\";\nimport { index_converter, Piece, PieceType, TeamType } from \"../constants\";\n\n\nconst all_pieces = [PieceType.KING, PieceType.QUEEN, PieceType.ROOK, PieceType.BISHOP, PieceType.NIGHT, PieceType.PAWN]\n\n\nlet whiteNumPiece : number [] = [1, 1, 2, 2, 2, 8]\nlet blackNumPiece : number [] = [1, 1, 2, 2, 2, 8]\nlet collapsedPiecesWhite : number [] = [0, 0, 0, 0, 0, 0]\nlet collapsedPiecesBlack : number [] = [0, 0, 0, 0, 0, 0]\nlet count : number = 0\n\n\nexport function change_piece_count(new_piece : PieceType, team : TeamType){\n    const piece_index = index_converter(new_piece)\n    if (team === TeamType.WHITE){\n        whiteNumPiece[piece_index] ++\n        whiteNumPiece[5] --\n    }\n    else{\n        blackNumPiece[piece_index] ++\n        blackNumPiece[5] --\n    }\n\n\n}\n\nfunction updateCollapsedPieces(boardState : Piece [], team : TeamType){\n    let arr = team === TeamType.WHITE ? collapsedPiecesWhite : collapsedPiecesBlack\n    for (let i =  0; i < all_pieces.length; i++){\n        const ids = collapsed([all_pieces[i]], boardState, team)\n            arr[i] = ids.length\n        }\n    }\n\n\n\nfunction uncollapsed(piece : PieceType, boardState : Piece [], team : TeamType) : number [] {\n    let ids : number [] = []\n    for(let i = 0; i < boardState.length; i ++){\n        if (boardState[i].SuperPiece.subPieces.length > 1 &&\n            boardState[i].SuperPiece.subPieces.includes(piece) &&\n            boardState[i].SuperPiece.team === team){\n            ids.push(i)\n        }\n    }\n    return ids\n}\n\nfunction collapsed(piece : PieceType [], boardState : Piece [], team : TeamType) : number [] {\n    let ids : number [] = []\n    for(let i = 0; i < boardState.length; i ++){\n        if ( boardState[i].SuperPiece.equals([...piece]) &&\n            boardState[i].SuperPiece.team === team){\n            ids.push(i)\n        }\n    }\n    return ids\n}\n\nfunction remove(piece : PieceType [], boardState : Piece [], team : TeamType, ids : number []){\n    for (let p = 0; p < piece.length; p++)\n        for(let i = 0; i < boardState.length; i ++){\n            if (!ids.includes(i) && \n                boardState[i].SuperPiece.subPieces.includes(piece[p]) && \n                boardState[i].SuperPiece.team === team){\n                const id = boardState[i].SuperPiece.subPieces.indexOf(piece[p])\n                boardState[i].SuperPiece.subPieces.splice(id, 1)\n                count = count + 1\n            }\n        }\n    }\n\nfunction removeAll(piece : PieceType, boardState : Piece [], ids : number []){\n    for (let i = 0; i < ids.length; i++){\n        boardState[ids[i]].SuperPiece.subPieces = [piece]\n        count = count + 1\n    }\n}\n\n\n\n\nfunction inductiveCollapse(boardState : Piece [], team : TeamType){\n        const arr1 = team === TeamType.WHITE ? collapsedPiecesWhite : collapsedPiecesBlack\n        const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK\n        for (let i =  0; i < all_pieces.length; i++){\n            const ids = uncollapsed(all_pieces[i], boardState, team)\n            if (ids.length + arr1[i] + arr2[i] === arr1[i]){\n                removeAll(all_pieces[i], boardState, ids)               \n            }\n        }\n    }\n\nfunction first_level_collapse(boardState : Piece [], team : TeamType) {\n    const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece\n    const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK\n    const arr3 = team === TeamType.WHITE ? collapsedPiecesWhite : collapsedPiecesBlack\n    for (let i =  0; i < all_pieces.length; i++){\n        const ids = collapsed([all_pieces[i]], boardState, team)\n        if (ids.length + arr2[i] === arr1[i]){\n            remove([all_pieces[i]], boardState, team, ids)               \n        }\n    }\n}\n\nfunction second_level_collapse(boardState : Piece [], team : TeamType) {\n    const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece\n    const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK\n    const arr3 = team === TeamType.WHITE ? collapsedPiecesWhite : collapsedPiecesBlack\n    for (let i =  0; i < all_pieces.length; i++){\n        for(let j = i + 1; j < all_pieces.length; j ++){\n            const piece_combo = [all_pieces[i], all_pieces[j]]\n            const taken_sum =  arr2[i] + arr2[j]\n            const collapsed_sum = arr3[i] + arr3[j]\n            const ids = collapsed(piece_combo, boardState, team)\n            if (ids.length + taken_sum + collapsed_sum === arr1[i] + arr1[j]){\n                remove(piece_combo, boardState, team, ids)               \n            }\n        }\n    }\n}\n\n\nfunction third_level_collapse(boardState : Piece [], team : TeamType) {\n    const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece\n    const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK\n    const arr3 = team === TeamType.WHITE ? collapsedPiecesWhite : collapsedPiecesBlack\n    for (let i =  0; i < all_pieces.length; i++){\n        for(let j = i + 1; j < all_pieces.length; j ++){\n            for(let k = j + 1; k < all_pieces.length; k ++){\n                const piece_combo = [all_pieces[i], all_pieces[j], all_pieces[k]]\n                const taken_sum =  arr2[i] + arr2[j] + arr2[k] \n                const collapsed_sum = arr3[i] + arr3[j] + arr3[k] \n                const ids = collapsed(piece_combo, boardState, team)\n                if (ids.length + taken_sum + collapsed_sum === arr1[i] + arr1[j] + arr1[k]){\n                    remove(piece_combo, boardState, team, ids)               \n                }\n            }\n        }\n    }\n}\n\n\n\n\nfunction fourth_level_collapse(boardState : Piece [], team : TeamType) {\n    const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece\n    const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK\n    const arr3 = team === TeamType.WHITE ? collapsedPiecesWhite : collapsedPiecesBlack\n    for (let i =  0; i < all_pieces.length; i++){\n        for(let j = i + 1; j < all_pieces.length; j ++){\n            for(let k = j + 1; k < all_pieces.length; k ++){\n                for(let l = k + 1; l < all_pieces.length; l ++){\n                    const piece_combo = [all_pieces[i], all_pieces[j], all_pieces[k], all_pieces[l]]\n                    const taken_sum =  arr2[i] + arr2[j] + arr2[k] + arr2[l]\n                    const collapsed_sum = arr3[i] + arr3[j] + arr3[k] + arr3[l]\n                    const ids = collapsed(piece_combo, boardState, team)\n                    if (ids.length + taken_sum + collapsed_sum === arr1[i] + arr1[j] + arr1[k] + arr1[l]){\n                        remove(piece_combo, boardState, team, ids)               \n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction fifth_level_collapse(boardState : Piece [], team : TeamType) {\n    const arr1 = team === TeamType.WHITE ? whiteNumPiece : blackNumPiece\n    const arr2 = team === TeamType.WHITE ? TAKEN_PIECES_WHITE : TAKEN_PIECES_BLACK\n    const arr3 = team === TeamType.WHITE ? collapsedPiecesWhite : collapsedPiecesBlack\n    for (let i =  0; i < all_pieces.length; i++){\n        for(let j = i + 1; j < all_pieces.length; j ++){\n            for(let k = j + 1; k < all_pieces.length; k ++){\n                for(let l = k + 1; l < all_pieces.length; l ++){\n                    for(let m = l + 1; l < all_pieces.length; l ++){\n                        const piece_combo = [all_pieces[i], all_pieces[j], all_pieces[k], all_pieces[l], all_pieces[m]]\n                        const taken_sum =  arr2[i] + arr2[j] + arr2[k] + arr2[l] + arr2[m]\n                        const collapsed_sum = arr3[i] + arr3[j] + arr3[k] + arr3[l] + arr3[m]\n                        const ids = collapsed(piece_combo, boardState, team)\n                        if (ids.length + taken_sum + collapsed_sum === arr1[i] + arr1[j] + arr1[k] + arr1[l] + arr1[m]){\n                            remove(piece_combo, boardState, team, ids)               \n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n\n\nexport function fullReduction(boardState : Piece []){\n    let somethingChanged = true\n    while (somethingChanged === true){\n        updateCollapsedPieces(boardState, TeamType.WHITE)\n        updateCollapsedPieces(boardState, TeamType.BLACK)\n        inductiveCollapse(boardState, TeamType.WHITE)\n        inductiveCollapse(boardState, TeamType.BLACK)\n        first_level_collapse(boardState, TeamType.WHITE)\n        first_level_collapse(boardState, TeamType.BLACK)\n        second_level_collapse(boardState, TeamType.WHITE)\n        second_level_collapse(boardState, TeamType.BLACK)\n        third_level_collapse(boardState, TeamType.WHITE)\n        third_level_collapse(boardState, TeamType.BLACK)\n        fourth_level_collapse(boardState, TeamType.WHITE)\n        fourth_level_collapse(boardState, TeamType.BLACK)\n        fifth_level_collapse(boardState, TeamType.WHITE)\n        fifth_level_collapse(boardState, TeamType.BLACK)\n        somethingChanged = count !== 0\n        count = 0\n    }\n}"]},"metadata":{},"sourceType":"module"}