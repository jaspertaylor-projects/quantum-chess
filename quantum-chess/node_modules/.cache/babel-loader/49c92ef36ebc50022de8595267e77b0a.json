{"ast":null,"code":"import SuperPiece from \"./superPiece\";\nexport const HORIZONTAL_AXIS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\nexport const VERTICAL_AXIS = [1, 2, 3, 4, 5, 6, 7, 8];\nexport const AXIS = [0, 1, 2, 3, 4, 5, 6, 7];\nexport const GRID_SIZE = 100;\nexport let TeamType;\n\n(function (TeamType) {\n  TeamType[TeamType[\"WHITE\"] = 0] = \"WHITE\";\n  TeamType[TeamType[\"BLACK\"] = 1] = \"BLACK\";\n})(TeamType || (TeamType = {}));\n\nexport let PieceType;\n\n(function (PieceType) {\n  PieceType[\"PAWN\"] = \"p\";\n  PieceType[\"BISHOP\"] = \"b\";\n  PieceType[\"NIGHT\"] = \"n\";\n  PieceType[\"ROOK\"] = \"r\";\n  PieceType[\"QUEEN\"] = \"q\";\n  PieceType[\"KING\"] = \"k\";\n  PieceType[\"WIERD_XY\"] = \"wxy\";\n  PieceType[\"WIERD_D\"] = \"wd\";\n  PieceType[\"NO_PIECE\"] = \"np\";\n})(PieceType || (PieceType = {}));\n\nconst orderedPieces = [PieceType.KING, PieceType.QUEEN, PieceType.ROOK, PieceType.BISHOP, PieceType.NIGHT, PieceType.PAWN];\nexport function initializeBoardState() {\n  const state = [];\n\n  for (let p = 0; p < 2; p++) {\n    for (let i = 0; i < AXIS.length; i++) {\n      state.push({\n        SuperPiece: new SuperPiece(orderedPieces, TeamType.WHITE),\n        x: i,\n        y: 0 + p\n      });\n      state.push({\n        SuperPiece: new SuperPiece(orderedPieces, TeamType.BLACK),\n        x: i,\n        y: 6 + p\n      });\n    }\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/QuantumChess/quantum-chess/src/constants.ts"],"names":["SuperPiece","HORIZONTAL_AXIS","VERTICAL_AXIS","AXIS","GRID_SIZE","TeamType","PieceType","orderedPieces","KING","QUEEN","ROOK","BISHOP","NIGHT","PAWN","initializeBoardState","state","p","i","length","push","WHITE","x","y","BLACK"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,cAAvB;AAEA,OAAO,MAAMC,eAAe,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAAiC,GAAjC,EAAsC,GAAtC,CAAxB;AACP,OAAO,MAAMC,aAAa,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,CAAtB;AACP,OAAO,MAAMC,IAAI,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,CAAb;AACP,OAAO,MAAMC,SAAS,GAAG,GAAlB;AAWP,WAAYC,QAAZ;;WAAYA,Q;AAAAA,EAAAA,Q,CAAAA,Q;AAAAA,EAAAA,Q,CAAAA,Q;GAAAA,Q,KAAAA,Q;;AAKZ,WAAYC,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S;;AAYZ,MAAMC,aAAa,GAAG,CAACD,SAAS,CAACE,IAAX,EAAiBF,SAAS,CAACG,KAA3B,EAAkCH,SAAS,CAACI,IAA5C,EAAkDJ,SAAS,CAACK,MAA5D,EAAoEL,SAAS,CAACM,KAA9E,EAAqFN,SAAS,CAACO,IAA/F,CAAtB;AAEA,OAAO,SAASC,oBAAT,GAA0C;AAC7C,QAAMC,KAAe,GAAG,EAAxB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,IAAI,CAACe,MAAzB,EAAiCD,CAAC,EAAlC,EAAqC;AACjCF,MAAAA,KAAK,CAACI,IAAN,CAAW;AAACnB,QAAAA,UAAU,EAAG,IAAIA,UAAJ,CAAeO,aAAf,EAA8BF,QAAQ,CAACe,KAAvC,CAAd;AAA6DC,QAAAA,CAAC,EAAGJ,CAAjE;AAAoEK,QAAAA,CAAC,EAAG,IAAIN;AAA5E,OAAX;AACAD,MAAAA,KAAK,CAACI,IAAN,CAAW;AAACnB,QAAAA,UAAU,EAAG,IAAIA,UAAJ,CAAeO,aAAf,EAA8BF,QAAQ,CAACkB,KAAvC,CAAd;AAA6DF,QAAAA,CAAC,EAAGJ,CAAjE;AAAoEK,QAAAA,CAAC,EAAG,IAAIN;AAA5E,OAAX;AACH;AACJ;;AACD,SAAOD,KAAP;AACH","sourcesContent":["import SuperPiece from \"./superPiece\";\n\nexport const HORIZONTAL_AXIS = ['a', 'b', 'c', 'd', 'e', 'f',   'g', 'h'];\nexport const VERTICAL_AXIS = [1,2,3,4,5,6,7,8];\nexport const AXIS = [0,1,2,3,4,5,6,7];\nexport const GRID_SIZE = 100\n\n\nexport interface Piece {\n    SuperPiece : SuperPiece;\n    x : number; \n    y : number; \n    taken? : boolean;\n    promoted? : boolean;\n}\n\nexport enum TeamType{\n    WHITE,\n    BLACK\n}\n\nexport enum PieceType {\n    PAWN = 'p',\n    BISHOP = 'b', \n    NIGHT = 'n', \n    ROOK = 'r',\n    QUEEN = 'q',\n    KING = 'k',\n    WIERD_XY = 'wxy',\n    WIERD_D = 'wd',\n    NO_PIECE = 'np',\n}\n\nconst orderedPieces = [PieceType.KING, PieceType.QUEEN, PieceType.ROOK, PieceType.BISHOP, PieceType.NIGHT, PieceType.PAWN]\n\nexport function initializeBoardState() : Piece []{\n    const state : Piece[] = []\n    for (let p = 0; p < 2; p ++){\n        for (let i = 0; i < AXIS.length; i++){\n            state.push({SuperPiece : new SuperPiece(orderedPieces, TeamType.WHITE), x : i, y : 0 + p})\n            state.push({SuperPiece : new SuperPiece(orderedPieces, TeamType.BLACK), x : i, y : 6 + p})\n        }\n    }\n    return state\n}\n"]},"metadata":{},"sourceType":"module"}