{"ast":null,"code":"import { PieceType, TeamType } from \"../constants\";\nconst all_pieces = [PieceType.KING, PieceType.QUEEN, PieceType.ROOK, PieceType.BISHOP, PieceType.NIGHT, PieceType.PAWN];\nlet whiteNumPiece = [1, 1, 2, 2, 2, 8];\nlet blackNumPiece = [1, 1, 2, 2, 2, 8];\nlet taken_pieces_black = [];\nlet taken_pieces_white = [];\n\nfunction collapsed(piece, boardState, team) {\n  let ids = [];\n\n  for (let i = 0; i < boardState.length; i++) {\n    if (boardState[i].SuperPiece.subPieces.length === 1 && boardState[i].SuperPiece.subPieces[0] === piece && boardState[i].SuperPiece.team === team) {\n      ids.push(i);\n    }\n  }\n\n  return ids;\n}\n\nfunction removeAll(piece, boardState, team) {\n  for (let i = 0; i < boardState.length; i++) {\n    if (boardState[i].SuperPiece.subPieces.length > 1 && boardState[i].SuperPiece.subPieces.includes(piece)) {\n      const id = boardState[i].SuperPiece.subPieces.indexOf(piece);\n      boardState[i].SuperPiece.subPieces.splice(id, 1);\n    }\n  }\n}\n\nfunction collapseAll(boardState, team) {\n  if (team === TeamType.WHITE) {\n    for (let i = 0; i < all_pieces.length; i++) {\n      const ids = collapsed(all_pieces[i], boardState, team);\n\n      if (ids.length >= whiteNumPiece[i]) {\n        removeAll(all_pieces[i], boardState, team);\n      }\n    }\n  } else {\n    for (let i = 0; i < all_pieces.length; i++) {\n      const ids = collapsed(all_pieces[i], boardState, team);\n      console.log(ids);\n\n      if (ids.length > blackNumPiece[i]) {\n        removeAll(all_pieces[i], boardState, team);\n      }\n    }\n  }\n}\n\nexport default function deductiveReduction(boardState) {\n  collapseAll(boardState, TeamType.WHITE);\n  collapseAll(boardState, TeamType.BLACK);\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/QuantumChess/quantum-chess/src/Referee/stateReducer.ts"],"names":["PieceType","TeamType","all_pieces","KING","QUEEN","ROOK","BISHOP","NIGHT","PAWN","whiteNumPiece","blackNumPiece","taken_pieces_black","taken_pieces_white","collapsed","piece","boardState","team","ids","i","length","SuperPiece","subPieces","push","removeAll","includes","id","indexOf","splice","collapseAll","WHITE","console","log","deductiveReduction","BLACK"],"mappings":"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","sourcesContent":["import { Piece, PieceType, TeamType } from \"../constants\";\n\n\nconst all_pieces = [PieceType.KING, PieceType.QUEEN, PieceType.ROOK, PieceType.BISHOP, PieceType.NIGHT, PieceType.PAWN]\n\n\nlet whiteNumPiece : number [] = [1, 1, 2, 2, 2, 8]\nlet blackNumPiece : number [] = [1, 1, 2, 2, 2, 8]\nlet taken_pieces_black : PieceType [] = []\nlet taken_pieces_white : PieceType [] = []\n\n\n\n\nfunction collapsed(piece : PieceType, boardState : Piece [], team : TeamType) : number [] {\n    let ids : number [] = []\n    for(let i = 0; i < boardState.length; i ++){\n        if (boardState[i].SuperPiece.subPieces.length === 1 && \n            boardState[i].SuperPiece.subPieces[0] === piece &&\n            boardState[i].SuperPiece.team === team){\n            ids.push(i)\n        }\n    }\n    return ids\n}\nfunction removeAll(piece : PieceType, boardState : Piece [], team : TeamType){\n    for(let i = 0; i < boardState.length; i ++){\n        if (boardState[i].SuperPiece.subPieces.length > 1 && boardState[i].SuperPiece.subPieces.includes(piece)){\n            const id = boardState[i].SuperPiece.subPieces.indexOf(piece)\n            boardState[i].SuperPiece.subPieces.splice(id, 1)\n        }\n    }\n\n}\nfunction collapseAll(boardState : Piece [], team : TeamType){\n    if (team === TeamType.WHITE){\n        for (let i =  0; i < all_pieces.length; i++){\n            const ids = collapsed(all_pieces[i], boardState, team)\n            if (ids.length >= whiteNumPiece[i]){\n                removeAll(all_pieces[i], boardState, team)\n            }\n        }\n    }\n    else {\n        for (let i =  0; i < all_pieces.length; i++){\n            const ids = collapsed(all_pieces[i], boardState, team)\n            console.log(ids)\n            if (ids.length > blackNumPiece[i]){\n                removeAll(all_pieces[i], boardState, team)\n            }\n        }\n    }\n\n}\n\nexport default function deductiveReduction(boardState : Piece []){\n    collapseAll(boardState, TeamType.WHITE)\n    collapseAll(boardState, TeamType.BLACK)\n}"]},"metadata":{},"sourceType":"module"}