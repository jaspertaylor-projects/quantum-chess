{"ast":null,"code":"/*\nThis file contains the movement logic for all non-PAWN pieces. Castling is \nconsidered a KING move, and money pieces must make sure that their path is \nnot being blocked by any pieces in the way.\n*/\nfunction isFriendlyPiece(x, y, team, boardState) {\n  const piece = boardState.find(p => p.x === x && p.y === y);\n  const occupied = piece && piece.SuperPiece.team === team ? true : false;\n  return occupied;\n}\n\nexport function isLegalRookMove(px, py, dx, dy, team, boardState) {\n  if (dx === 0 || dy === 0) {\n    if (dx === 0) {\n      const y_dir = Math.sign(dy);\n\n      for (let i = 1; i < Math.abs(dy); i++) {\n        const obstructingPiece = boardState.find(p => p.x === px && p.y === py + i * y_dir);\n\n        if (obstructingPiece) {\n          return false;\n        }\n      }\n\n      if (!isFriendlyPiece(px + dx, py + dy, team, boardState)) {\n        return true;\n      }\n    }\n\n    if (dy === 0) {\n      const x_dir = Math.sign(dx);\n\n      for (let i = 1; i < Math.abs(dx); i++) {\n        const obstructingPiece = boardState.find(p => p.x === px + i * x_dir && p.y === py);\n\n        if (obstructingPiece) {\n          return false;\n        }\n      }\n\n      if (!isFriendlyPiece(px + dx, py + dy, team, boardState)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\nexport function isLegalBishopMove(px, py, dx, dy, team, boardState) {\n  if (Math.abs(dx) === Math.abs(dy)) {\n    const x_dir = Math.sign(dx);\n    const y_dir = Math.sign(dy);\n\n    for (let i = 1; i <= Math.abs(dx); i++) {\n      const obstructingPiece = boardState.find(p => p.x === px + i * x_dir && p.y === py + i * y_dir);\n\n      if (obstructingPiece) {\n        return false;\n      }\n    }\n\n    if (!isFriendlyPiece(px + dx, py + dy, team, boardState)) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function isLegalNightMove(px, py, dx, dy, team, boardState) {\n  if (Math.abs(dx) === 1 && Math.abs(dy) === 2 || Math.abs(dx) === 2 && Math.abs(dy) === 1) {\n    if (!isFriendlyPiece(px + dx, py + dy, team, boardState)) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function isLegalQueenMove(px, py, dx, dy, team, boardState) {\n  const legality = isLegalRookMove(px, py, dx, dy, team, boardState) || isLegalBishopMove(px, py, dx, dy, team, boardState);\n  return legality && !isFriendlyPiece(px + dx, py + dy, team, boardState);\n}\nexport function isLegalKingMove(px, py, dx, dy, team, boardState) {\n  if (Math.abs(dx) < 2 && Math.abs(dy) < 2) {\n    if (!isFriendlyPiece(px + dx, py + dy, team, boardState)) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/QuantumChess/quantum-chess/src/Referee/pieceLogic.ts"],"names":["isFriendlyPiece","x","y","team","boardState","piece","find","p","occupied","SuperPiece","isLegalRookMove","px","py","dx","dy","y_dir","Math","sign","i","abs","obstructingPiece","x_dir","isLegalBishopMove","isLegalNightMove","isLegalQueenMove","legality","isLegalKingMove"],"mappings":"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","sourcesContent":["/*\nThis file contains the movement logic for all non-PAWN pieces. Castling is \nconsidered a KING move, and money pieces must make sure that their path is \nnot being blocked by any pieces in the way.\n*/\n\nimport { Piece , PieceType, TeamType} from '../constants'\nimport Checker from './checker'\n\n\n\nfunction isFriendlyPiece(x : number, y: number, team : TeamType, boardState : Piece []): boolean {\n    const piece = boardState.find(p => p.x === x && p.y === y)\n    const occupied =  piece && piece.SuperPiece.team === team ? true : false\n    return occupied\n}\n\n\n\nexport function isLegalRookMove(px : number, py : number, dx : number, dy : number, team : TeamType, boardState : Piece[]) : boolean {\n    if (dx === 0 || dy === 0){\n        if (dx === 0){\n            const y_dir = Math.sign(dy)\n            for (let i = 1; i < Math.abs(dy); i ++){\n                const obstructingPiece = boardState.find(p => p.x === px && p.y === py + i*y_dir) \n                if (obstructingPiece){\n                    return false\n                }\n            } \n            if (!isFriendlyPiece(px + dx, py + dy, team, boardState)){\n                return true\n            }\n        }\n        if (dy === 0){\n            const x_dir = Math.sign(dx)\n            for (let i = 1; i < Math.abs(dx); i ++){\n                const obstructingPiece = boardState.find(p => p.x === px + i*x_dir && p.y === py) \n                if (obstructingPiece){\n                    return false\n                }\n            } \n            if (!isFriendlyPiece(px + dx, py + dy, team, boardState)){\n                return true\n            }\n        }\n    } \n    return false;\n}\n\nexport function isLegalBishopMove(px : number, py : number, dx : number, dy : number, team : TeamType, boardState : Piece[]) : boolean{\n    if (Math.abs(dx) === Math.abs(dy)){\n        const x_dir = Math.sign(dx)\n        const y_dir = Math.sign(dy)\n        for (let i = 1; i <= Math.abs(dx); i ++){\n            const obstructingPiece = boardState.find(p => p.x === px + i*x_dir && p.y === py + i*y_dir) \n            if (obstructingPiece){\n                return false\n            }\n        } \n        if (!isFriendlyPiece(px + dx, py + dy, team, boardState)){\n            return true\n        }\n    } \n    return false\n}\nexport function isLegalNightMove(px : number, py : number, dx : number, dy : number, team : TeamType, boardState : Piece[]) : boolean{\n    if ((Math.abs(dx) === 1 && Math.abs(dy) === 2) || (Math.abs(dx) === 2 && Math.abs(dy) === 1)){\n        if (!isFriendlyPiece(px + dx, py + dy, team, boardState)){\n            return true\n        }\n    }\n    return false\n}\nexport function isLegalQueenMove(px : number, py : number, dx : number, dy : number, team : TeamType, boardState : Piece[]) : boolean{\n    const legality = isLegalRookMove(px, py, dx, dy, team, boardState) || isLegalBishopMove(px, py, dx, dy, team, boardState)\n    return legality && !isFriendlyPiece(px + dx, py + dy, team, boardState)\n}\n\n\nexport function isLegalKingMove(px : number, py : number, dx : number, dy : number, team : TeamType, boardState : Piece[]) : boolean{\n    if (Math.abs(dx) < 2 && Math.abs(dy) < 2){\n        if (!isFriendlyPiece(px + dx, py + dy, team, boardState)){\n            return true\n        }\n    } \n    return false\n}\n"]},"metadata":{},"sourceType":"module"}