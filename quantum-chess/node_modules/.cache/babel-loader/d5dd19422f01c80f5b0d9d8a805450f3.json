{"ast":null,"code":"import { PieceType, TeamType, AXIS } from \"../constants\";\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove, isCastleMove } from \"./pieceLogic\";\nimport Checker from './checker';\nimport { CLICKED } from '../components/Promotion/promotion';\nimport { executeMove } from \"./executeMove\";\nexport default class Referee {\n  enPassantPawnLogic(px, py, x, y, team, boardState, startingPawnMove, enPassant) {\n    if (startingPawnMove) {\n      setEnPassant(px, py, boardState);\n    } else if (enPassant) {\n      this.takePiece(x, py, team, boardState);\n      unsetEnPassant(boardState);\n    } else {\n      this.takePiece(x, y, team, boardState);\n      unsetEnPassant(boardState);\n    }\n  }\n\n  promote(px, py, x, y, boardState) {\n    const piece = boardState.find(p => p.x === px && p.y === py);\n\n    if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.WHITE && y === 7) {\n      piece.promoted = true;\n    } else if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.BLACK && y === 0) {\n      piece.promoted = true;\n    } else if (piece) {\n      piece.promoted = false;\n    }\n  }\n\n  noCastle(px, py, boardState) {\n    const piece = boardState.find(p => p.x === px && p.y === py);\n\n    if (piece) {\n      piece.canCastle = false;\n    }\n  }\n\n  takePiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team);\n\n    if (piece) {\n      piece.taken = true;\n    }\n  }\n\n  endMove(px, py, x, y, team, boardState, valid, startingPawnMove, enPassant) {\n    if (!isFriendlyPiece(x, y, team, boardState)) {\n      this.promote(px, py, x, y, boardState);\n      this.noCastle(px, py, boardState);\n      this.enPassantPawnLogic(px, py, x, y, team, boardState, startingPawnMove, enPassant);\n      executeMove(px, py, x, y, boardState);\n      const checker = new Checker(null);\n      const inCheck = checker.isMyKingInCheck(team, boardState, 0);\n\n      if (inCheck) {\n        valid.value = false;\n      } else {\n        valid.value = true;\n      }\n    }\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState, activePlayer) {\n    if (!CLICKED) {\n      return false;\n    } // Only the active player can move\n\n\n    if (team !== activePlayer) {\n      return false;\n    } // A non-move is not a move\n\n\n    if (px === x && py === y) {\n      return false;\n    } // A move off the board is not a move\n\n\n    if (!(AXIS.includes(px) && AXIS.includes(py) && AXIS.includes(x) && AXIS.includes(y))) {\n      return false;\n    }\n\n    var valid = {\n      value: false\n    };\n    const dx = x - px;\n    const dy = y - py;\n\n    switch (type) {\n      case PieceType.PAWN:\n        {\n          if (isPawnStartingMove(px, py, x, y, team, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, true, false);\n          }\n\n          if (isPawnNormalMove(px, py, x, y, team, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false, false);\n          }\n\n          if (isEnPassant(px, py, x, y, team, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false, true);\n          }\n\n          break;\n        }\n\n      case PieceType.NIGHT:\n        {\n          if (isLegalNightMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false, false);\n          }\n\n          break;\n        }\n\n      case PieceType.BISHOP:\n        {\n          if (isLegalBishopMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false, false);\n          }\n\n          break;\n        }\n\n      case PieceType.ROOK:\n        {\n          if (isLegalRookMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false, false);\n          }\n\n          break;\n        }\n\n      case PieceType.QUEEN:\n        {\n          if (isLegalQueenMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false, false);\n          }\n\n          break;\n        }\n\n      case PieceType.KING:\n        {\n          if (isLegalKingMove(px, py, dx, dy, boardState)) {\n            this.endMove(px, py, x, y, team, boardState, valid, false, false);\n          }\n\n          if (isCastleMove(px, py, dx, dy, activePlayer, boardState)) {\n            if (activePlayer === TeamType.WHITE) {\n              if (dx === -2) {\n                const piece = boardState.find(p => p.x === 0 && p.y === 0);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n\n              if (dx === 2) {\n                const piece = boardState.find(p => p.x === 7 && p.y === 0);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n            }\n\n            if (activePlayer === TeamType.BLACK) {\n              if (dx === -2) {\n                const piece = boardState.find(p => p.x === 0 && p.y === 7);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n\n              if (dx === 2) {\n                const piece = boardState.find(p => p.x === 7 && p.y === 7);\n\n                if (piece) {\n                  piece.teleported = true;\n                }\n              }\n            }\n\n            this.endMove(px, py, x, y, team, boardState, valid, false, false);\n          }\n\n          break;\n        }\n    }\n\n    return valid.value;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/Referee/referee.ts"],"names":["PieceType","TeamType","AXIS","isPawnNormalMove","isEnPassant","isPawnStartingMove","isFriendlyPiece","unsetEnPassant","setEnPassant","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","isCastleMove","Checker","CLICKED","executeMove","Referee","enPassantPawnLogic","px","py","x","y","team","boardState","startingPawnMove","enPassant","takePiece","promote","piece","find","p","type","PAWN","WHITE","promoted","BLACK","noCastle","canCastle","taken","endMove","valid","checker","inCheck","isMyKingInCheck","value","isValidMove","activePlayer","includes","dx","dy","NIGHT","BISHOP","ROOK","QUEEN","KING","teleported"],"mappings":"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","sourcesContent":["\nimport { PieceType, TeamType, Piece, AXIS } from \"../constants\"\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove, isCastleMove} from \"./pieceLogic\"\nimport Checker from './checker'\nimport {CLICKED} from '../components/Promotion/promotion'\nimport { executeMove } from \"./executeMove\"\n\nexport default class Referee{\n    \n    enPassantPawnLogic(px: number, py: number, x : number, y: number, team : TeamType, \n                        boardState : Piece [], startingPawnMove : boolean, enPassant: boolean){\n        if (startingPawnMove){\n            setEnPassant(px, py, boardState)\n        } else if (enPassant){\n            this.takePiece(x, py, team, boardState)\n            unsetEnPassant(boardState)\n        }\n        else{\n            this.takePiece(x, y, team, boardState)\n            unsetEnPassant(boardState)\n        }\n    }\n\n\n    promote(px: number, py: number, x : number, y: number, boardState : Piece []){\n        const piece = boardState.find(p => p.x === px && p.y === py)\n        if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.WHITE && y === 7){\n            piece.promoted = true\n        }   \n        else if (piece && piece.type === PieceType.PAWN && piece.team === TeamType.BLACK && y === 0){\n            piece.promoted = true\n        } else if (piece){\n            piece.promoted = false\n        }\n    } \n\n    noCastle(px: number, py: number, boardState : Piece []){\n        const piece = boardState.find(p => p.x === px && p.y === py)\n        if (piece){\n            piece.canCastle = false\n        }\n    }\n    takePiece(x : number, y: number, team : TeamType, boardState : Piece []){\n        const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team)  \n                if (piece) {\n            piece.taken = true\n        }\n    }\n\n    endMove(px : number, py : number, x : number, y: number, team : TeamType, \n            boardState : Piece [], valid : any, startingPawnMove: boolean, enPassant: boolean){\n        if (!isFriendlyPiece(x, y, team, boardState)){\n            this.promote(px, py, x, y, boardState)\n            this.noCastle(px, py, boardState)\n            this.enPassantPawnLogic(px, py, x, y, team, boardState, startingPawnMove, enPassant)\n            executeMove(px, py, x, y, boardState)\n            const checker = new Checker(null);\n            const inCheck = checker.isMyKingInCheck(team, boardState, 0)\n            if (inCheck){\n                valid.value = false\n            }  else {\n                valid.value = true\n            }      \n        }\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, \n                team : TeamType, boardState : Piece [],  activePlayer : TeamType) : boolean{\n        if (!CLICKED){\n            return false\n        }  \n        // Only the active player can move\n        if (team !== activePlayer){\n            return false\n        }\n        // A non-move is not a move\n        if (px === x && py === y){\n            return false\n        }\n        // A move off the board is not a move\n        if (!(AXIS.includes(px) &&  AXIS.includes(py) &&  AXIS.includes(x) && AXIS.includes(y))){\n            return false\n        }\n        var valid = { value: false }\n        const dx = x - px\n        const dy = y - py\n\n        switch(type){\n            case PieceType.PAWN : {\n                if (isPawnStartingMove(px, py, x, y, team, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, true, false)\n                }\n                if (isPawnNormalMove(px, py, x, y, team, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false, false)\n                }\n                if (isEnPassant(px, py, x, y, team, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false, true)\n                }\n                break;\n            }\n            case PieceType.NIGHT : {\n                if (isLegalNightMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false, false)\n                }\n                break;\n            }\n            case PieceType.BISHOP : {\n                if (isLegalBishopMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false, false)\n                }\n                break;\n            }\n            case PieceType.ROOK : {\n                if (isLegalRookMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false, false)\n                }\n                break;\n            }\n            case PieceType.QUEEN : {\n                if (isLegalQueenMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false, false)\n                }\n                break;\n            }\n            case PieceType.KING : {\n                if (isLegalKingMove(px, py, dx, dy, boardState)){\n                    this.endMove(px, py, x, y, team, boardState, valid, false, false)\n                }\n                if (isCastleMove(px, py, dx, dy, activePlayer, boardState)){\n                    if (activePlayer === TeamType.WHITE){\n                        if (dx === -2){ \n                            const piece = boardState.find(p => p.x === 0 && p.y === 0)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                        if (dx === 2){ \n                            const piece = boardState.find(p => p.x === 7 && p.y === 0)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                    }\n                    if (activePlayer === TeamType.BLACK){\n                        if (dx === -2){ \n                            const piece = boardState.find(p => p.x === 0 && p.y === 7)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                        if (dx === 2){ \n                            const piece = boardState.find(p => p.x === 7 && p.y === 7)\n                            if (piece){\n                                piece.teleported = true\n                            }\n                        }\n                    }\n                this.endMove(px, py, x, y, team, boardState, valid, false, false)\n                }\n            break;\n            }\n        }\n    return valid.value\n    }\n}"]},"metadata":{},"sourceType":"module"}