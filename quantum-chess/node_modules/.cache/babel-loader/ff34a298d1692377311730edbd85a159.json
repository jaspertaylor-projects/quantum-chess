{"ast":null,"code":"var _jsxFileName = \"/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/chessboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Tile from '../Tile/Tile';\nimport './chessboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst horizontalAxis = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\nconst verticalAxis = [1, 2, 3, 4, 5, 6, 7, 8];\n// Setting Up board starting position\nconst initialBoardState = [];\n\nfor (let p = 0; p < 2; p++) {\n  const type = p === 0 ? 'b' : 'w';\n  const y = p === 0 ? 7 : 0; // Rooks\n\n  initialBoardState.push({\n    image: `assets/images/rook_${type}.png`,\n    x: 0,\n    y\n  });\n  initialBoardState.push({\n    image: `assets/images/rook_${type}.png`,\n    x: 7,\n    y\n  }); // Nights\n\n  initialBoardState.push({\n    image: `assets/images/night_${type}.png`,\n    x: 1,\n    y\n  });\n  initialBoardState.push({\n    image: `assets/images/night_${type}.png`,\n    x: 6,\n    y\n  }); // Bishops\n\n  initialBoardState.push({\n    image: `assets/images/bishop_${type}.png`,\n    x: 2,\n    y\n  });\n  initialBoardState.push({\n    image: `assets/images/bishop_${type}.png`,\n    x: 5,\n    y\n  }); // Queens\n\n  initialBoardState.push({\n    image: `assets/images/queen_${type}.png`,\n    x: 3,\n    y\n  }); // Kings\n\n  initialBoardState.push({\n    image: `assets/images/king_${type}.png`,\n    x: 4,\n    y\n  });\n} // Pawns\n\n\nfor (let i = 0; i < horizontalAxis.length; i++) {\n  initialBoardState.push({\n    image: 'assets/images/pawn_b.png',\n    x: i,\n    y: 6\n  });\n}\n\nfor (let i = 0; i < horizontalAxis.length; i++) {\n  initialBoardState.push({\n    image: 'assets/images/pawn_w.png',\n    x: i,\n    y: 1\n  });\n}\n\nexport default function Chessboard() {\n  _s();\n\n  const [pieces, setPieces] = useState([]);\n  const chessboardRef = useRef(null);\n  let activePiece = null;\n  useEffect(() => {\n    for (let p = 0; p < 2; p++) {\n      const type = p === 0 ? 'b' : 'w';\n      const y = p === 0 ? 7 : 0; // Rooks\n\n      pieces.push({\n        image: `assets/images/rook_${type}.png`,\n        x: 0,\n        y\n      });\n      pieces.push({\n        image: `assets/images/rook_${type}.png`,\n        x: 7,\n        y\n      }); // Nights\n\n      pieces.push({\n        image: `assets/images/night_${type}.png`,\n        x: 1,\n        y\n      });\n      pieces.push({\n        image: `assets/images/night_${type}.png`,\n        x: 6,\n        y\n      }); // Bishops\n\n      pieces.push({\n        image: `assets/images/bishop_${type}.png`,\n        x: 2,\n        y\n      });\n      pieces.push({\n        image: `assets/images/bishop_${type}.png`,\n        x: 5,\n        y\n      }); // Queens\n\n      pieces.push({\n        image: `assets/images/queen_${type}.png`,\n        x: 3,\n        y\n      }); // Kings\n\n      pieces.push({\n        image: `assets/images/king_${type}.png`,\n        x: 4,\n        y\n      });\n    } // Pawns\n\n\n    for (let i = 0; i < horizontalAxis.length; i++) {\n      pieces.push({\n        image: 'assets/images/pawn_b.png',\n        x: i,\n        y: 6\n      });\n    }\n\n    for (let i = 0; i < horizontalAxis.length; i++) {\n      pieces.push({\n        image: 'assets/images/pawn_w.png',\n        x: i,\n        y: 1\n      });\n    }\n  }, []);\n\n  function grabPiece(e) {\n    const element = e.target;\n\n    if (element.classList.contains('chess-piece')) {\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      element.style.position = 'absolute';\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      activePiece = element;\n    }\n  }\n\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 75;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 75;\n      const x = e.clientX - 50;\n      const y = e.clientY - 50;\n      activePiece.style.position = 'absolute';\n\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      } else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      } else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n\n  function dropPiece(e) {\n    if (activePiece) {\n      const element = e.target;\n      activePiece = null;\n    }\n  }\n\n  let board = [];\n\n  for (let j = verticalAxis.length - 1; j >= 0; j--) {\n    for (let i = 0; i < horizontalAxis.length; i++) {\n      const number = i + j;\n      let image = undefined;\n      pieces.forEach(p => {\n        if (p.x === i && p.y === j) {\n          image = p.image;\n        }\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: image,\n        number: number\n      }, `${i}, ${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 24\n      }, this));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chessboardRef,\n    onMouseUp: e => dropPiece(e),\n    onMouseMove: e => movePiece(e),\n    onMouseDown: e => grabPiece(e),\n    id: \"chessboard\",\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Chessboard, \"W37Odhm/Z4N+a+5HliNiPs45bBc=\");\n\n_c = Chessboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/chessboard.tsx"],"names":["React","useEffect","useRef","useState","Tile","horizontalAxis","verticalAxis","initialBoardState","p","type","y","push","image","x","i","length","Chessboard","pieces","setPieces","chessboardRef","activePiece","grabPiece","e","element","target","classList","contains","clientX","clientY","style","position","left","top","movePiece","chessboard","current","minX","offsetLeft","minY","offsetTop","maxX","clientWidth","maxY","clientHeight","dropPiece","board","j","number","undefined","forEach"],"mappings":"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","sourcesContent":["import React, { MouseEvent, useEffect, useRef, useState } from 'react';\nimport Tile from '../Tile/Tile';\nimport './chessboard.css';\n\n\nconst horizontalAxis = ['a', 'b', 'c', 'd', 'e', 'f',   'g', 'h'];\nconst verticalAxis = [1,2,3,4,5,6,7,8];\n\ninterface Piece {\n    image: string;\n    x : number; \n    y : number; \n}\n\n// Setting Up board starting position\nconst initialBoardState : Piece[] = [];\n\nfor (let p = 0; p < 2; p ++){\n    const type = p === 0 ? 'b': 'w';\n    const y = p === 0 ?  7 : 0;\n    // Rooks\n    initialBoardState.push({image : `assets/images/rook_${type}.png`, x : 0,  y})\n    initialBoardState.push({image : `assets/images/rook_${type}.png`, x : 7,  y})\n\n    // Nights\n    initialBoardState.push({image : `assets/images/night_${type}.png`, x : 1,  y})\n    initialBoardState.push({image : `assets/images/night_${type}.png`, x : 6,  y})\n\n    // Bishops\n    initialBoardState.push({image : `assets/images/bishop_${type}.png`, x : 2,  y})\n    initialBoardState.push({image : `assets/images/bishop_${type}.png`, x : 5,  y})\n\n    // Queens\n    initialBoardState.push({image : `assets/images/queen_${type}.png`, x : 3,  y})\n    // Kings\n    initialBoardState.push({image : `assets/images/king_${type}.png`, x : 4,  y})\n\n}\n\n// Pawns\nfor (let i = 0; i < horizontalAxis.length; i++){\n    initialBoardState.push({image : 'assets/images/pawn_b.png', x : i, y : 6})\n}\nfor (let i = 0; i < horizontalAxis.length; i++){\n    initialBoardState.push({image : 'assets/images/pawn_w.png', x : i, y : 1})\n}\n\n\n\nexport default function Chessboard(){\n    const [pieces, setPieces]  = useState<Piece[]>([]);\n    const chessboardRef = useRef<HTMLDivElement>(null);\n    let activePiece: HTMLElement | null = null;\n\n    useEffect(() => {\n        for (let p = 0; p < 2; p ++){\n            const type = p === 0 ? 'b': 'w';\n            const y = p === 0 ?  7 : 0;\n            // Rooks\n            pieces.push({image : `assets/images/rook_${type}.png`, x : 0,  y})\n            pieces.push({image : `assets/images/rook_${type}.png`, x : 7,  y})\n        \n            // Nights\n            pieces.push({image : `assets/images/night_${type}.png`, x : 1,  y})\n            pieces.push({image : `assets/images/night_${type}.png`, x : 6,  y})\n        \n            // Bishops\n            pieces.push({image : `assets/images/bishop_${type}.png`, x : 2,  y})\n            pieces.push({image : `assets/images/bishop_${type}.png`, x : 5,  y})\n        \n            // Queens\n            pieces.push({image : `assets/images/queen_${type}.png`, x : 3,  y})\n            // Kings\n            pieces.push({image : `assets/images/king_${type}.png`, x : 4,  y})\n        \n        }\n        \n        // Pawns\n        for (let i = 0; i < horizontalAxis.length; i++){\n            pieces.push({image : 'assets/images/pawn_b.png', x : i, y : 6})\n        }\n        for (let i = 0; i < horizontalAxis.length; i++){\n            pieces.push({image : 'assets/images/pawn_w.png', x : i, y : 1})\n        }\n    }, [])\n\n    function grabPiece(e: React.MouseEvent){\n        const element = e.target as HTMLElement\n        if (element.classList.contains('chess-piece')){\n            const x = e.clientX -50;\n            const y = e.clientY -50;\n            element.style.position = 'absolute'; \n            element.style.left = `${x}px`;\n            element.style.top = `${y}px`;\n            activePiece = element;\n    \n        }\n    \n    }\n    \n    function movePiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        if (activePiece && chessboard){\n            const minX = chessboard.offsetLeft - 25;\n            const minY = chessboard.offsetTop - 25;\n            const maxX = chessboard.offsetLeft + chessboard.clientWidth -75;\n            const maxY = chessboard.offsetTop + chessboard.clientHeight -75;\n            const x = e.clientX -50;\n            const y = e.clientY -50;\n            activePiece.style.position = 'absolute'; \n            if (x < minX) {\n                activePiece.style.left = `${minX}px` ;\n            } else if (x > maxX) {\n                activePiece.style.left = `${maxX}px`;\n            } else {\n                activePiece.style.left = `${x}px`;\n            }\n            if (y < minY) {\n                activePiece.style.top = `${minY}px`;\n            } else if (y > maxY) {\n                activePiece.style.top = `${maxY}px`;\n            } else {\n                activePiece.style.top = `${y}px`;\n            }\n        }\n    }\n    \n    function dropPiece(e: React.MouseEvent){\n        if (activePiece){\n            const element = e.target as HTMLElement\n            activePiece = null;\n        }  \n    }\n\n\n\n\n\n    let board = [];\n    for (let j = verticalAxis.length - 1; j >= 0; j-- ){\n        for (let i = 0; i < horizontalAxis.length; i++ ) {\n            const number = i + j;\n            let image = undefined;\n            pieces.forEach(p => {\n                if (p.x === i && p.y === j){\n                    image = p.image;\n                }\n                \n            }); \n            board.push(<Tile key = {`${i}, ${j}`} image = {image} number = {number}/>);\n        }\n    }\n    return <div \n    ref = {chessboardRef} \n    onMouseUp = {e => dropPiece(e)} \n    onMouseMove = {e => movePiece(e)} \n    onMouseDown = {e => grabPiece(e)} \n    id = 'chessboard'>{board}</div>;\n}"]},"metadata":{},"sourceType":"module"}