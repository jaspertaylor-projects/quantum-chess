{"ast":null,"code":"import { PieceType, TeamType } from '../constants';\nimport Checker from './Checker';\nexport function isLegalRookMove(px, py, dx, dy, boardState) {\n  if (dx === 0 || dy === 0) {\n    if (dx === 0) {\n      const y_dir = Math.sign(dy);\n\n      for (let i = 1; i < Math.abs(dy); i++) {\n        const obstructingPiece = boardState.find(p => p.x === px && p.y === py + i * y_dir);\n\n        if (obstructingPiece) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    if (dy === 0) {\n      const x_dir = Math.sign(dx);\n\n      for (let i = 1; i < Math.abs(dx); i++) {\n        const obstructingPiece = boardState.find(p => p.x === px + i * x_dir && p.y === py);\n\n        if (obstructingPiece) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function isLegalBishopMove(px, py, dx, dy, boardState) {\n  if (Math.abs(dx) === Math.abs(dy)) {\n    const x_dir = Math.sign(dx);\n    const y_dir = Math.sign(dy);\n\n    for (let i = 1; i < Math.abs(dx); i++) {\n      const obstructingPiece = boardState.find(p => p.x === px + i * x_dir && p.y === py + i * y_dir);\n\n      if (obstructingPiece) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\nexport function isLegalNightMove(px, py, dx, dy, boardState) {\n  if (Math.abs(dx) === 1 && Math.abs(dy) === 2 || Math.abs(dx) === 2 && Math.abs(dy) === 1) {\n    return true;\n  }\n\n  return false;\n}\nexport function isLegalQueenMove(px, py, dx, dy, boardState) {\n  const legality = isLegalRookMove(px, py, dx, dy, boardState) || isLegalBishopMove(px, py, dx, dy, boardState);\n  return legality;\n}\nexport function isLegalKingMove(px, py, dx, dy, boardState) {\n  if (Math.abs(dx) < 2 && Math.abs(dy) < 2) {\n    return true;\n  }\n\n  return false;\n}\nexport function isCastleMove(px, py, dx, dy, team, boardState) {\n  const checker = new Checker(null);\n  const king = boardState.find(p => p.type === PieceType.KING && p.team === team);\n\n  if (team === TeamType.WHITE) {\n    if ((king === null || king === void 0 ? void 0 : king.canCastle) === true && dx === -2) {\n      const rook = boardState.find(p => p.x === 0 && p.y === 0);\n\n      if (rook === null || rook === void 0 ? void 0 : rook.canCastle) {\n        if (!checker.isMyKingInCheck(team, boardState, 0) && !checker.isMyKingInCheck(team, boardState, -1) && !checker.isMyKingInCheck(team, boardState, -2)) {\n          if (isLegalRookMove(king.x, king.y, -4, 0, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    if ((king === null || king === void 0 ? void 0 : king.canCastle) === true && dx === 2) {\n      const rook = boardState.find(p => p.x === 7 && p.y === 0);\n\n      if (rook === null || rook === void 0 ? void 0 : rook.canCastle) {\n        if (!checker.isMyKingInCheck(team, boardState, 0) && !checker.isMyKingInCheck(team, boardState, 1) && !checker.isMyKingInCheck(team, boardState, 2)) {\n          if (isLegalRookMove(king.x, king.y, 3, 0, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n\n  if (team === TeamType.BLACK) {\n    if ((king === null || king === void 0 ? void 0 : king.canCastle) === true && dx === -2) {\n      const rook = boardState.find(p => p.x === 0 && p.y === 7);\n\n      if (rook === null || rook === void 0 ? void 0 : rook.canCastle) {\n        if (!checker.isMyKingInCheck(team, boardState, 0) && !checker.isMyKingInCheck(team, boardState, -1) && !checker.isMyKingInCheck(team, boardState, -2)) {\n          if (isLegalRookMove(king.x, king.y, -4, 0, boardState)) {\n            return true;\n          }\n        }\n      }\n    }\n\n    if ((king === null || king === void 0 ? void 0 : king.canCastle) === true && dx === 2) {\n      const rook = boardState.find(p => p.x === 7 && p.y === 7);\n\n      if (rook === null || rook === void 0 ? void 0 : rook.canCastle) {\n        if (!checker.isMyKingInCheck(team, boardState, 0) && !checker.isMyKingInCheck(team, boardState, 1) && !checker.isMyKingInCheck(team, boardState, 2)) {\n          if (isLegalRookMove(king.x, king.y, 3, 0, boardState)) {\n            return true;\n          }\n\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/Referee/pieceLogic.ts"],"names":["PieceType","TeamType","Checker","isLegalRookMove","px","py","dx","dy","boardState","y_dir","Math","sign","i","abs","obstructingPiece","find","p","x","y","x_dir","isLegalBishopMove","isLegalNightMove","isLegalQueenMove","legality","isLegalKingMove","isCastleMove","team","checker","king","type","KING","WHITE","canCastle","rook","isMyKingInCheck","BLACK"],"mappings":"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","sourcesContent":["import { Piece , PieceType, TeamType} from '../constants'\nimport Checker from './Checker'\n\nexport function isLegalRookMove(px : number, py : number, dx : number, dy : number, boardState : Piece[]) : boolean {\n    if (dx === 0 || dy === 0){\n        if (dx === 0){\n            const y_dir = Math.sign(dy)\n            for (let i = 1; i < Math.abs(dy); i ++){\n                const obstructingPiece = boardState.find(p => p.x === px && p.y === py + i*y_dir) \n                if (obstructingPiece){\n                    return false\n                }\n            } \n            return true\n        }\n        if (dy === 0){\n            const x_dir = Math.sign(dx)\n            for (let i = 1; i < Math.abs(dx); i ++){\n                const obstructingPiece = boardState.find(p => p.x === px + i*x_dir && p.y === py) \n                if (obstructingPiece){\n                    return false\n                }\n            } \n            return true\n        }\n    } \n    return false;\n}\n\nexport function isLegalBishopMove(px : number, py : number, dx : number, dy : number, boardState : Piece[]) : boolean{\n    if (Math.abs(dx) === Math.abs(dy)){\n        const x_dir = Math.sign(dx)\n        const y_dir = Math.sign(dy)\n        for (let i = 1; i < Math.abs(dx); i ++){\n            const obstructingPiece = boardState.find(p => p.x === px + i*x_dir && p.y === py + i*y_dir) \n            if (obstructingPiece){\n                return false\n            }\n        } \n        return true\n    } \n    return false\n}\nexport function isLegalNightMove(px : number, py : number, dx : number, dy : number, boardState : Piece[]) : boolean{\n    if ((Math.abs(dx) === 1 && Math.abs(dy) === 2) || (Math.abs(dx) === 2 && Math.abs(dy) === 1)){\n        return true\n    }\n    return false\n}\nexport function isLegalQueenMove(px : number, py : number, dx : number, dy : number, boardState : Piece[]) : boolean{\n    const legality = isLegalRookMove(px, py, dx, dy, boardState) || isLegalBishopMove(px, py, dx, dy, boardState)\n    return legality\n}\n\n\nexport function isLegalKingMove(px : number, py : number, dx : number, dy : number, boardState : Piece[]) : boolean{\n    if (Math.abs(dx) < 2 && Math.abs(dy) < 2){\n        return true\n    } \n    return false\n}\n\nexport function isCastleMove(px : number, py : number, dx : number, dy : number, team : TeamType,\n                            boardState : Piece[]) : boolean{\n    const checker = new Checker(null);\n    const king = boardState.find(p => p.type === PieceType.KING && p.team === team)\n    if (team === TeamType.WHITE){\n        if (king?.canCastle === true && dx === - 2){\n            const rook = boardState.find(p => p.x === 0 && p.y === 0)\n            if (rook?.canCastle){\n                if (!checker.isMyKingInCheck(team, boardState, 0) && \n                    !checker.isMyKingInCheck(team, boardState, -1) &&\n                    !checker.isMyKingInCheck(team, boardState, -2)){\n                        if (isLegalRookMove(king.x, king.y, -4, 0, boardState)){\n                            return true\n                        }\n                }\n            }\n        } \n        if (king?.canCastle === true && dx === 2){\n            const rook = boardState.find(p => p.x === 7 && p.y === 0)\n            if (rook?.canCastle){\n                if (!checker.isMyKingInCheck(team, boardState, 0) && \n                    !checker.isMyKingInCheck(team, boardState, 1) &&\n                    !checker.isMyKingInCheck(team, boardState, 2)){\n                        if (isLegalRookMove(king.x, king.y, 3, 0, boardState)){\n                            return true\n                        }\n                }\n            }\n        } \n    }\n    if (team === TeamType.BLACK){\n        if (king?.canCastle === true && dx === - 2){\n            const rook = boardState.find(p => p.x === 0 && p.y === 7)\n            if (rook?.canCastle){\n                if (!checker.isMyKingInCheck(team, boardState, 0) && \n                    !checker.isMyKingInCheck(team, boardState, -1) &&\n                    !checker.isMyKingInCheck(team, boardState, -2)){\n                        if (isLegalRookMove(king.x, king.y, -4, 0, boardState)){\n                            return true\n                        }\n                }\n            }\n        } \n        if (king?.canCastle === true && dx === 2){\n            const rook = boardState.find(p => p.x === 7 && p.y === 7)\n            if (rook?.canCastle){\n                if (!checker.isMyKingInCheck(team, boardState, 0) && \n                    !checker.isMyKingInCheck(team, boardState, 1) &&\n                    !checker.isMyKingInCheck(team, boardState, 2)){\n                        if (isLegalRookMove(king.x, king.y, 3, 0, boardState)){\n                            return true\n                        }\n                    return true\n                }\n            }\n        } \n    }\n    return false\n}"]},"metadata":{},"sourceType":"module"}