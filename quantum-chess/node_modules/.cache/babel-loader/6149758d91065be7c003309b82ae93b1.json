{"ast":null,"code":"import { PieceType, TeamType } from \"../components/chessboard/chessboard\";\nexport default class Referee {\n  pawnIsBlockaded(x, y, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y);\n    const occupied = piece ? true : false;\n    return occupied;\n  }\n\n  isFriendlyPiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y);\n    const occupied = piece && piece.team === team ? true : false;\n    return occupied;\n  }\n\n  setEnPassant(px, py, boardState) {\n    boardState.forEach(p => {\n      if (p.x === px && p.y === py) {\n        p.enPassantable = true;\n      } else {\n        p.enPassantable = false;\n      }\n    });\n  }\n\n  unsetEnPassant(boardState) {\n    boardState.forEach(p => {\n      p.enPassantable = false;\n    });\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState) {\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE; //PAWN LOGIC \n    //May want to put each piece in different function\n\n    if (type === PieceType.PAWN) {\n      const startingRow = team === TeamType.WHITE ? 1 : 6;\n      const increment = team === TeamType.WHITE ? 1 : -1; // Moving Logic\n\n      if (py === startingRow && px === x && py === y - 2 * increment) {\n        if (!this.pawnIsBlockaded(x, y, boardState) && !this.pawnIsBlockaded(x, y - increment, boardState)) {\n          this.setEnPassant(px, py, boardState);\n          return true;\n        }\n      }\n\n      if (py === y - increment && px === x) {\n        if (!this.pawnIsBlockaded(x, y, boardState)) {\n          this.unsetEnPassant(boardState);\n          return true;\n        }\n      } // ATTACK LOGIC\n\n\n      if ((x === px + 1 || x === px - 1) && py === y - increment && this.isFriendlyPiece(x, y, enemyTeam, boardState)) {\n        this.unsetEnPassant(boardState);\n        return true;\n      }\n\n      if (x === px + 1 && py === y - increment && this.isFriendlyPiece(x + 1, y, enemyTeam, boardState)) {\n        this.unsetEnPassant(boardState);\n        return true;\n      }\n\n      if (x === px - 1 && py === y - increment && this.isFriendlyPiece(x - 1, y, enemyTeam, boardState)) {\n        this.unsetEnPassant(boardState);\n        return true;\n      }\n    } // NIGHT LOGIC \n\n\n    if (type === PieceType.NIGHT) {\n      if ((px === x + 1 || px === x - 1) && (py === y + 2 || py === y - 2) || (py === y + 1 || py === y - 1) && (px === x + 2 || px === x - 2)) {\n        if (!this.isFriendlyPiece(x, y, team, boardState)) {\n          this.unsetEnPassant(boardState);\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","TeamType","Referee","pawnIsBlockaded","x","y","boardState","piece","find","p","occupied","isFriendlyPiece","team","setEnPassant","px","py","forEach","enPassantable","unsetEnPassant","isValidMove","type","enemyTeam","WHITE","BLACK","PAWN","startingRow","increment","NIGHT"],"mappings":"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","sourcesContent":["import { PieceType, TeamType, Piece } from \"../components/chessboard/chessboard\"\n\nexport default class Referee{\n    pawnIsBlockaded(x : number, y: number, boardState : Piece []): boolean {\n        const piece = boardState.find(p => p.x === x && p.y === y) \n        const occupied =  piece ? true : false\n        return occupied\n    }\n    \n    isFriendlyPiece(x : number, y: number, team : TeamType, boardState : Piece []): boolean {\n        const piece = boardState.find(p => p.x === x && p.y === y)\n        const occupied =  piece && piece.team === team ? true : false\n        return occupied\n    }\n    setEnPassant(px : number, py : number, boardState : Piece []){\n        boardState.forEach(p => {\n            if (p.x === px && p.y === py){\n                p.enPassantable = true\n            } else{\n                p.enPassantable = false\n            }\n        })\n    }\n    unsetEnPassant( boardState : Piece []){\n        boardState.forEach(p => {\n                p.enPassantable = false\n            })\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, team : TeamType, boardState : Piece []){\n        const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        //PAWN LOGIC \n        //May want to put each piece in different function\n        if (type === PieceType.PAWN){\n            const startingRow = team === TeamType.WHITE ? 1 : 6\n            const increment = team === TeamType.WHITE ? 1 : - 1\n            // Moving Logic\n            if ((py === startingRow && px === x) && (py === y - 2 * increment)){\n                if (!this.pawnIsBlockaded(x, y, boardState) && !this.pawnIsBlockaded(x, y - increment, boardState)){\n                    this.setEnPassant(px, py, boardState)\n                    return true\n                }\n            } \n            if (py === y - increment && px === x){\n                if (!this.pawnIsBlockaded(x, y, boardState)){\n                    this.unsetEnPassant(boardState)\n                    return true;\n                }\n            } \n            // ATTACK LOGIC\n            if ((x === px + 1 || x === px -1) && (py === y - increment) && this.isFriendlyPiece(x, y, enemyTeam, boardState)) {\n                this.unsetEnPassant(boardState)\n                return true\n            }\n            if ((x === px + 1) && (py === y - increment) && this.isFriendlyPiece(x + 1, y, enemyTeam, boardState)) {\n                this.unsetEnPassant(boardState)\n                return true\n            }\n            if ((x === px - 1) && (py === y - increment) && this.isFriendlyPiece(x - 1, y, enemyTeam, boardState)) {\n                this.unsetEnPassant(boardState)\n                return true\n            }\n        }\n        // NIGHT LOGIC \n        if (type === PieceType.NIGHT){\n            if (((px === x + 1 || px === x - 1) &&  (py === y + 2 || py === y - 2)) ||\n                ((py === y + 1 || py === y - 1) &&  (px === x + 2 || px === x - 2))){\n                    if (!this.isFriendlyPiece(x, y, team, boardState)){\n                        this.unsetEnPassant(boardState)\n                        return true\n                    }\n            }\n        }\n\n        return false\n    }\n}"]},"metadata":{},"sourceType":"module"}