{"ast":null,"code":"import { PieceType, TeamType } from \"../constants\";\nimport { setEnPassant, checkEnPassant } from \"./epRef\";\nexport default class Referee {\n  pawnIsBlockaded(x, y, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y);\n    const occupied = piece ? true : false;\n    return occupied;\n  }\n\n  isFriendlyPiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y);\n    const occupied = piece && piece.team === team ? true : false;\n    return occupied;\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState) {\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE; //PAWN LOGIC \n    //May want to put each piece in different function\n\n    if (type === PieceType.PAWN) {\n      const startingRow = team === TeamType.WHITE ? 1 : 6;\n      const increment = team === TeamType.WHITE ? 1 : -1;\n      console.log(px, py, x, y, increment); // Moving Logic\n\n      if (py === startingRow && px === x && py === y - 2 * increment) {\n        if (!this.pawnIsBlockaded(x, y, boardState) && !this.pawnIsBlockaded(x, y - increment, boardState)) {\n          setEnPassant(px, py, boardState);\n          return true;\n        }\n      }\n\n      if (py === y - increment && px === x) {\n        if (!this.pawnIsBlockaded(x, y, boardState)) {\n          unsetEnPassant(boardState);\n          return true;\n        }\n      } // ATTACK LOGIC\n\n\n      if ((x === px + 1 || x === px - 1) && py === y - increment && this.isFriendlyPiece(x, y, enemyTeam, boardState)) {\n        unsetEnPassant(boardState);\n        return true;\n      }\n\n      if ((x === px + 1 || x === px - 1) && py === y - increment && this.isFriendlyPiece(x, py, enemyTeam, boardState)) {\n        if (checkEnPassant(x, py, boardState)) {\n          unsetEnPassant(boardState);\n          return true;\n        }\n      }\n    } // NIGHT LOGIC \n\n\n    if (type === PieceType.NIGHT) {\n      if ((px === x + 1 || px === x - 1) && (py === y + 2 || py === y - 2) || (py === y + 1 || py === y - 1) && (px === x + 2 || px === x - 2)) {\n        if (!this.isFriendlyPiece(x, y, team, boardState)) {\n          unsetEnPassant(boardState);\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","TeamType","setEnPassant","checkEnPassant","Referee","pawnIsBlockaded","x","y","boardState","piece","find","p","occupied","isFriendlyPiece","team","isValidMove","px","py","type","enemyTeam","WHITE","BLACK","PAWN","startingRow","increment","console","log","unsetEnPassant","NIGHT"],"mappings":"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","sourcesContent":["import Chessboard from \"../components/chessboard/chessboard\"\nimport { PieceType, TeamType, Piece } from \"../constants\"\nimport { setEnPassant , checkEnPassant} from \"./epRef\"\n\nexport default class Referee{\n    pawnIsBlockaded(x : number, y: number, boardState : Piece []): boolean {\n        const piece = boardState.find(p => p.x === x && p.y === y) \n        const occupied =  piece ? true : false\n        return occupied\n    }\n    \n    isFriendlyPiece(x : number, y: number, team : TeamType, boardState : Piece []): boolean {\n        const piece = boardState.find(p => p.x === x && p.y === y)\n        const occupied =  piece && piece.team === team ? true : false\n        return occupied\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, team : TeamType, boardState : Piece []){\n        const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        //PAWN LOGIC \n        //May want to put each piece in different function\n        if (type === PieceType.PAWN){\n            const startingRow = team === TeamType.WHITE ? 1 : 6\n            const increment = team === TeamType.WHITE ? 1 : - 1\n            console.log(px, py, x, y, increment)\n            // Moving Logic\n            if ((py === startingRow && px === x) && (py === y - 2 * increment)){\n                if (!this.pawnIsBlockaded(x, y, boardState) && !this.pawnIsBlockaded(x, y - increment, boardState)){\n                    setEnPassant(px, py, boardState)\n                    return true\n                }\n            } \n            if (py === y - increment && px === x){\n                if (!this.pawnIsBlockaded(x, y, boardState)){\n                    unsetEnPassant(boardState)\n                    return true;\n                }\n            } \n            // ATTACK LOGIC\n            if ((x === px + 1 || x === px -1) && (py === y - increment) && this.isFriendlyPiece(x, y, enemyTeam, boardState)) {\n                unsetEnPassant(boardState)\n                return true\n            }\n            if ((x === px + 1 || x === px -1) && (py === y - increment) && this.isFriendlyPiece(x, py, enemyTeam, boardState)) {\n                if (checkEnPassant(x, py, boardState)){\n                    unsetEnPassant(boardState)\n                    return true\n                }\n            }\n        }\n        // NIGHT LOGIC \n        if (type === PieceType.NIGHT){\n            if (((px === x + 1 || px === x - 1) &&  (py === y + 2 || py === y - 2)) ||\n                ((py === y + 1 || py === y - 1) &&  (px === x + 2 || px === x - 2))){\n                    if (!this.isFriendlyPiece(x, y, team, boardState)){\n                        unsetEnPassant(boardState)\n                        return true\n                    }\n            }\n        }\n\n        return false\n    }\n}"]},"metadata":{},"sourceType":"module"}