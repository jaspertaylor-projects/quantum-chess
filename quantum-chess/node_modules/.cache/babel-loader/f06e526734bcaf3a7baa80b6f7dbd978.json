{"ast":null,"code":"import { PieceType, TeamType } from \"../constants\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove } from \"./pieceLogic\";\nimport { isPawnNormalMove } from \"./pawnLogic\";\nexport default class Checker {\n  isMyKingInCheck(team, boardState, increment) {\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    const myKing = boardState.find(p => p.team === team && p.type === PieceType.KING);\n\n    for (let i = 0; i < boardState.length; i++) {\n      const p = boardState[i];\n\n      if (myKing && p.team === enemyTeam) {\n        const dx = myKing.x + increment - p.x;\n        const dy = myKing.y - p.y;\n\n        switch (p.type) {\n          case PieceType.PAWN:\n            {\n              if (isPawnNormalMove(p.x, p.y, myKing.x + increment, myKing.y, p.team, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.NIGHT:\n            {\n              if (isLegalNightMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.BISHOP:\n            {\n              if (isLegalBishopMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.ROOK:\n            {\n              if (isLegalRookMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.QUEEN:\n            {\n              if (isLegalQueenMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.KING:\n            {\n              if (isLegalKingMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n        }\n      }\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/boardChecks.ts"],"names":["PieceType","TeamType","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","isPawnNormalMove","Checker","isMyKingInCheck","team","boardState","increment","enemyTeam","WHITE","BLACK","myKing","find","p","type","KING","i","length","dx","x","dy","y","PAWN","NIGHT","BISHOP","ROOK","QUEEN"],"mappings":"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","sourcesContent":["import { PieceType, TeamType, Piece } from \"../constants\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove} from \"./pieceLogic\"\nimport { isPawnNormalMove } from \"./pawnLogic\"\n\nexport default class Checker{\n    isMyKingInCheck(team : TeamType, boardState : Piece [], increment : number) : boolean {\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n    const myKing = boardState.find(p => p.team === team && p.type === PieceType.KING) \n    for (let i = 0; i < boardState.length; i++){\n        const p = boardState[i];\n        if (myKing && p.team === enemyTeam) {\n            const dx = myKing.x + increment - p.x\n            const dy = myKing.y - p.y\n            switch (p.type){\n                case PieceType.PAWN : {\n                    if (isPawnNormalMove(p.x, p.y, myKing.x + increment, myKing.y, p.team, boardState)){\n                        return true;\n                    } break;\n                }\n                case PieceType.NIGHT : {\n                    if (isLegalNightMove(p.x, p.y, dx, dy, boardState)){\n                        return true;\n                    } break;\n                }\n                case PieceType.BISHOP : {\n                    if (isLegalBishopMove(p.x, p.y, dx, dy, boardState)){\n                        return true;\n                    } break;\n                }\n                case PieceType.ROOK : {\n                    if (isLegalRookMove(p.x, p.y, dx, dy, boardState)){\n                        return true;\n                    } break;\n                }\n                case PieceType.QUEEN : {\n                    if (isLegalQueenMove(p.x, p.y, dx, dy, boardState)){\n                        return true;\n                    } break;\n                }\n                case PieceType.KING : {\n                    if (isLegalKingMove(p.x, p.y, dx, dy, boardState)){\n                        return true;\n                    } break;\n                }\n            }\n\n        }\n    }\n    return false\n}\n}"]},"metadata":{},"sourceType":"module"}