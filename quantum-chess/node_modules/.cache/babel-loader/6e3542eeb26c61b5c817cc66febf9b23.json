{"ast":null,"code":"import { PieceType, TeamType } from \"../../constants\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove } from \"../../referee/pieceLogic\";\nexport default class Checker {\n  isMyKingInCheck(team, boardState) {\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    const myKing = boardState.find(p => p.team === team && p.type === PieceType.KING);\n    boardState.forEach(p => {\n      if (myKing && p.team === enemyTeam) {\n        const dx = myKing.x - p.x;\n        const dy = myKing.y - p.y;\n\n        switch (p.type) {\n          case PieceType.NIGHT:\n            {\n              if (isLegalNightMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.BISHOP:\n            {\n              console.log('im a bishop');\n\n              if (isLegalBishopMove(p.x, p.y, dx, dy, boardState)) {\n                console.log('I think I can get your king');\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.ROOK:\n            {\n              if (isLegalRookMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.QUEEN:\n            {\n              if (isLegalQueenMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.KING:\n            {\n              if (isLegalKingMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n        }\n      }\n    });\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/boardChecks.ts"],"names":["PieceType","TeamType","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","Checker","isMyKingInCheck","team","boardState","enemyTeam","WHITE","BLACK","myKing","find","p","type","KING","forEach","dx","x","dy","y","NIGHT","BISHOP","console","log","ROOK","QUEEN"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAA2C,iBAA3C;AACA,SAASC,iBAAT,EAA4BC,eAA5B,EAA6CC,gBAA7C,EAA+DC,eAA/D,EAAgFC,gBAAhF,QAAuG,0BAAvG;AAEA,eAAe,MAAMC,OAAN,CAAa;AACxBC,EAAAA,eAAe,CAACC,IAAD,EAAkBC,UAAlB,EAAmD;AAClE,UAAMC,SAAS,GAAGF,IAAI,KAAKR,QAAQ,CAACW,KAAlB,GAA0BX,QAAQ,CAACY,KAAnC,GAA2CZ,QAAQ,CAACW,KAAtE;AACA,UAAME,MAAM,GAAGJ,UAAU,CAACK,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACP,IAAF,KAAWA,IAAX,IAAmBO,CAAC,CAACC,IAAF,KAAWjB,SAAS,CAACkB,IAA7D,CAAf;AACAR,IAAAA,UAAU,CAACS,OAAX,CAAmBH,CAAC,IAAI;AACpB,UAAIF,MAAM,IAAIE,CAAC,CAACP,IAAF,KAAWE,SAAzB,EAAoC;AAChC,cAAMS,EAAE,GAAGN,MAAM,CAACO,CAAP,GAAWL,CAAC,CAACK,CAAxB;AACA,cAAMC,EAAE,GAAGR,MAAM,CAACS,CAAP,GAAWP,CAAC,CAACO,CAAxB;;AACA,gBAAQP,CAAC,CAACC,IAAV;AACI,eAAKjB,SAAS,CAACwB,KAAf;AAAuB;AACnB,kBAAIlB,gBAAgB,CAACU,CAAC,CAACK,CAAH,EAAML,CAAC,CAACO,CAAR,EAAWH,EAAX,EAAeE,EAAf,EAAmBZ,UAAnB,CAApB,EAAmD;AAC/C,uBAAO,IAAP;AACH;;AAAC;AACL;;AACD,eAAKV,SAAS,CAACyB,MAAf;AAAwB;AACpBC,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;;AACA,kBAAIzB,iBAAiB,CAACc,CAAC,CAACK,CAAH,EAAML,CAAC,CAACO,CAAR,EAAWH,EAAX,EAAeE,EAAf,EAAmBZ,UAAnB,CAArB,EAAoD;AAChDgB,gBAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,uBAAO,IAAP;AACH;;AAAC;AACL;;AACD,eAAK3B,SAAS,CAAC4B,IAAf;AAAsB;AAClB,kBAAIzB,eAAe,CAACa,CAAC,CAACK,CAAH,EAAML,CAAC,CAACO,CAAR,EAAWH,EAAX,EAAeE,EAAf,EAAmBZ,UAAnB,CAAnB,EAAkD;AAC9C,uBAAO,IAAP;AACH;;AAAC;AACL;;AACD,eAAKV,SAAS,CAAC6B,KAAf;AAAuB;AACnB,kBAAIzB,gBAAgB,CAACY,CAAC,CAACK,CAAH,EAAML,CAAC,CAACO,CAAR,EAAWH,EAAX,EAAeE,EAAf,EAAmBZ,UAAnB,CAApB,EAAmD;AAC/C,uBAAO,IAAP;AACH;;AAAC;AACL;;AACD,eAAKV,SAAS,CAACkB,IAAf;AAAsB;AAClB,kBAAIb,eAAe,CAACW,CAAC,CAACK,CAAH,EAAML,CAAC,CAACO,CAAR,EAAWH,EAAX,EAAeE,EAAf,EAAmBZ,UAAnB,CAAnB,EAAkD;AAC9C,uBAAO,IAAP;AACH;;AAAC;AACL;AA3BL;AA8BH;AACJ,KAnCD;AAoCA,WAAO,KAAP;AACH;;AAzC2B","sourcesContent":["import { PieceType, TeamType, Piece } from \"../../constants\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove} from \"../../referee/pieceLogic\"\n\nexport default class Checker{\n    isMyKingInCheck(team : TeamType, boardState : Piece []) : boolean {\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n    const myKing = boardState.find(p => p.team === team && p.type === PieceType.KING) \n    boardState.forEach(p => {\n        if (myKing && p.team === enemyTeam) {\n            const dx = myKing.x - p.x\n            const dy = myKing.y - p.y\n            switch (p.type){\n                case PieceType.NIGHT : {\n                    if (isLegalNightMove(p.x, p.y, dx, dy, boardState)){\n                        return true;\n                    } break;\n                }\n                case PieceType.BISHOP : {\n                    console.log('im a bishop')\n                    if (isLegalBishopMove(p.x, p.y, dx, dy, boardState)){\n                        console.log('I think I can get your king')\n                        return true;\n                    } break;\n                }\n                case PieceType.ROOK : {\n                    if (isLegalRookMove(p.x, p.y, dx, dy, boardState)){\n                        return true;\n                    } break;\n                }\n                case PieceType.QUEEN : {\n                    if (isLegalQueenMove(p.x, p.y, dx, dy, boardState)){\n                        return true;\n                    } break;\n                }\n                case PieceType.KING : {\n                    if (isLegalKingMove(p.x, p.y, dx, dy, boardState)){\n                        return true;\n                    } break;\n                }\n            }\n\n        }\n    })\n    return false\n}\n}"]},"metadata":{},"sourceType":"module"}