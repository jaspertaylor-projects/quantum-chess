{"ast":null,"code":"/*\nThis function updates the Piece [] so that the piece moves to its new location. It\nalso handles the case where a piece is taken and when a ROOK is teleported via \nthe castling move.\n*/\nimport { PieceType, TeamType } from '../constants';\nimport SuperPiece from '../superPiece';\nimport Checker from './checker';\nexport let TAKEN_PIECE = null;\nexport function setTAKEN(piece) {\n  TAKEN_PIECE = piece;\n}\nexport function canExecuteMove(px, py, x, y, possiblePieces, activePlayer, boardState) {\n  const checker = new Checker(null);\n  fakeMove(px, py, x, y, possiblePieces, activePlayer, boardState);\n  const inCheck = checker.isMyKingInCheck(activePlayer, boardState);\n\n  if (inCheck) {\n    return false;\n  }\n\n  return true;\n}\nexport function executeMove(px, py, x, y, possiblePieces, activePlayer, boardState) {\n  const takenPiece = boardState.find(p => p.x === x && p.y === y && p.SuperPiece.team !== activePlayer);\n\n  if (takenPiece) {\n    TAKEN_PIECE = takenPiece;\n    takePiece(takenPiece, boardState);\n  } else {\n    TAKEN_PIECE = null;\n  }\n\n  const currentPiece = boardState.find(p => p.x === px && p.y === py);\n\n  if (currentPiece) {\n    const id = boardState.indexOf(currentPiece);\n    boardState[id] = {\n      SuperPiece: new SuperPiece(possiblePieces, activePlayer),\n      x,\n      y\n    };\n  }\n\n  promote(boardState);\n}\nexport function fakeMove(px, py, x, y, possiblePieces, activePlayer, boardState) {\n  const takenPiece = boardState.find(p => p.x === x && p.y === y && p.SuperPiece.team !== activePlayer);\n\n  if (takenPiece) {\n    takePiece(takenPiece, boardState);\n  }\n\n  const currentPiece = boardState.find(p => p.x === px && p.y === py);\n\n  if (currentPiece) {\n    const id = boardState.indexOf(currentPiece);\n    boardState[id] = {\n      SuperPiece: new SuperPiece(possiblePieces, activePlayer),\n      x,\n      y\n    };\n  }\n}\nexport function promote(boardState) {\n  const promoted_white = boardState.find(p => p.SuperPiece.team === TeamType.WHITE && p.y === 7 && p.SuperPiece.equals([PieceType.PAWN]));\n\n  if (promoted_white) {\n    promoted_white.promoted = true;\n  }\n\n  const promoted_black = boardState.find(p => p.SuperPiece.team === TeamType.BLACK && p.y === 0 && p.SuperPiece.equals([PieceType.PAWN]));\n\n  if (promoted_black) {\n    promoted_black.promoted = true;\n  }\n}\n\nfunction takePiece(p, boardState) {\n  const id = boardState.indexOf(p);\n  boardState.splice(id, 1);\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/QuantumChessV2/quantum-chess/src/Referee/executeMove.ts"],"names":["PieceType","TeamType","SuperPiece","Checker","TAKEN_PIECE","setTAKEN","piece","canExecuteMove","px","py","x","y","possiblePieces","activePlayer","boardState","checker","fakeMove","inCheck","isMyKingInCheck","executeMove","takenPiece","find","p","team","takePiece","currentPiece","id","indexOf","promote","promoted_white","WHITE","equals","PAWN","promoted","promoted_black","BLACK","splice"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAAgBA,SAAhB,EAA2BC,QAA3B,QAA2C,cAA3C;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,IAAIC,WAA0B,GAAG,IAAjC;AAGP,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAuC;AAC1CF,EAAAA,WAAW,GAAGE,KAAd;AACH;AAGD,OAAO,SAASC,cAAT,CAAyBC,EAAzB,EAAsCC,EAAtC,EAAmDC,CAAnD,EAA+DC,CAA/D,EAA0EC,cAA1E,EACyBC,YADzB,EACkDC,UADlD,EACkF;AACjF,QAAMC,OAAO,GAAG,IAAIZ,OAAJ,CAAY,IAAZ,CAAhB;AACAa,EAAAA,QAAQ,CAACR,EAAD,EAAKC,EAAL,EAASC,CAAT,EAAYC,CAAZ,EAAeC,cAAf,EAA+BC,YAA/B,EAA6CC,UAA7C,CAAR;AACA,QAAMG,OAAO,GAAGF,OAAO,CAACG,eAAR,CAAwBL,YAAxB,EAAsCC,UAAtC,CAAhB;;AACA,MAAIG,OAAJ,EAAY;AACR,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH;AAOL,OAAO,SAASE,WAAT,CAAsBX,EAAtB,EAAmCC,EAAnC,EAAgDC,CAAhD,EAA4DC,CAA5D,EACqBC,cADrB,EACoDC,YADpD,EAC6EC,UAD7E,EACoG;AACvG,QAAMM,UAAU,GAAGN,UAAU,CAACO,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACZ,CAAF,KAAQA,CAAR,IAAaY,CAAC,CAACX,CAAF,KAAQA,CAArB,IAA0BW,CAAC,CAACpB,UAAF,CAAaqB,IAAb,KAAsBV,YAArE,CAAnB;;AACA,MAAIO,UAAJ,EAAe;AACXhB,IAAAA,WAAW,GAAGgB,UAAd;AACAI,IAAAA,SAAS,CAACJ,UAAD,EAAaN,UAAb,CAAT;AACH,GAHD,MAGO;AACHV,IAAAA,WAAW,GAAG,IAAd;AACH;;AACD,QAAMqB,YAAY,GAAGX,UAAU,CAACO,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACZ,CAAF,KAAQF,EAAR,IAAcc,CAAC,CAACX,CAAF,KAAQF,EAA3C,CAArB;;AACA,MAAIgB,YAAJ,EAAiB;AACb,UAAMC,EAAE,GAAGZ,UAAU,CAACa,OAAX,CAAmBF,YAAnB,CAAX;AACAX,IAAAA,UAAU,CAACY,EAAD,CAAV,GAAiB;AAACxB,MAAAA,UAAU,EAAG,IAAIA,UAAJ,CAAeU,cAAf,EAA+BC,YAA/B,CAAd;AAA4DH,MAAAA,CAA5D;AAA+DC,MAAAA;AAA/D,KAAjB;AACH;;AACDiB,EAAAA,OAAO,CAACd,UAAD,CAAP;AACH;AAED,OAAO,SAASE,QAAT,CAAmBR,EAAnB,EAAgCC,EAAhC,EAA6CC,CAA7C,EAAyDC,CAAzD,EACHC,cADG,EAC4BC,YAD5B,EACqDC,UADrD,EAC4E;AAC/E,QAAMM,UAAU,GAAGN,UAAU,CAACO,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACZ,CAAF,KAAQA,CAAR,IAAaY,CAAC,CAACX,CAAF,KAAQA,CAArB,IAA0BW,CAAC,CAACpB,UAAF,CAAaqB,IAAb,KAAsBV,YAArE,CAAnB;;AACA,MAAIO,UAAJ,EAAe;AACXI,IAAAA,SAAS,CAACJ,UAAD,EAAaN,UAAb,CAAT;AACH;;AACD,QAAMW,YAAY,GAAGX,UAAU,CAACO,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACZ,CAAF,KAAQF,EAAR,IAAcc,CAAC,CAACX,CAAF,KAAQF,EAA3C,CAArB;;AACA,MAAIgB,YAAJ,EAAiB;AACb,UAAMC,EAAE,GAAGZ,UAAU,CAACa,OAAX,CAAmBF,YAAnB,CAAX;AACAX,IAAAA,UAAU,CAACY,EAAD,CAAV,GAAiB;AAACxB,MAAAA,UAAU,EAAG,IAAIA,UAAJ,CAAeU,cAAf,EAA+BC,YAA/B,CAAd;AAA4DH,MAAAA,CAA5D;AAA+DC,MAAAA;AAA/D,KAAjB;AACH;AACJ;AAID,OAAO,SAASiB,OAAT,CAAiBd,UAAjB,EAAuC;AAC1C,QAAMe,cAAc,GAAGf,UAAU,CAACO,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACpB,UAAF,CAAaqB,IAAb,KAAsBtB,QAAQ,CAAC6B,KAA/B,IAAwCR,CAAC,CAACX,CAAF,KAAQ,CAAhD,IACJW,CAAC,CAACpB,UAAF,CAAa6B,MAAb,CAAoB,CAAC/B,SAAS,CAACgC,IAAX,CAApB,CADjB,CAAvB;;AAEA,MAAGH,cAAH,EAAkB;AACVA,IAAAA,cAAc,CAACI,QAAf,GAA0B,IAA1B;AACP;;AACD,QAAMC,cAAc,GAAGpB,UAAU,CAACO,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACpB,UAAF,CAAaqB,IAAb,KAAsBtB,QAAQ,CAACkC,KAA/B,IAAwCb,CAAC,CAACX,CAAF,KAAQ,CAAhD,IACpBW,CAAC,CAACpB,UAAF,CAAa6B,MAAb,CAAoB,CAAC/B,SAAS,CAACgC,IAAX,CAApB,CADD,CAAvB;;AAEA,MAAGE,cAAH,EAAkB;AACdA,IAAAA,cAAc,CAACD,QAAf,GAA0B,IAA1B;AACH;AACJ;;AAED,SAAST,SAAT,CAAmBF,CAAnB,EAA8BR,UAA9B,EAAoD;AAChD,QAAMY,EAAE,GAAGZ,UAAU,CAACa,OAAX,CAAmBL,CAAnB,CAAX;AACAR,EAAAA,UAAU,CAACsB,MAAX,CAAkBV,EAAlB,EAAsB,CAAtB;AACH","sourcesContent":["/*\nThis function updates the Piece [] so that the piece moves to its new location. It\nalso handles the case where a piece is taken and when a ROOK is teleported via \nthe castling move.\n*/\n\nimport { Piece, PieceType, TeamType } from '../constants'\nimport SuperPiece from '../superPiece'\nimport Checker from './checker'\n\nexport let TAKEN_PIECE : Piece | null = null\n\n\nexport function setTAKEN(piece : Piece | null){\n    TAKEN_PIECE = piece\n}\n\n\nexport function canExecuteMove (px : number, py : number, x : number, y: number, possiblePieces : PieceType [], \n                                activePlayer : TeamType, boardState : Piece []) : boolean{\n        const checker = new Checker(null);\n        fakeMove(px, py, x, y, possiblePieces, activePlayer, boardState)\n        const inCheck = checker.isMyKingInCheck(activePlayer, boardState)\n        if (inCheck){\n            return false\n        }\n        return true                                \n    }\n\n\n\n\n\n\nexport function executeMove (px : number, py : number, x : number, y: number,\n                            possiblePieces : PieceType [], activePlayer : TeamType, boardState : Piece []) {\n    const takenPiece = boardState.find(p => p.x === x && p.y === y && p.SuperPiece.team !== activePlayer)\n    if (takenPiece){\n        TAKEN_PIECE = takenPiece\n        takePiece(takenPiece, boardState)\n    } else {\n        TAKEN_PIECE = null\n    }\n    const currentPiece = boardState.find(p => p.x === px && p.y === py) \n    if (currentPiece){\n        const id = boardState.indexOf(currentPiece)\n        boardState[id] = {SuperPiece : new SuperPiece(possiblePieces, activePlayer), x, y}    \n    }\n    promote(boardState)\n}\n\nexport function fakeMove (px : number, py : number, x : number, y: number,\n    possiblePieces : PieceType [], activePlayer : TeamType, boardState : Piece []) {\n    const takenPiece = boardState.find(p => p.x === x && p.y === y && p.SuperPiece.team !== activePlayer)\n    if (takenPiece){\n        takePiece(takenPiece, boardState)\n    } \n    const currentPiece = boardState.find(p => p.x === px && p.y === py) \n    if (currentPiece){\n        const id = boardState.indexOf(currentPiece)\n        boardState[id] = {SuperPiece : new SuperPiece(possiblePieces, activePlayer), x, y}    \n    }\n}\n\n\n\nexport function promote(boardState : Piece []){\n    const promoted_white = boardState.find(p => p.SuperPiece.team === TeamType.WHITE && p.y === 7 &&\n                                            p.SuperPiece.equals([PieceType.PAWN]))\n    if(promoted_white){\n            promoted_white.promoted = true\n    }\n    const promoted_black = boardState.find(p => p.SuperPiece.team === TeamType.BLACK && p.y === 0 &&\n                            p.SuperPiece.equals([PieceType.PAWN]))\n    if(promoted_black){\n        promoted_black.promoted = true\n    }\n}\n\nfunction takePiece(p : Piece, boardState : Piece []){\n    const id = boardState.indexOf(p)\n    boardState.splice(id, 1)\n}\n"]},"metadata":{},"sourceType":"module"}