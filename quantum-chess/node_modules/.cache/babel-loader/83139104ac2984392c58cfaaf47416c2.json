{"ast":null,"code":"export const HORIZONTAL_AXIS = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\nexport const VERTICAL_AXIS = [1, 2, 3, 4, 5, 6, 7, 8];\nexport const AXIS = [0, 1, 2, 3, 4, 5, 6, 7];\nexport const GRID_SIZE = 100;\nexport let TeamType;\n\n(function (TeamType) {\n  TeamType[TeamType[\"WHITE\"] = 0] = \"WHITE\";\n  TeamType[TeamType[\"BLACK\"] = 1] = \"BLACK\";\n})(TeamType || (TeamType = {}));\n\nexport let PieceType;\n\n(function (PieceType) {\n  PieceType[PieceType[\"PAWN\"] = 0] = \"PAWN\";\n  PieceType[PieceType[\"BISHOP\"] = 1] = \"BISHOP\";\n  PieceType[PieceType[\"NIGHT\"] = 2] = \"NIGHT\";\n  PieceType[PieceType[\"ROOK\"] = 3] = \"ROOK\";\n  PieceType[PieceType[\"QUEEN\"] = 4] = \"QUEEN\";\n  PieceType[PieceType[\"KING\"] = 5] = \"KING\";\n})(PieceType || (PieceType = {}));\n\nexport function initializeBoardState() {\n  const state = [];\n\n  for (let p = 0; p < 2; p++) {\n    const dir = p === 0 ? 'white_pieces' : 'black_pieces';\n    const team = p === 0 ? TeamType.BLACK : TeamType.WHITE; // Pawns\n\n    for (let i = 0; i < AXIS.length; i++) {\n      state.push({\n        image: `assets/${dir}/kqrbnp.png`,\n        x: i,\n        y: 0 + 6 * p,\n        team,\n        type: PieceType.PAWN,\n        enPassantable: false\n      });\n      state.push({\n        image: `assets/${dir}/kqrbnp.png`,\n        x: i,\n        y: 1 + 6 * p,\n        team,\n        type: PieceType.PAWN,\n        enPassantable: false\n      });\n    }\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/QuantumChess/quantum-chess/src/constants.ts"],"names":["HORIZONTAL_AXIS","VERTICAL_AXIS","AXIS","GRID_SIZE","TeamType","PieceType","initializeBoardState","state","p","dir","team","BLACK","WHITE","i","length","push","image","x","y","type","PAWN","enPassantable"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAAiC,GAAjC,EAAsC,GAAtC,CAAxB;AACP,OAAO,MAAMC,aAAa,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,CAAtB;AACP,OAAO,MAAMC,IAAI,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,CAAb;AACP,OAAO,MAAMC,SAAS,GAAG,GAAlB;AAeP,WAAYC,QAAZ;;WAAYA,Q;AAAAA,EAAAA,Q,CAAAA,Q;AAAAA,EAAAA,Q,CAAAA,Q;GAAAA,Q,KAAAA,Q;;AAKZ,WAAYC,SAAZ;;WAAYA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S;;AASZ,OAAO,SAASC,oBAAT,GAA0C;AAC7C,QAAMC,KAAe,GAAG,EAAxB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,UAAMC,GAAG,GAAGD,CAAC,KAAK,CAAN,GAAU,cAAV,GAA0B,cAAtC;AACA,UAAME,IAAI,GAAGF,CAAC,KAAK,CAAN,GAAUJ,QAAQ,CAACO,KAAnB,GAA2BP,QAAQ,CAACQ,KAAjD,CAFwB,CAGxB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,IAAI,CAACY,MAAzB,EAAiCD,CAAC,EAAlC,EAAqC;AACjCN,MAAAA,KAAK,CAACQ,IAAN,CAAW;AAACC,QAAAA,KAAK,EAAI,UAASP,GAAI,aAAvB;AAAqCQ,QAAAA,CAAC,EAAGJ,CAAzC;AAA4CK,QAAAA,CAAC,EAAG,IAAI,IAAIV,CAAxD;AAA2DE,QAAAA,IAA3D;AAAkES,QAAAA,IAAI,EAAGd,SAAS,CAACe,IAAnF;AAAyFC,QAAAA,aAAa,EAAG;AAAzG,OAAX;AACAd,MAAAA,KAAK,CAACQ,IAAN,CAAW;AAACC,QAAAA,KAAK,EAAI,UAASP,GAAI,aAAvB;AAAqCQ,QAAAA,CAAC,EAAGJ,CAAzC;AAA4CK,QAAAA,CAAC,EAAG,IAAI,IAAIV,CAAxD;AAA2DE,QAAAA,IAA3D;AAAkES,QAAAA,IAAI,EAAGd,SAAS,CAACe,IAAnF;AAAyFC,QAAAA,aAAa,EAAG;AAAzG,OAAX;AACH;AACJ;;AACD,SAAOd,KAAP;AACH","sourcesContent":["export const HORIZONTAL_AXIS = ['a', 'b', 'c', 'd', 'e', 'f',   'g', 'h'];\nexport const VERTICAL_AXIS = [1,2,3,4,5,6,7,8];\nexport const AXIS = [0,1,2,3,4,5,6,7];\nexport const GRID_SIZE = 100\n\nexport interface Piece {\n    image: string;\n    x : number; \n    y : number; \n    type : PieceType;\n    team : TeamType;\n    enPassantable? : boolean;\n    taken? : boolean;\n    teleported? : boolean;\n    canCastle? : boolean;\n    promoted? : boolean;\n}\n\nexport enum TeamType{\n    WHITE,\n    BLACK\n}\n\nexport enum PieceType {\n    PAWN,\n    BISHOP, \n    NIGHT, \n    ROOK,\n    QUEEN,\n    KING,\n}\n\nexport function initializeBoardState() : Piece []{\n    const state : Piece[] = []\n    for (let p = 0; p < 2; p ++){\n        const dir = p === 0 ? 'white_pieces': 'black_pieces';\n        const team = p === 0 ? TeamType.BLACK : TeamType.WHITE;\n        // Pawns\n        for (let i = 0; i < AXIS.length; i++){\n            state.push({image : `assets/${dir}/kqrbnp.png`, x : i, y : 0 + 6 * p, team , type : PieceType.PAWN, enPassantable : false})\n            state.push({image : `assets/${dir}/kqrbnp.png`, x : i, y : 1 + 6 * p, team , type : PieceType.PAWN, enPassantable : false})\n        }\n    }\n    return state\n}\n"]},"metadata":{},"sourceType":"module"}