{"ast":null,"code":"import { PieceType, TeamType, VERTICAL_AXIS, HORIZONTAL_AXIS } from \"../constants\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove } from \"./pieceLogic\";\nimport { isPawnNormalMove } from \"./pawnLogic\";\nimport Referee from \"./Referee\";\nexport default class Checker {\n  constructor(boardState) {\n    this.oldBoardState = void 0;\n    this.oldBoardState = boardState;\n  }\n\n  deepCopy(boardState) {\n    for (let i = 0; i < this.oldBoardState.length; i++) {\n      boardState[i] = this.oldBoardState[i];\n    }\n  }\n\n  isMyKingInCheck(team, boardState, increment) {\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    const myKing = boardState.find(p => p.team === team && p.type === PieceType.KING);\n\n    for (let i = 0; i < boardState.length; i++) {\n      const p = boardState[i];\n\n      if (myKing && p.team === enemyTeam) {\n        const dx = myKing.x + increment - p.x;\n        const dy = myKing.y - p.y;\n\n        switch (p.type) {\n          case PieceType.PAWN:\n            {\n              if (isPawnNormalMove(p.x, p.y, myKing.x + increment, myKing.y, p.team, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.NIGHT:\n            {\n              if (isLegalNightMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.BISHOP:\n            {\n              if (isLegalBishopMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.ROOK:\n            {\n              if (isLegalRookMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.QUEEN:\n            {\n              if (isLegalQueenMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.KING:\n            {\n              if (isLegalKingMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isCheckMate(team, boardState) {\n    const ref = new Referee();\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    const copy = this.deepCopy(boardState);\n\n    for (let j = VERTICAL_AXIS.length - 1; j >= 0; j--) {\n      for (let i = 0; i < HORIZONTAL_AXIS.length; i++) {\n        for (let k = 0; k < boardState.length; k++) {\n          const p = boardState[k];\n          const legalMove = ref.isValidMove(p.x, p.y, i, j, p.type, enemyTeam, boardState, enemyTeam);\n          this.deepCopy(boardState);\n\n          if (legalMove && p.team === enemyTeam) {\n            console.log('made it here');\n            console.log(p.type, p.team, HORIZONTAL_AXIS[i], VERTICAL_AXIS[j]);\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/boardChecks.ts"],"names":["PieceType","TeamType","VERTICAL_AXIS","HORIZONTAL_AXIS","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","isPawnNormalMove","Referee","Checker","constructor","boardState","oldBoardState","deepCopy","i","length","isMyKingInCheck","team","increment","enemyTeam","WHITE","BLACK","myKing","find","p","type","KING","dx","x","dy","y","PAWN","NIGHT","BISHOP","ROOK","QUEEN","isCheckMate","ref","copy","j","k","legalMove","isValidMove","console","log"],"mappings":"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","sourcesContent":["import { PieceType, TeamType, Piece, VERTICAL_AXIS, HORIZONTAL_AXIS } from \"../constants\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove} from \"./pieceLogic\"\nimport { isPawnNormalMove } from \"./pawnLogic\"\nimport Referee from \"./Referee\"\n\nexport default class Checker {   \n    oldBoardState : Piece [];\n\n    constructor (boardState: Piece []){\n        this.oldBoardState = boardState\n    }\n\n\n    deepCopy(boardState : Piece []) {\n        for (let i = 0; i < this.oldBoardState.length; i ++){\n            boardState[i] = this.oldBoardState[i]\n        }\n    } \n\n    isMyKingInCheck(team : TeamType, boardState : Piece [], increment : number) : boolean {\n        const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        const myKing = boardState.find(p => p.team === team && p.type === PieceType.KING) \n        for (let i = 0; i < boardState.length; i++){\n            const p = boardState[i];\n            if (myKing && p.team === enemyTeam) {\n                const dx = myKing.x + increment - p.x\n                const dy = myKing.y - p.y\n                switch (p.type){\n                    case PieceType.PAWN : {\n                        if (isPawnNormalMove(p.x, p.y, myKing.x + increment, myKing.y, p.team, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.NIGHT : {\n                        if (isLegalNightMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.BISHOP : {\n                        if (isLegalBishopMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.ROOK : {\n                        if (isLegalRookMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.QUEEN : {\n                        if (isLegalQueenMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.KING : {\n                        if (isLegalKingMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                }\n\n            }\n        }\n        return false\n    }\n\n    isCheckMate(team : TeamType, boardState : Piece []): boolean{\n        const ref = new Referee()\n        const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        const copy = this.deepCopy(boardState)\n        for (let j = VERTICAL_AXIS.length - 1; j >= 0; j-- ){\n            for (let i = 0; i < HORIZONTAL_AXIS.length; i++ ) {\n                for (let k = 0; k < boardState.length; k ++ ){\n                    const p = boardState[k]                    \n                    const legalMove = ref.isValidMove(p.x, p.y, i, j, p.type, enemyTeam, boardState, enemyTeam)\n                    this.deepCopy(boardState)\n                    if (legalMove && p.team === enemyTeam){\n                        console.log('made it here')\n                        console.log(p.type, p.team, HORIZONTAL_AXIS[i], VERTICAL_AXIS[j])\n                        return false                       \n                    } \n                }\n            \n            }\n        }        \n        return true\n\n    }\n\n}"]},"metadata":{},"sourceType":"module"}