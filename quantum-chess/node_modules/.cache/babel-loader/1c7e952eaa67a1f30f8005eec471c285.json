{"ast":null,"code":"import { PieceType, TeamType } from \"../components/chessboard/chessboard\";\nexport default class Referee {\n  pawnIsBlockaded(x, y, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y);\n    const occupied = piece ? true : false;\n    return occupied;\n  }\n\n  isOpposingPiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y);\n    const occupied = piece && piece.team !== team ? true : false;\n    return occupied;\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState) {\n    console.log(\"Ref checking the move .... \"); //PAWN LOGIC \n    //May want to put each piece in different function\n\n    if (type === PieceType.PAWN) {\n      const startingRow = team === TeamType.WHITE ? 1 : 6;\n      const increment = team === TeamType.WHITE ? 1 : -1; // Moving Logic\n\n      if (py === startingRow && px === x && py === y - 2 * increment) {\n        if (!this.pawnIsBlockaded(x, y, boardState) && !this.pawnIsBlockaded(x, y - increment, boardState)) {\n          return true;\n        }\n      }\n\n      if (py === y - increment && px === x) {\n        if (!this.pawnIsBlockaded(x, y, boardState)) {\n          return true;\n        }\n      } // ATTACK LOGIC\n\n\n      if ((x === px + 1 || x === px - 1) && py === y - increment && this.isOpposingPiece(x, y, team, boardState)) {\n        return true;\n      }\n    } // NIGHT LOGIC \n\n\n    if (type === PieceType.NIGHT) {}\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","TeamType","Referee","pawnIsBlockaded","x","y","boardState","piece","find","p","occupied","isOpposingPiece","team","isValidMove","px","py","type","console","log","PAWN","startingRow","WHITE","increment","NIGHT"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAA2C,qCAA3C;AAEA,eAAe,MAAMC,OAAN,CAAa;AACxBC,EAAAA,eAAe,CAACC,CAAD,EAAaC,CAAb,EAAwBC,UAAxB,EAAwD;AACnE,UAAMC,KAAK,GAAGD,UAAU,CAACE,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACL,CAAF,KAAQA,CAAR,IAAaK,CAAC,CAACJ,CAAF,KAAQA,CAA1C,CAAd;AACA,UAAMK,QAAQ,GAAIH,KAAK,GAAG,IAAH,GAAU,KAAjC;AACA,WAAOG,QAAP;AACH;;AAEDC,EAAAA,eAAe,CAACP,CAAD,EAAaC,CAAb,EAAwBO,IAAxB,EAAyCN,UAAzC,EAAyE;AACpF,UAAMC,KAAK,GAAGD,UAAU,CAACE,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACL,CAAF,KAAQA,CAAR,IAAaK,CAAC,CAACJ,CAAF,KAAQA,CAA1C,CAAd;AACA,UAAMK,QAAQ,GAAIH,KAAK,IAAIA,KAAK,CAACK,IAAN,KAAeA,IAAxB,GAA+B,IAA/B,GAAsC,KAAxD;AACA,WAAOF,QAAP;AACH;;AACDG,EAAAA,WAAW,CAACC,EAAD,EAAcC,EAAd,EAA2BX,CAA3B,EAAuCC,CAAvC,EAAmDW,IAAnD,EAAqEJ,IAArE,EAAsFN,UAAtF,EAA4G;AACnHW,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EADmH,CAEnH;AACA;;AACA,QAAIF,IAAI,KAAKhB,SAAS,CAACmB,IAAvB,EAA4B;AACxB,YAAMC,WAAW,GAAGR,IAAI,KAAKX,QAAQ,CAACoB,KAAlB,GAA0B,CAA1B,GAA8B,CAAlD;AACA,YAAMC,SAAS,GAAGV,IAAI,KAAKX,QAAQ,CAACoB,KAAlB,GAA0B,CAA1B,GAA8B,CAAE,CAAlD,CAFwB,CAGxB;;AACA,UAAKN,EAAE,KAAKK,WAAP,IAAsBN,EAAE,KAAKV,CAA9B,IAAqCW,EAAE,KAAKV,CAAC,GAAG,IAAIiB,SAAxD,EAAmE;AAC/D,YAAI,CAAC,KAAKnB,eAAL,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2BC,UAA3B,CAAD,IAA2C,CAAC,KAAKH,eAAL,CAAqBC,CAArB,EAAwBC,CAAC,GAAGiB,SAA5B,EAAuChB,UAAvC,CAAhD,EAAmG;AAC/F,iBAAO,IAAP;AACH;AACJ;;AACD,UAAIS,EAAE,KAAKV,CAAC,GAAGiB,SAAX,IAAwBR,EAAE,KAAKV,CAAnC,EAAqC;AACjC,YAAI,CAAC,KAAKD,eAAL,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2BC,UAA3B,CAAL,EAA4C;AACxC,iBAAO,IAAP;AACH;AACJ,OAbuB,CAcxB;;;AACA,UAAI,CAACF,CAAC,KAAKU,EAAE,GAAG,CAAX,IAAgBV,CAAC,KAAKU,EAAE,GAAE,CAA3B,KAAkCC,EAAE,KAAKV,CAAC,GAAGiB,SAA7C,IAA2D,KAAKX,eAAL,CAAqBP,CAArB,EAAwBC,CAAxB,EAA2BO,IAA3B,EAAiCN,UAAjC,CAA/D,EAA6G;AACzG,eAAO,IAAP;AACH;AACJ,KAtBkH,CAuBnH;;;AACA,QAAIU,IAAI,KAAKhB,SAAS,CAACuB,KAAvB,EAA6B,CAE5B;;AAED,WAAO,KAAP;AACH;;AAzCuB","sourcesContent":["import { PieceType, TeamType, Piece } from \"../components/chessboard/chessboard\"\n\nexport default class Referee{\n    pawnIsBlockaded(x : number, y: number, boardState : Piece []): boolean {\n        const piece = boardState.find(p => p.x === x && p.y === y) \n        const occupied =  piece ? true : false\n        return occupied\n    }\n    \n    isOpposingPiece(x : number, y: number, team : TeamType, boardState : Piece []): boolean {\n        const piece = boardState.find(p => p.x === x && p.y === y)\n        const occupied =  piece && piece.team !== team ? true : false\n        return occupied\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, team : TeamType, boardState : Piece []){\n        console.log(\"Ref checking the move .... \")\n        //PAWN LOGIC \n        //May want to put each piece in different function\n        if (type === PieceType.PAWN){\n            const startingRow = team === TeamType.WHITE ? 1 : 6\n            const increment = team === TeamType.WHITE ? 1 : - 1\n            // Moving Logic\n            if ((py === startingRow && px === x) && (py === y - 2 * increment)){\n                if (!this.pawnIsBlockaded(x, y, boardState) && !this.pawnIsBlockaded(x, y - increment, boardState)){\n                    return true\n                }\n            } \n            if (py === y - increment && px === x){\n                if (!this.pawnIsBlockaded(x, y, boardState)){\n                    return true;\n                }\n            } \n            // ATTACK LOGIC\n            if ((x === px + 1 || x === px -1) && (py === y - increment) && this.isOpposingPiece(x, y, team, boardState)) {\n                return true\n            }\n        }\n        // NIGHT LOGIC \n        if (type === PieceType.NIGHT){\n            \n        }\n\n        return false\n    }\n}"]},"metadata":{},"sourceType":"module"}