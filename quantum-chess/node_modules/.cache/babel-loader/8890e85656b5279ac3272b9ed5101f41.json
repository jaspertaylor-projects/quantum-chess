{"ast":null,"code":"import { PieceType, TeamType, VERTICAL_AXIS, HORIZONTAL_AXIS } from \"../constants\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove } from \"./pieceLogic\";\nimport { isPawnNormalMove } from \"./pawnLogic\";\nimport Referee from \"./Referee\";\nexport default class Checker {\n  deepCopy(boardState) {\n    const oldBoardState = [];\n    boardState.forEach(p => oldBoardState.push({\n      image: p.image,\n      x: p.x,\n      y: p.y,\n      team: p.team,\n      type: p.type,\n      enPassantable: p.enPassantable,\n      canCastle: p.canCastle,\n      promoted: p.promoted\n    }));\n    return oldBoardState;\n  }\n\n  isMyKingInCheck(team, boardState, increment) {\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    const myKing = boardState.find(p => p.team === team && p.type === PieceType.KING);\n\n    for (let i = 0; i < boardState.length; i++) {\n      const p = boardState[i];\n\n      if (myKing && p.team === enemyTeam) {\n        const dx = myKing.x + increment - p.x;\n        const dy = myKing.y - p.y;\n\n        switch (p.type) {\n          case PieceType.PAWN:\n            {\n              if (isPawnNormalMove(p.x, p.y, myKing.x + increment, myKing.y, p.team, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.NIGHT:\n            {\n              if (isLegalNightMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.BISHOP:\n            {\n              if (isLegalBishopMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.ROOK:\n            {\n              if (isLegalRookMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.QUEEN:\n            {\n              if (isLegalQueenMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n\n          case PieceType.KING:\n            {\n              if (isLegalKingMove(p.x, p.y, dx, dy, boardState)) {\n                return true;\n              }\n\n              break;\n            }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isCheckMate(team, boardState) {\n    const ref = new Referee();\n    const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    const copy = this.deepCopy(boardState);\n\n    for (let j = VERTICAL_AXIS.length - 1; j >= 0; j--) {\n      for (let i = 0; i < HORIZONTAL_AXIS.length; i++) {\n        for (let k = 0; k < boardState.length; k++) {\n          const p = boardState[k];\n          const legalMove = ref.isValidMove(p.x, p.y, i, j, p.type, enemyTeam, boardState, p.team);\n          boardState = copy;\n\n          if (legalMove && p.team === team) {\n            console.log('made it here');\n            console.log(p.type, p.team, p.x, p.y, i, j);\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/boardChecks.ts"],"names":["PieceType","TeamType","VERTICAL_AXIS","HORIZONTAL_AXIS","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","isPawnNormalMove","Referee","Checker","deepCopy","boardState","oldBoardState","forEach","p","push","image","x","y","team","type","enPassantable","canCastle","promoted","isMyKingInCheck","increment","enemyTeam","WHITE","BLACK","myKing","find","KING","i","length","dx","dy","PAWN","NIGHT","BISHOP","ROOK","QUEEN","isCheckMate","ref","copy","j","k","legalMove","isValidMove","console","log"],"mappings":"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","sourcesContent":["import { PieceType, TeamType, Piece, VERTICAL_AXIS, HORIZONTAL_AXIS } from \"../constants\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove} from \"./pieceLogic\"\nimport { isPawnNormalMove } from \"./pawnLogic\"\nimport Referee from \"./Referee\"\n\nexport default class Checker{   \n    deepCopy(boardState : Piece []) : Piece [] {\n        const oldBoardState : Piece[] = [];\n        boardState.forEach(p => oldBoardState.push({image : p.image, x : p.x,  y : p.y,\n                                                team : p.team, type : p.type, \n                                                enPassantable : p.enPassantable,\n                                                canCastle: p.canCastle,\n                                                promoted: p.promoted}))\n        return oldBoardState\n    } \n\n    isMyKingInCheck(team : TeamType, boardState : Piece [], increment : number) : boolean {\n        const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        const myKing = boardState.find(p => p.team === team && p.type === PieceType.KING) \n        for (let i = 0; i < boardState.length; i++){\n            const p = boardState[i];\n            if (myKing && p.team === enemyTeam) {\n                const dx = myKing.x + increment - p.x\n                const dy = myKing.y - p.y\n                switch (p.type){\n                    case PieceType.PAWN : {\n                        if (isPawnNormalMove(p.x, p.y, myKing.x + increment, myKing.y, p.team, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.NIGHT : {\n                        if (isLegalNightMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.BISHOP : {\n                        if (isLegalBishopMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.ROOK : {\n                        if (isLegalRookMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.QUEEN : {\n                        if (isLegalQueenMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                    case PieceType.KING : {\n                        if (isLegalKingMove(p.x, p.y, dx, dy, boardState)){\n                            return true;\n                        } break;\n                    }\n                }\n\n            }\n        }\n        return false\n    }\n\n    isCheckMate(team : TeamType, boardState : Piece []): boolean{\n        const ref = new Referee()\n        const enemyTeam = team === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        const copy = this.deepCopy(boardState)\n        for (let j = VERTICAL_AXIS.length - 1; j >= 0; j-- ){\n            for (let i = 0; i < HORIZONTAL_AXIS.length; i++ ) {\n                for (let k = 0; k < boardState.length; k ++ ){\n                    const p = boardState[k]                    \n                    const legalMove = ref.isValidMove(p.x, p.y, i, j, p.type, enemyTeam, boardState, p.team)\n                    boardState = copy \n                    if (legalMove && p.team === team){\n                        console.log('made it here')\n                        console.log(p.type, p.team, p.x, p.y, i, j)\n                        return false                       \n                    } \n                }\n            \n            }\n        }        \n        return true\n\n    }\n\n}"]},"metadata":{},"sourceType":"module"}