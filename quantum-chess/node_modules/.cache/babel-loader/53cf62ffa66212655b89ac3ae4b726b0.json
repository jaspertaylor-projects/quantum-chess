{"ast":null,"code":"var _jsxFileName = \"/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/chessboard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport Tile from '../Tile/Tile';\nimport './chessboard.css';\nimport Referee from '../../referee/Referee';\nimport { VERTICAL_AXIS, HORIZONTAL_AXIS, GRID_SIZE, TeamType, initialBoardState } from '../../constants';\nimport Checker from '../../referee/boardChecks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard() {\n  _s();\n\n  const [activePiece, setActivePiece] = useState(null);\n  const [gridX, setGridX] = useState(0);\n  const [gridY, setGridY] = useState(0);\n  const [pieces, setPieces] = useState(initialBoardState);\n  const [activePlayer, setActivePlayer] = useState(TeamType.WHITE);\n  const chessboardRef = useRef(null);\n  const referee = new Referee();\n  const checker = new Checker();\n  let board = [];\n\n  function switchPlayer() {\n    const nextPlayer = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE;\n    setActivePlayer(nextPlayer);\n  }\n\n  function deepCopy() {\n    const oldBoardState = [];\n    pieces.forEach(p => oldBoardState.push({\n      image: p.image,\n      x: p.x,\n      y: p.y,\n      team: p.team,\n      type: p.type,\n      enPassantable: p.enPassantable,\n      canCastle: p.canCastle\n    }));\n    return oldBoardState;\n  }\n\n  function revert() {\n    if (activePiece) {\n      activePiece.style.position = 'relative';\n      activePiece.style.removeProperty('left');\n      activePiece.style.removeProperty('top');\n    }\n  }\n\n  function takePiece(p) {\n    const id2 = pieces.indexOf(p);\n    pieces.splice(id2, 1);\n  }\n\n  function teleportPiece(p) {\n    let tele = 0;\n\n    if (p.x === 7) {\n      tele = -2;\n    } else {\n      tele = 3;\n    }\n\n    p.x = p.x + tele;\n    p.teleported = false;\n  }\n\n  function grabPiece(e) {\n    const chessboard = chessboardRef.current;\n    const element = e.target;\n\n    if (element.classList.contains('chess-piece') && chessboard) {\n      setGridX(Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE));\n      setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE) / GRID_SIZE)));\n      const x = e.clientX - GRID_SIZE / 2;\n      const y = e.clientY - GRID_SIZE / 2;\n      element.style.position = 'absolute';\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n\n  function movePiece(e) {\n    const chessboard = chessboardRef.current;\n\n    if (activePiece && chessboard) {\n      const x = e.clientX - GRID_SIZE / 2;\n      const y = e.clientY - GRID_SIZE / 2;\n      activePiece.style.position = 'absolute';\n      activePiece.style.left = `${x}px`;\n      activePiece.style.top = `${y}px`;\n    }\n  }\n\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE) / GRID_SIZE));\n      const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY);\n\n      if (currentPiece) {\n        const oldBoardState = deepCopy();\n        const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces, activePlayer);\n\n        if (validMove) {\n          board.push( /*#__PURE__*/_jsxDEV(\"piecePicker\", {\n            trigger: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 32\n          }, this));\n          const takenPiece = pieces.find(p => p.taken === true);\n\n          if (takenPiece) {\n            takePiece(takenPiece);\n          }\n\n          const teleportedPiece = pieces.find(p => p.teleported === true);\n\n          if (teleportedPiece) {\n            teleportPiece(teleportedPiece);\n          }\n\n          const id1 = pieces.indexOf(currentPiece);\n          currentPiece.x = x;\n          currentPiece.y = y;\n          pieces[id1] = currentPiece;\n\n          if (checker.isMyKingInCheck(currentPiece.team, pieces, 0)) {\n            setPieces(oldBoardState);\n            revert();\n          } else {\n            setPieces(pieces);\n            switchPlayer();\n          }\n        } else {\n          revert();\n        }\n      }\n    }\n\n    setActivePiece(null);\n  }\n\n  for (let j = VERTICAL_AXIS.length - 1; j >= 0; j--) {\n    for (let i = 0; i < HORIZONTAL_AXIS.length; i++) {\n      const number = i + j;\n      const piece = pieces.find(p => p.x === i && p.y === j);\n      let image = piece ? piece.image : undefined;\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: image,\n        number: number\n      }, `${i}, ${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 24\n      }, this));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chessboardRef,\n    onMouseUp: e => dropPiece(e),\n    onMouseMove: e => movePiece(e),\n    onMouseDown: e => grabPiece(e),\n    id: \"chessboard\",\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Chessboard, \"kdrAI8vopvD3bdD47ggtMzHSoI8=\");\n\n_c = Chessboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/components/chessboard/chessboard.tsx"],"names":["React","useRef","useState","Tile","Referee","VERTICAL_AXIS","HORIZONTAL_AXIS","GRID_SIZE","TeamType","initialBoardState","Checker","Chessboard","activePiece","setActivePiece","gridX","setGridX","gridY","setGridY","pieces","setPieces","activePlayer","setActivePlayer","WHITE","chessboardRef","referee","checker","board","switchPlayer","nextPlayer","BLACK","deepCopy","oldBoardState","forEach","p","push","image","x","y","team","type","enPassantable","canCastle","revert","style","position","removeProperty","takePiece","id2","indexOf","splice","teleportPiece","tele","teleported","grabPiece","e","chessboard","current","element","target","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","left","top","movePiece","dropPiece","currentPiece","find","validMove","isValidMove","takenPiece","taken","teleportedPiece","id1","isMyKingInCheck","j","length","i","number","piece","undefined"],"mappings":"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","sourcesContent":["import React, {useRef, useState } from 'react';\nimport Tile from '../Tile/Tile';\nimport './chessboard.css';\nimport Referee from '../../referee/Referee'\nimport {VERTICAL_AXIS, HORIZONTAL_AXIS, GRID_SIZE, Piece, TeamType, initialBoardState} from '../../constants'\nimport Checker from '../../referee/boardChecks'\nimport piecePicker from '../popUp/piecePicker';\n\nexport default function Chessboard(){\n    const [activePiece, setActivePiece] = useState<HTMLElement | null>(null) \n    const [gridX, setGridX] = useState(0);\n    const [gridY, setGridY] = useState(0);\n    const [pieces, setPieces]  = useState<Piece[]>(initialBoardState);\n    const [activePlayer, setActivePlayer] = useState<TeamType>(TeamType.WHITE);\n    const chessboardRef = useRef<HTMLDivElement>(null);\n    const referee = new Referee();\n    const checker = new Checker();\n    let board = [];\n\n\n    function switchPlayer(){\n        const nextPlayer = activePlayer === TeamType.WHITE ? TeamType.BLACK : TeamType.WHITE\n        setActivePlayer(nextPlayer) \n    }\n    function deepCopy() : Piece [] {\n        const oldBoardState : Piece[] = [];\n        pieces.forEach(p => oldBoardState.push({image : p.image, x : p.x,  y : p.y,\n                                                team : p.team, type : p.type, \n                                                enPassantable : p.enPassantable,\n                                                canCastle: p.canCastle}))\n        return oldBoardState\n    }\n\n    function revert(){\n        if (activePiece){\n            activePiece.style.position = 'relative';\n            activePiece.style.removeProperty('left');\n            activePiece.style.removeProperty('top');\n        }\n    }\n\n    function takePiece(p : Piece){\n        const id2 = pieces.indexOf(p)\n        pieces.splice(id2, 1)\n    }\n    function teleportPiece(p : Piece){\n        let tele = 0;\n        if (p.x === 7){  \n            tele = -2\n        } else {\n            tele = 3\n        }\n        p.x = p.x + tele\n        p.teleported = false\n    }\n\n    function grabPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        const element = e.target as HTMLElement\n        if (element.classList.contains('chess-piece') && chessboard){\n            setGridX(Math.floor((e.clientX - chessboard.offsetLeft)/GRID_SIZE));\n            setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE)/GRID_SIZE)));\n            const x = e.clientX - GRID_SIZE/2;\n            const y = e.clientY - GRID_SIZE/2;\n            element.style.position = 'absolute'; \n            element.style.left = `${x}px`;\n            element.style.top = `${y}px`;\n            setActivePiece(element)    \n        }\n    \n    }\n    \n    function movePiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current\n        if (activePiece && chessboard){\n            const x = e.clientX - GRID_SIZE/2;\n            const y = e.clientY - GRID_SIZE/2;\n            activePiece.style.position = 'absolute'; \n            activePiece.style.left = `${x}px`;\n            activePiece.style.top = `${y}px`;\n        }\n    }\n    \n    function dropPiece(e: React.MouseEvent){\n        const chessboard = chessboardRef.current;\n        if (activePiece && chessboard){\n            const x = Math.floor((e.clientX - chessboard.offsetLeft)/GRID_SIZE);\n            const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 8 * GRID_SIZE)/GRID_SIZE))\n            const currentPiece = pieces.find(p => p.x === gridX && p.y === gridY)\n            if (currentPiece){\n                const oldBoardState = deepCopy()\n                const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces, activePlayer);                \n                if (validMove){                  \n                    board.push(<piecePicker trigger = {true}/>)\n                    const takenPiece = pieces.find(p => p.taken === true)\n                    if (takenPiece){\n                        takePiece(takenPiece)\n                    }\n                    const teleportedPiece = pieces.find(p => p.teleported === true)\n                    if (teleportedPiece){\n                        teleportPiece(teleportedPiece)\n                    }\n                    const id1 = pieces.indexOf(currentPiece)\n                    currentPiece.x = x\n                    currentPiece.y = y\n                    pieces[id1] = currentPiece\n                    if (checker.isMyKingInCheck(currentPiece.team, pieces, 0)){\n                        setPieces(oldBoardState)\n                        revert()\n                    } else {\n                        setPieces(pieces)\n                        switchPlayer()\n                    }\n                } else {\n                revert()\n                }\n            }\n        }\n        setActivePiece(null);\n    }\n\n    for (let j = VERTICAL_AXIS.length - 1; j >= 0; j-- ){\n        for (let i = 0; i < HORIZONTAL_AXIS.length; i++ ) {\n            const number = i + j;\n            const piece = pieces.find(p => p.x === i && p.y === j) \n            let image = piece ? piece.image : undefined\n            board.push(<Tile key = {`${i}, ${j}`} image = {image} number = {number}/>);\n        }\n    }\n    return <div \n    ref = {chessboardRef} \n    onMouseUp = {e => dropPiece(e)} \n    onMouseMove = {e => movePiece(e)} \n    onMouseDown = {e => grabPiece(e)} \n    id = 'chessboard'>{board}</div>;\n}"]},"metadata":{},"sourceType":"module"}