{"ast":null,"code":"import { PieceType, GameState } from \"../constants\";\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\";\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove } from \"./pieceLogic\";\nexport default class Referee {\n  takePiece(x, y, team, boardState) {\n    const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team);\n\n    if (piece) {\n      piece.taken = true;\n    }\n  }\n\n  endMove(x, y, team, boardState, valid) {\n    if (!isFriendlyPiece(x, y, team, boardState)) {\n      this.takePiece(x, y, team, boardState);\n      unsetEnPassant(boardState);\n      valid.value = true;\n    }\n  }\n\n  isValidMove(px, py, x, y, type, team, boardState, activePlayer, gameState) {\n    // Only the active player can move\n    if (team !== activePlayer) {\n      return [false, GameState.NO_CHANGE];\n    } // A non-move is not a move\n\n\n    if (px === x && py === y) {\n      return [false, GameState.NO_CHANGE];\n    } // A move off the board is not a move\n\n\n    if (x < 0 || y < 0 || x > 7 || y > 7) {\n      return [false, GameState.NO_CHANGE];\n    }\n\n    var valid = {\n      value: false\n    };\n    const dx = x - px;\n    const dy = y - py;\n\n    switch (type) {\n      case PieceType.PAWN:\n        {\n          if (isPawnStartingMove(px, py, x, y, team, boardState)) {\n            setEnPassant(px, py, boardState);\n            return [true, GameState.NO_CHANGE];\n          }\n\n          if (isPawnNormalMove(px, py, x, y, team, boardState)) {\n            this.endMove(x, y, team, boardState, valid);\n            break;\n          }\n\n          if (isEnPassant(px, py, x, y, team, boardState)) {\n            this.endMove(x, py, team, boardState, valid);\n            break;\n          }\n\n          break;\n        }\n\n      case PieceType.NIGHT:\n        {\n          if (isLegalNightMove(px, py, dx, dy, boardState)) {\n            this.endMove(x, y, team, boardState, valid);\n            break;\n          }\n\n          break;\n        }\n\n      case PieceType.BISHOP:\n        {\n          if (isLegalBishopMove(px, py, dx, dy, boardState)) {\n            this.endMove(x, y, team, boardState, valid);\n            break;\n          }\n\n          break;\n        }\n\n      case PieceType.ROOK:\n        {\n          if (isLegalRookMove(px, py, dx, dy, boardState)) {\n            this.endMove(x, y, team, boardState, valid);\n            break;\n          }\n\n          break;\n        }\n\n      case PieceType.QUEEN:\n        {\n          if (isLegalQueenMove(px, py, dx, dy, boardState)) {\n            this.endMove(x, y, team, boardState, valid);\n            break;\n          }\n\n          break;\n        }\n\n      case PieceType.KING:\n        {\n          if (isLegalKingMove(px, py, dx, dy, boardState)) {\n            this.endMove(x, y, team, boardState, valid);\n            break;\n          }\n\n          break;\n        }\n    }\n\n    return [valid.value, GameState.NO_CHANGE];\n  }\n\n}","map":{"version":3,"sources":["/home/jaybird/Coding Projects/Chess4/chess/src/referee/Referee.ts"],"names":["PieceType","GameState","isPawnNormalMove","isEnPassant","isPawnStartingMove","isFriendlyPiece","unsetEnPassant","setEnPassant","isLegalBishopMove","isLegalRookMove","isLegalQueenMove","isLegalKingMove","isLegalNightMove","Referee","takePiece","x","y","team","boardState","piece","find","p","taken","endMove","valid","value","isValidMove","px","py","type","activePlayer","gameState","NO_CHANGE","dx","dy","PAWN","NIGHT","BISHOP","ROOK","QUEEN","KING"],"mappings":"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","sourcesContent":["import { PieceType, TeamType, Piece, GameState } from \"../constants\"\nimport { isPawnNormalMove, isEnPassant, isPawnStartingMove, isFriendlyPiece, unsetEnPassant, setEnPassant } from \"./pawnLogic\"\nimport { isLegalBishopMove, isLegalRookMove, isLegalQueenMove, isLegalKingMove, isLegalNightMove} from \"./pieceLogic\"\n\nexport default class Referee{\n    takePiece(x : number, y: number, team : TeamType, boardState : Piece []){\n        const piece = boardState.find(p => p.x === x && p.y === y && p.team !== team)  \n        if (piece) {\n            piece.taken = true\n        }\n    }\n    endMove(x : number, y: number, team : TeamType, boardState : Piece [], valid : any){\n        if (!isFriendlyPiece(x, y, team, boardState)){\n            this.takePiece(x, y, team, boardState)\n            unsetEnPassant(boardState)\n            valid.value = true          \n        }\n    }\n    isValidMove(px : number, py : number, x : number, y : number, type : PieceType, \n                team : TeamType, boardState : Piece [], activePlayer : TeamType, gameState : GameState [])\n                : [boolean, GameState]{\n        // Only the active player can move\n        if (team !== activePlayer){\n            return [false, GameState.NO_CHANGE]\n        }\n        // A non-move is not a move\n        if (px === x && py === y){\n            return [false, GameState.NO_CHANGE]\n        }\n        // A move off the board is not a move\n        if (x < 0 || y < 0 || x > 7 || y > 7){\n            return [false, GameState.NO_CHANGE]\n        }\n        var valid = { value: false }\n        const dx = x - px\n        const dy = y - py\n\n        switch(type){\n            case PieceType.PAWN : {\n                if (isPawnStartingMove(px, py, x, y, team, boardState)){\n                    setEnPassant(px, py, boardState)\n                    return [true, GameState.NO_CHANGE]\n                }\n                if (isPawnNormalMove(px, py, x, y, team, boardState)){\n                    this.endMove(x, y, team, boardState, valid)\n                    break;\n                }\n                if (isEnPassant(px, py, x, y, team, boardState)){\n                    this.endMove(x, py, team, boardState, valid)\n                    break;\n                }\n                break;\n            }\n            case PieceType.NIGHT : {\n                if (isLegalNightMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid)\n                    break;\n                }\n                break;\n            }\n            case PieceType.BISHOP : {\n                if (isLegalBishopMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid)\n                    break;\n                }\n                break;\n            }\n            case PieceType.ROOK : {\n                if (isLegalRookMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid)\n                    break;\n                }\n                break;\n            }\n            case PieceType.QUEEN : {\n                if (isLegalQueenMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid)\n                    break;\n                }\n                break;\n            }\n            case PieceType.KING : {\n                if (isLegalKingMove(px, py, dx, dy, boardState)){\n                    this.endMove(x, y, team, boardState, valid)\n                    break;\n                }\n                break;\n            }\n        }\n    return [valid.value, GameState.NO_CHANGE]\n    }\n}"]},"metadata":{},"sourceType":"module"}